<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LULU</title>
  <icon>https://www.gravatar.com/avatar/6b79ab49380d02ac3683f5bb60dd74c8</icon>
  <subtitle>我自风情万种，以码为生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lulustyle.net/"/>
  <updated>2018-12-27T01:35:19.835Z</updated>
  <id>http://lulustyle.net/</id>
  
  <author>
    <name>代码风情</name>
    <email>lulu27753@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二维码生成外链(判断是否是微信扫描）</title>
    <link href="http://lulustyle.net/2018/12/26/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%A4%96%E9%93%BE(%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E5%BE%AE%E4%BF%A1%E6%89%AB%E6%8F%8F%EF%BC%89/"/>
    <id>http://lulustyle.net/2018/12/26/二维码生成外链(判断是否是微信扫描）/</id>
    <published>2018-12-26T12:35:10.000Z</published>
    <updated>2018-12-27T01:35:19.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a><a name="3ixahe"></a>需求</h2><p>通过二维码生成 sketch 下载链接，可以扫描下载</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a><a name="dc5dbg"></a>问题</h2><p>初始方案：通过<a href="https://github.com/davidshimjs/qrcodejs" target="_blank" rel="noopener">二维码</a>生成 sketch 静态资源链接，然而 用安卓微信是直接解析的，会直接下载文件，用IOS 手机微信扫描后会产生乱码</p><h2 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a><a name="ho7qdw"></a>改进方案</h2><p>通过二维码生成一个静态 HTML 的页面，并判断“用户代理” 信息，确认是否是微信客户端，从而实现返回不同的文字效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Download<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        html, body &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #holder &#123;</span></span><br><span class="line"><span class="undefined">            height: 25%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #content &#123;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #content p &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">            line-height: 36px;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #link &#123;</span></span><br><span class="line"><span class="undefined">            display: inline-block;</span></span><br><span class="line"><span class="undefined">            width: 80%;</span></span><br><span class="line"><span class="undefined">            color: #2D71DB;</span></span><br><span class="line"><span class="undefined">            text-align: left;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">            word-break:break-all;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #link a &#123;</span></span><br><span class="line"><span class="undefined">            color: #2D71DB !important;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"holder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"tar"</span>&gt;</span>请复制网址后使用浏览器下载<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            或发送下载链接至PC端微信下载</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span></span><br><span class="line">           https://obs-cn-shanghai.yun.pingan.com/xdc/PAT%20Design%20UI%20Kit%20Orange_V1.1.sketch?response-content-disposition=attachment%3Bfilename%3DPAT%2520Design%2520UI%2520Kit%2520Orange_V1.1.sketch</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ua = navigator.userAgent.toLocaleLowerCase();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> isWeixin  = ua.indexOf(<span class="string">'micromessenger'</span>) != <span class="number">-1</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tar = <span class="built_in">document</span>.getElementById(<span class="string">'tar'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> link = <span class="string">'https://obs-cn-shanghai.yun.pingan.com/xdc/PAT%20Design%20UI%20Kit%20Orange_V1.1.sketch?response-content-disposition=attachment%3Bfilename%3DPAT%2520Design%2520UI%2520Kit%2520Orange_V1.1.sketch'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> linkWrap = <span class="built_in">document</span>.getElementById(<span class="string">'link'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!isWeixin) &#123;</span></span><br><span class="line"><span class="javascript">            tar.innerText = <span class="string">'可点击直接下载'</span>;</span></span><br><span class="line"><span class="javascript">            linkWrap.innerHTML = <span class="string">'&lt;a href="'</span> + link + <span class="string">'"&gt;'</span> + link + <span class="string">'&lt;/a&gt;'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a><a name="tgu3na"></a>最终效果</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a><a name="9awick"></a>浏览器</h3><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545828383912-65a6baa2-d735-45f0-a8f5-bc9b3dc63e7d.png" alt="image.png | left | 737x248"></p><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a><a name="g6srst"></a>微信</h3><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545828766595-2bc9cd40-07b7-4d66-af91-e0e9ce795402.png" alt="image.png | left | 284x504"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3ixahe&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;通过二维码生成 sketch 下载链接，可以扫描下载&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node 命令</title>
    <link href="http://lulustyle.net/2018/12/25/node%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://lulustyle.net/2018/12/25/node 命令/</id>
    <published>2018-12-25T13:54:33.000Z</published>
    <updated>2018-12-27T01:35:19.836Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询全局模块路径</span></span><br><span class="line">npm root -g  <span class="comment"># /usr/local/lib/node_modules</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack 工作原理</title>
    <link href="http://lulustyle.net/2018/12/24/webpack%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://lulustyle.net/2018/12/24/webpack 工作原理/</id>
    <published>2018-12-24T10:24:23.000Z</published>
    <updated>2018-12-27T01:35:19.707Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 底层原理及基础</span></span></p><hr><h1 id="流程概括"><a href="#流程概括" class="headerlink" title="流程概括"></a><a name="fp1pma"></a>流程概括</h1><ul><li style="list-style: none"><input type="checkbox"> 初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li style="list-style: none"><input type="checkbox"> 开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，通过执行对象的 run 方法开始执行编译</li><li style="list-style: none"><input type="checkbox"> 确定入口：根据配置中的 entry 找出所有入口文件</li><li style="list-style: none"><input type="checkbox"> 编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li style="list-style: none"><input type="checkbox"> 完成模块编译：在经过</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mobx</title>
    <link href="http://lulustyle.net/2018/12/23/mobx/"/>
    <id>http://lulustyle.net/2018/12/23/mobx/</id>
    <published>2018-12-23T02:45:00.000Z</published>
    <updated>2018-12-25T09:24:59.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a><a name="ios0rb"></a>mobx</h2><p>状态管理工具</p><h2 id="VS-Redux"><a href="#VS-Redux" class="headerlink" title="VS Redux"></a><a name="iguvfg"></a>VS Redux</h2><ol><li>开发难度低：redux函数式编程思想；mobx响应式编程风格，同时集成度高，避免引入众多第三方库</li><li>开发代码量少：redux有reducer等众多概念，而mobx只要在store中更新即可</li><li>渲染性能好：redux通过shouldComponentUpdate优化，但是当应用大到一定程度，就比较难实现；mobx精确的指出了哪些需要重复渲染，将re-render限制在最小范围之内</li></ol><h2 id="mobx核心思想"><a href="#mobx核心思想" class="headerlink" title="mobx核心思想"></a><a name="vzmlkh"></a>mobx核心思想</h2><ol><li>状态变化引起的副作用应该被自动触发</li><li>数据流：类redux单向数据流模式（action =》 State =〉Reaction）</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><a name="lohceq"></a>基础知识</h2><h3 id="实现继承和多态"><a href="#实现继承和多态" class="headerlink" title="实现继承和多态"></a><a name="gi5sve"></a>实现继承和多态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir mobx_test</span><br><span class="line">cd mobx_test</span><br><span class="line">mkdir src</span><br><span class="line">touch src/index.js</span><br><span class="line">npm init -y</span><br><span class="line">touch webpack.config.js</span><br><span class="line">yarn add webpack webpack-cli babel-core babel-preset-env babel-loader -D</span><br></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">mode: <span class="string">'development'</span>, <span class="comment">// 'production'</span></span><br><span class="line">entry: path.resolve(__dirname, <span class="string">'src/index.js'</span>),</span><br><span class="line">output: &#123;</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">filename: <span class="string">'main.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">presets: [<span class="string">'env'</span>],</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line">devtool: <span class="string">'inline-source-map'</span>, <span class="comment">// 方便调试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置package.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack -w"</span> // -w：js文件更改自动执行编译</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>编写index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>= <span class="string">"src/index.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写src/index.js 用原生实现继承和多态</p><ol><li>继承：Dog.prototype.<strong>proto</strong> === Animal.prototype</li><li>多态：重写Dog的name属性</li><li>Dog的原型对象的构造函数应该指向Dog而不是Animal</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// body...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">function <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// body...</span></span><br><span class="line">&#125;</span><br><span class="line">Object.defineProperties(Animal.prototype, &#123;</span><br><span class="line">name: &#123;</span><br><span class="line">value() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Animal'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">say: &#123;</span><br><span class="line">value() &#123;</span><br><span class="line"><span class="keyword">return</span> `I<span class="string">'m $&#123;this.name()&#125;`</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">// dog instanceOf Animal === true</span></span><br><span class="line"><span class="string">// dog.__proto__.__proto__ === Animal.prototype</span></span><br><span class="line"><span class="string">// dog.__proto__ === Dog.prototype</span></span><br><span class="line"><span class="string">// Dog.prototype.__proto__ === Animal.prototype</span></span><br><span class="line"><span class="string">Dog.prototype = Object.create(Animal.prototype, &#123;</span></span><br><span class="line"><span class="string">constructor: &#123;</span></span><br><span class="line"><span class="string">value: Dog,</span></span><br><span class="line"><span class="string">enumerable: false,</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">name: &#123;</span></span><br><span class="line"><span class="string">value() &#123;</span></span><br><span class="line"><span class="string">return `Dog`</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// document.write(new Dog() instanceOf Animal())</span></span><br><span class="line"><span class="string">// document.write(new Dog().say())</span></span><br><span class="line"><span class="string">document.write(Dog.prototype.constructor)</span></span><br></pre></td></tr></table></figure><p>通过ES6来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">name() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Animal'</span></span><br><span class="line">&#125;</span><br><span class="line">say() &#123;</span><br><span class="line"><span class="keyword">return</span> `I<span class="string">'m $&#123;this.name()&#125;`</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Dog extends Animal &#123;</span></span><br><span class="line"><span class="string">name() &#123;</span></span><br><span class="line"><span class="string">return '</span>Dog<span class="string">'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">console.log(new Dog() instanceOf Animal</span></span><br></pre></td></tr></table></figure><p>安装babel插件，使其支持在类中声明成员变量<br><code>yarn add babel-plugin-transform-class-properties -D</code><br>配置webpack.config.js<br>module.rules下面的use.plugins: [‘transform-class-properties’]</p><h3 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a><a name="fuxbvc"></a>decorator</h3><p>Decorator是在<code>声明阶段</code>实现类与类成员注解的一种语法.本质上是特殊的函数。</p><p>安装babel插件<br><code>yarn add babel-plugin-transform-decorators-legacy -D</code><br>配置webpack.config.js<br>module.rules下面的use.plugins: [‘transform-decorators-legacy’]</p><h2 id="mobx-常用-API"><a href="#mobx-常用-API" class="headerlink" title="mobx 常用 API"></a><a name="821qpe"></a>mobx 常用 API</h2><p>安装mobx依赖：<code>yarn add mobx</code></p><h3 id="observable-可观察的数据"><a href="#observable-可观察的数据" class="headerlink" title="observable(可观察的数据)"></a><a name="ve5tbh"></a>observable(可观察的数据)</h3><p>是一种让数据的变化可以被观察的方法</p><p>哪些数据可以被观察：</p><ul><li>原始类型：String | Number | Boolean | Symbol</li><li>对象</li><li>数组</li></ul><p>PS：一定要检查数组的长度以避免越界访问，在mobx中越界的数组值是不被观察的.同样要检查对象是否含有属性hasOwnProperty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable &#125; from <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="meta">@observable</span> array = []</span><br><span class="line">  <span class="meta">@observable</span> obj = &#123;&#125;</span><br><span class="line">  <span class="meta">@observable</span> map = <span class="keyword">new</span> Map()</span><br><span class="line"></span><br><span class="line">  <span class="meta">@observable</span> string = <span class="string">'hello'</span></span><br><span class="line">  <span class="meta">@observable</span> number = <span class="number">20</span></span><br><span class="line">  <span class="meta">@observable</span> bool = <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对可观察的数据作出反应"><a href="#对可观察的数据作出反应" class="headerlink" title="对可观察的数据作出反应"></a><a name="xyz4dg"></a>对可观察的数据作出反应</h3><p>方式：</p><ul><li>computed<ul><li>observe()</li><li>get()</li></ul></li><li>autorun</li><li>when</li><li>reaction</li></ul><h2 id="mobx-实现-todoList"><a href="#mobx-实现-todoList" class="headerlink" title="mobx 实现 todoList"></a><a name="3dhdsg"></a>mobx 实现 todoList</h2><p>yarn add mobx-react react react-dom prop-types<br>yarn add babel-preset-react</p><p>配置webpack.config.js<br><code>presets: [[&#39;env&#39;, &#39;react&#39;]],</code></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="bmm3sf"></a>资源</h2><p>mobx-state-tree</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mobx&quot;&gt;&lt;a href=&quot;#mobx&quot; class=&quot;headerlink&quot; title=&quot;mobx&quot;&gt;&lt;/a&gt;&lt;a name=&quot;ios0rb&quot;&gt;&lt;/a&gt;mobx&lt;/h2&gt;&lt;p&gt;状态管理工具&lt;/p&gt;
&lt;h2 id=&quot;VS-Redux&quot;&gt;&lt;a href=&quot;#VS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="http://lulustyle.net/2018/12/23/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://lulustyle.net/2018/12/23/单元测试/</id>
    <published>2018-12-23T02:25:20.000Z</published>
    <updated>2018-12-25T09:24:59.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a name="x1gdns"></a>前言</h2><h3 id="前端单测是一个可有可无的东西？"><a href="#前端单测是一个可有可无的东西？" class="headerlink" title="前端单测是一个可有可无的东西？"></a><a name="s0vrxu"></a>前端单测是一个可有可无的东西？</h3><ul><li>写单测比较费时，有这个时间不如多做几个需求！</li><li>测试在验收的时候对页面的功能都会操作一遍，写单测相当于无用功</li><li>后端提供给前端的接口需要保证质量，因此需要做单测，但前端很少需要提供接口给其他人。</li></ul><h3 id="什么情况下需要单测"><a href="#什么情况下需要单测" class="headerlink" title="什么情况下需要单测"></a><a name="dbvpss"></a>什么情况下需要单测</h3><p>在大部分情况下，如果公司业务不复杂，我是认同完全没有必要做单测的观点的。但如果涉及到了以下几个方面，则要好好考虑一下：</p><ul><li>业务比较复杂，前端参与的人员超过3人</li><li>公司非常注重代码的质量，想尽一切办法杜绝线上出bug</li><li>是跨项目组件的提供方</li><li>在做一个开源项目</li></ul><h3 id="组件化单测的必要性："><a href="#组件化单测的必要性：" class="headerlink" title="组件化单测的必要性："></a><a name="41hnwf"></a>组件化单测的必要性：</h3><ul><li>虽然单元测试需要花费时间且所花时间会比模块本身更多，但是性价比却是随着使用的次数越来越高</li><li>在工作中或开源社区中，我们写库的目的都是为了能更好的为别人使用，这个时候单元测试应该是必须的</li><li>好的单元测试可以作为优秀的文档，并且保证模块行为的确定性。</li><li>UI库并不涉及业务逻辑，所以只写单元测试足够</li></ul><h3 id="测哪些方面"><a href="#测哪些方面" class="headerlink" title="测哪些方面"></a><a name="o72igp"></a>测哪些方面</h3><ul><li>模块应被渲染的DOM树是否正确</li><li>模块的属性传递是否正确,(属性是方法,则是否被正确调用;属性是布尔值或对象,则是否被正确传递且达到预期的目的）</li><li>模块内的各个行为是否正确</li><li>甚至可以测试各个DOM节点是否被应用预期的class，且这些class是不是预期的样式</li></ul><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a><a name="t276we"></a>测试工具</h2><ul><li><a href="https://facebook.github.io/jest/docs/en/getting-started.html" target="_blank" rel="noopener">Jest</a>是Facebook开发的一个测试框架，它集成了测试执行器、断言库、spy、mock、snapshot和测试覆盖率报告等功能。React项目本身也是使用Jest进行单测的，因此它们俩的契合度相当高。</li><li><a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme</a>是由airbnb开发的React单测工具。它扩展了React的TestUtils并通过支持类似jQuery的find语法可以很方便的对render出来的结果做各种断言。</li></ul><h2 id="JEST-跑一个简单的测试用例"><a href="#JEST-跑一个简单的测试用例" class="headerlink" title="JEST 跑一个简单的测试用例"></a><a name="pz3xty"></a>JEST 跑一个简单的测试用例</h2><blockquote><p>技术栈：React@16 + webpack@3</p></blockquote><blockquote><p>编写测试用例流程：</p><ul><li>Arrange（准备）：设置测试场景，准备测试数据</li><li>Act（执行）：调用被测试代码</li><li>Assert（断言）：验证被测代码是否与预期相同</li></ul></blockquote><h3 id="安装Jest并让其支持ES6语法"><a href="#安装Jest并让其支持ES6语法" class="headerlink" title="安装Jest并让其支持ES6语法"></a><a name="vq46fq"></a>安装Jest并让其支持ES6语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest jest-cli babel-jest <span class="comment"># babel-jest的作用是让单测代码支持ES6</span></span><br></pre></td></tr></table></figure><h3 id="新建单测文件夹并新建一个单测文件"><a href="#新建单测文件夹并新建一个单测文件" class="headerlink" title="新建单测文件夹并新建一个单测文件"></a><a name="s5tgsg"></a>新建单测文件夹并新建一个单测文件</h3><p>1.在项目的根目录新建<code>__jest__</code>文件夹和<code>components</code>文件夹</p><ul><li>__jest__<ul><li>__mocks__</li><li>__tests__<ul><li>mudules // 存放各个模块的单测代码</li><li>utils // 对一些公用函数写的测试代码<ul><li>sum.test.js // 单测用例</li></ul></li></ul></li></ul></li><li>components<ul><li>Math.js // 被测试对象</li></ul></li></ul><p>2.新建单测文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// __jest__/__test__/sum.test.js</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="built_in">require</span>(<span class="string">'../../../components/Math'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'adds 1 + 2 to equal 3'</span>, () =&gt; &#123;</span><br><span class="line">  expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = sum;</span><br></pre></td></tr></table></figure><h3 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a><a name="3mlvyy"></a>配置package.json</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">    // moduleFileExtensions对应webpack中的extensions；</span><br><span class="line">    "moduleFileExtensions": [</span><br><span class="line">      "js",</span><br><span class="line">      <span class="string">"jsx"</span></span><br><span class="line">    ],</span><br><span class="line">    // moduleDirectories对应webpack中的modulesDirectories；</span><br><span class="line">    "moduleDirectories": [</span><br><span class="line">      <span class="string">"node_modules"</span></span><br><span class="line">    ],</span><br><span class="line">    // moduleNameMapper对应webpack中的alias</span><br><span class="line">    "moduleNameMapper": &#123;</span><br><span class="line">      "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "&lt;rootDir&gt;/__jest__/__mocks__/fileMock.js",</span><br><span class="line">      "\\.(css|scss)$": "identity-obj-proxy", // 对于css等样式文件，使用identity-obj-proxy来mock，它会在引用到class的地方直接返回class的类名</span><br><span class="line">      "^cpn(.*)$": "&lt;rootDir&gt;/src/components$1" //这里的&lt;rootDir&gt;对应我们项目的根目录。</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>同时添加以下script：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest __jest__/__tests__"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行测试脚本"><a href="#运行测试脚本" class="headerlink" title="运行测试脚本"></a><a name="mcrawv"></a>运行测试脚本</h3><p>在命令行输入：<code>npm run test</code><br>出现以下结果，则说明Jest安装成功并通过第一个测试!👏</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545531987108-6d80000f-ff1a-4081-b3b6-c5988af0ac16.png" alt="jest_result.png | left | 747x354"></p><h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a><a name="7zkmfs"></a>create-react-app</h2><ul><li>create-react-app 自带 Jest 库</li><li>Jest 会自动在当前目录下寻找满足条件的JS文件作为单测代码来执行<ul><li>文件名以 <code>.test.js</code> 为后缀的代码文件</li><li>存于 <code>_test_</code> 目录下的代码文件</li></ul></li></ul><p>目录结构</p><ul><li>在根目录创建test目录，单测文件以 <code>.test.js</code> 为后缀</li><li>在每个组件目录下创建 <code>_test_</code> 子目录</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a name="daitws"></a>语法</h2><h3 id="测试用例it"><a href="#测试用例it" class="headerlink" title="测试用例it()"></a><a name="r1gazc"></a>测试用例it()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 它在什么样的情况下是什么行为</span><br><span class="line">it(&apos;should return object when invoked&apos;, () =&gt; &#123;</span><br><span class="line">  // 增加断言语句</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="测试套件-describe"><a href="#测试套件-describe" class="headerlink" title="测试套件 describe()"></a><a name="swhgzr"></a>测试套件 describe()</h3><ul><li>测试套件 = 测试用例 + 测试套件</li><li>从外到里顺序执行</li><li>重用共同的环境设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'action'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should return object when invoked'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 增加断言语句</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 可以有更多的it函数调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a><a name="1nglxl"></a>钩子函数</h3><ul><li>beforeAll: 在开始测试套件开始之前执行一次</li><li>afterAll: 在结束测试套件中所有测试用例之后执行一次</li><li>beforeEach: 每个测试用例在执行之前都执行一次</li><li>afterEach: 每个测试用例在执行之后都执行一次</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;a name=&quot;x1gdns&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;前端单测是一个可有可无的东西？&quot;&gt;&lt;a href=&quot;#前端单测是一个可有可无的东西？&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目启动流程</title>
    <link href="http://lulustyle.net/2018/12/23/%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://lulustyle.net/2018/12/23/项目启动流程/</id>
    <published>2018-12-23T02:19:17.000Z</published>
    <updated>2018-12-27T01:35:19.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a name="r486iu"></a>前言</h2><p>假设接到一个新项目，首先考虑以下几点</p><ul><li style="list-style: none"><input type="checkbox"> 使用何种类库，如何考虑技术选型？分别从哪几个维度去考虑？</li><li style="list-style: none"><input type="checkbox"> 项目目录如何组织(按角色还是按功能)</li><li style="list-style: none"><input type="checkbox"> dev和prod不同环境如何配置</li><li style="list-style: none"><input type="checkbox"> 团队内部其他系统都用了什么</li><li style="list-style: none"><input type="checkbox"> 多人合作开发，团队环境和代码规范问题如何解决?是否需要统一编辑器</li><li style="list-style: none"><input type="checkbox"> 是否需要出文档，教其他团队成员配置环境、安装依赖等</li><li style="list-style: none"><input type="checkbox"> 如果每个项目皆是如此，请考虑效率？(脚手架、cli)</li><li style="list-style: none"><input type="checkbox"> 如何稳定高效的推动项目，请考虑成本收益比，并考虑项目所需的人力、物力的各项支持</li></ul><h2 id="技术框架选型"><a href="#技术框架选型" class="headerlink" title="技术框架选型"></a><a name="7lcirm"></a>技术框架选型</h2><p>考虑以下几个问题：</p><ul><li style="list-style: none"><input type="checkbox"> 框架自身成熟度？</li><li style="list-style: none"><input type="checkbox"> 框架生态圈</li><li style="list-style: none"><input type="checkbox"> 框架主要解决什么问题？</li><li style="list-style: none"><input type="checkbox"> 团队：学习成本</li><li style="list-style: none"><input type="checkbox"> 项目周期：</li><li style="list-style: none"><input type="checkbox"> 项目维护成本</li></ul><blockquote><p>结论：最终决定在中小型项目中使用Vue，而大中型项目中使用React，而对于金融科技公司而言，中台复杂项目较多，从而选定以React为主，当项目周期短且交付压力大时仍采用使用Vue的策略。</p></blockquote><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a><a name="pz3fgg"></a>项目目录</h2><h3 id="按角色"><a href="#按角色" class="headerlink" title="按角色"></a><a name="dwingo"></a>按角色</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">reducers/   <span class="comment">#包含所有Redux 的reducer;</span></span><br><span class="line">    todoReducer.js</span><br><span class="line">actions/    <span class="comment">#包含所有action 构造函数；</span></span><br><span class="line">    todoActions.js</span><br><span class="line">components/ <span class="comment">#包含所有的傻瓜组件；</span></span><br><span class="line">    todoList.js</span><br><span class="line">containers/ <span class="comment">#包含所有的容器组件。</span></span><br><span class="line">    todoListContainer.js</span><br></pre></td></tr></table></figure><blockquote><p>“按照角色组织”的方式非常不利于应用的扩展。当你需要对一个功能进行修改，虽然这个功能只是针对某一个具体的应用模块，但是却牵扯到多个角色，而不得不在多个目录间跳转。</p></blockquote><h3 id="按功能"><a href="#按功能" class="headerlink" title="按功能"></a><a name="3ktcmk"></a>按功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">todoList/</span><br><span class="line">    actions.js  <span class="comment">#定义action 类型；</span></span><br><span class="line">    actionTypes.js  <span class="comment">#定义action 构造函数，决定了这个功能模块可以接受的动作；</span></span><br><span class="line">    index.js    <span class="comment">#导出该组件需要导出的所有内容，每个文件夹下都包含一个index文件也有利于直接引用文件夹名称就可以导出模块</span></span><br><span class="line">    reducer.jS  <span class="comment">#定义这个功能模块如何对应actions.js 中定义的动作；</span></span><br><span class="line">    views/  <span class="comment">#包含这个功能模块中所有的React 组件</span></span><br><span class="line">        component.js    <span class="comment">#傻瓜组件</span></span><br><span class="line">        container.js    <span class="comment">#容器组件</span></span><br><span class="line">filter/</span><br><span class="line">    actions.js</span><br><span class="line">    actionTypes.js</span><br><span class="line">    index.js</span><br><span class="line">    reducer.js</span><br><span class="line">    views/</span><br><span class="line">    component.js</span><br><span class="line">    container.js</span><br></pre></td></tr></table></figure><blockquote><p>每个功能模块对应一个目录，每个目录下包含同样名字的角色文件。当需要修改某个功能模块的代码时，只要关注对应的目录即可，所有需要修改的代码文件都能在当前目录下找到。</p></blockquote><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a><a name="9waqmg"></a>脚手架</h2><h3 id="为什么不用create-react-app"><a href="#为什么不用create-react-app" class="headerlink" title="为什么不用create-react-app"></a><a name="1kzuks"></a>为什么不用create-react-app</h3><ul><li>不满足当前团队的需求</li><li>不可以定制化，需要二次修改配置</li><li>没有开发组件的能力</li></ul><blockquote><p>结论：为什么不自己开发一个cli工具呢？？</p></blockquote><h3 id="yeoman"><a href="#yeoman" class="headerlink" title="yeoman"></a><a name="5fy8rx"></a>yeoman</h3><ul><li>npm install yo -g</li><li>把全局环境node_modules包下面的模板工程 copy 到你的当前项目路径文件夹下</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;a name=&quot;r486iu&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;假设接到一个新项目，首先考虑以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://lulustyle.net/2018/12/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://lulustyle.net/2018/12/23/机器学习/</id>
    <published>2018-12-23T01:50:20.000Z</published>
    <updated>2018-12-25T09:24:59.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a><a name="lbyepu"></a>Python</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰 Python 教程</a></li><li><a href="https://github.com/TwoWater/Python" target="_blank" rel="noopener">Python 入门教程</a></li></ul><h2 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a><a name="gyswoz"></a>Tensorflow</h2><ul><li><a href="https://tensorflow.juejin.im/get_started/" target="_blank" rel="noopener">Tensorflow中文文档</a></li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="yck2ad"></a>资源</h2><ul><li><a href="https://mp.weixin.qq.com/s/ECb57XXKhYqh4TjNM7cZYQ" target="_blank" rel="noopener">机器学习干货Top10，附项目地址</a></li><li><a href="https://developers.google.cn/machine-learning/crash-course/?hl=zh-CN" target="_blank" rel="noopener">机器学习速成课程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;&lt;a name=&quot;lbyepu&quot;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开源管理</title>
    <link href="http://lulustyle.net/2018/12/23/%E5%BC%80%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <id>http://lulustyle.net/2018/12/23/开源管理/</id>
    <published>2018-12-23T01:45:43.000Z</published>
    <updated>2018-12-27T01:35:19.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="督导小组"><a href="#督导小组" class="headerlink" title="督导小组"></a><a name="w9hgep"></a>督导小组</h1><ul><li style="list-style: none"><input type="checkbox"> 核心功能的监督把控，</li><li style="list-style: none"><input type="checkbox"> 整体功能的规划设计，</li><li style="list-style: none"><input type="checkbox"> 督导新功能的引入，</li><li style="list-style: none"><input type="checkbox"> 制定开发计划，</li><li style="list-style: none"><input type="checkbox"> 提交代码 Review</li></ul><h1 id="编译小组"><a href="#编译小组" class="headerlink" title="编译小组"></a><a name="psblws"></a>编译小组</h1><ul><li style="list-style: none"><input type="checkbox"> 代码文件编译到不同端的实现，</li><li style="list-style: none"><input type="checkbox"> 微信小程序端 JSX 编译，</li><li style="list-style: none"><input type="checkbox"> 快应用端 JSX 编译等</li><li style="list-style: none"><input type="checkbox"> ESLint 插件维护</li></ul><h1 id="开发工具小组"><a href="#开发工具小组" class="headerlink" title="开发工具小组"></a><a name="3l0vbt"></a>开发工具小组</h1><p>负责 cli 工具的开发与优化工作</p><h1 id="组件库小组"><a href="#组件库小组" class="headerlink" title="组件库小组"></a><a name="3l0vbt"></a>组件库小组</h1><ul><li style="list-style: none"><input type="checkbox"> 标准组件库的规范制定、</li><li style="list-style: none"><input type="checkbox"> 文档编写，</li><li style="list-style: none"><input type="checkbox"> 标准组件库在不同端的实现，</li><li style="list-style: none"><input type="checkbox"> 标准组件库官网建设</li></ul><h1 id="运行框架小组"><a href="#运行框架小组" class="headerlink" title="运行框架小组"></a><a name="3l0vbt"></a>运行框架小组</h1><p> 负责不同端运行框架的实现</p><h1 id="端能力-API-小组"><a href="#端能力-API-小组" class="headerlink" title="端能力 API 小组"></a><a name="3l0vbt"></a>端能力 API 小组</h1><ul><li style="list-style: none"><input type="checkbox"> 端能力 API 的规范制定、</li><li style="list-style: none"><input type="checkbox"> 端能力 API 的文档编写，</li><li style="list-style: none"><input type="checkbox"> 端能力 API 在不同端的实现</li></ul><h1 id="UI-库小组"><a href="#UI-库小组" class="headerlink" title="UI 库小组"></a><a name="3l0vbt"></a>UI 库小组</h1><p> 负责 Dbox UI 库的实现</p><h1 id="社区维护小组"><a href="#社区维护小组" class="headerlink" title="社区维护小组"></a><a name="3l0vbt"></a>社区维护小组</h1><ul><li style="list-style: none"><input type="checkbox"> 社区内答疑解惑，</li><li style="list-style: none"><input type="checkbox"> GitHub ISSUE 维护，</li><li style="list-style: none"><input type="checkbox"> 问题搜集，</li><li style="list-style: none"><input type="checkbox"> 社区项目发起与引导，</li><li style="list-style: none"><input type="checkbox"> 第三方库适配与生态管理等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;督导小组&quot;&gt;&lt;a href=&quot;#督导小组&quot; class=&quot;headerlink&quot; title=&quot;督导小组&quot;&gt;&lt;/a&gt;&lt;a name=&quot;w9hgep&quot;&gt;&lt;/a&gt;督导小组&lt;/h1&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input typ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何做一个 Github 开源项目</title>
    <link href="http://lulustyle.net/2018/12/23/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%20Github%20%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://lulustyle.net/2018/12/23/如何做一个 Github 开源项目/</id>
    <published>2018-12-23T01:44:09.000Z</published>
    <updated>2018-12-27T01:35:19.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适合开源"><a href="#适合开源" class="headerlink" title="适合开源"></a><a name="p4zokc"></a>适合开源</h2><ul><li>cache工具(缓存工具，整合localStorage,以及合理的内存销毁机制)</li><li>query2json,解析url参数为json格式</li><li>移动端打印console.log,方便移动端输出内容</li></ul><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a><a name="40d3er"></a>版本号</h2><ul><li>一级：重构版本</li><li>二级：重大功能改进</li><li>三级：小升级或者bug修复</li></ul><p>0.X.X: 非正式版本</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><a name="5vq9yv"></a>目录结构</h2><ul><li>src: 源代码</li><li>release: 发布结果</li><li>test：单元测试用例</li><li>doc: 文档</li><li>example：实例</li></ul><h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a><a name="eqgbtd"></a>Readme</h2><ul><li>产品简介(此处要突出特点，打差异化竞争)</li><li>产品安装和下载</li><li>快速使用(详细的使用文档或者二次开发文档，外链即可)</li><li>交流提问区(QQ、微信群)</li><li>关于作者(博客链接和收款二维码)</li></ul><h2 id="文档和测试用例"><a href="#文档和测试用例" class="headerlink" title="文档和测试用例"></a><a name="yxcddz"></a>文档和测试用例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i gitbook-cli -g</span><br><span class="line">SUMMARY.md</span><br><span class="line">gitbook init</span><br><span class="line">gitbook build</span><br></pre></td></tr></table></figure><p>配置.gitignore加上_book</p><h2 id="发布npm模块"><a href="#发布npm模块" class="headerlink" title="发布npm模块"></a><a name="s3hgkd"></a>发布npm模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm add user</span><br><span class="line">npm login</span><br><span class="line">npm publish .</span><br></pre></td></tr></table></figure><p>不能重名</p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a><a name="kft6cp"></a>升级</h2><ul><li>新建分支</li><li>修改版本号</li><li>修改代码、文档和测试用例</li><li>自测</li><li>将新的分支提交到远程</li><li>再次确认版本号，因为版本号非常重要</li><li>将新的分支合并到master，并提交master到远程</li><li>创建tag并提交到远程</li><li>提交到npm</li></ul><h2 id="宣传"><a href="#宣传" class="headerlink" title="宣传"></a><a name="g4knmn"></a>宣传</h2><p>一个公司的核心竞争力，一是技术，二是营销。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a><a name="gm41yu"></a>博客</h3><p>围绕产品功能<br>第一类技术干货文章<br>第二类产品介绍<br>以第一类为主</p><ul><li>如何</li><li>坑</li><li>预防</li><li>总结</li><li>半年记</li></ul><h3 id="回答相关的问题"><a href="#回答相关的问题" class="headerlink" title="回答相关的问题"></a><a name="9lgcmn"></a>回答相关的问题</h3><ul><li>知乎</li><li><a href="http://sf.gg" target="_blank" rel="noopener">sf.gg</a></li><li><p>stackoverflow</p></li><li><p>字数只能多不能少，最好图文并茂，还能讲个笑话</p></li><li>回答要专业，经过亲自测试，不要想当然的瞎猜</li><li>回答问题的最后，顺便推广自己的产品</li></ul><h2 id="需求采纳"><a href="#需求采纳" class="headerlink" title="需求采纳"></a><a name="25ntlx"></a>需求采纳</h2><ul><li>很多用户都提过这个需求，即大众需求</li><li>自己判断这个需求对大部分用户都有用</li><li>该需求符合产品定位以及产品发展的方向</li><li>该需求能抹平和竞品的差距，或者能和竞品差异化竞争</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;适合开源&quot;&gt;&lt;a href=&quot;#适合开源&quot; class=&quot;headerlink&quot; title=&quot;适合开源&quot;&gt;&lt;/a&gt;&lt;a name=&quot;p4zokc&quot;&gt;&lt;/a&gt;适合开源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;cache工具(缓存工具，整合localStorage,以及合理的内存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微博运营</title>
    <link href="http://lulustyle.net/2018/12/23/%E5%BE%AE%E5%8D%9A%E8%BF%90%E8%90%A5/"/>
    <id>http://lulustyle.net/2018/12/23/微博运营/</id>
    <published>2018-12-23T01:42:52.000Z</published>
    <updated>2018-12-27T01:35:19.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微博运营"><a href="#微博运营" class="headerlink" title="微博运营"></a><a name="1y6nkg"></a>微博运营</h2><ul><li>微博重点扶持行业：母婴、金融、汽车、美妆、饮料等</li><li>要想有粉丝 》要先有曝光 》先有流量</li><li>平台根据用户反馈给内容分配流量：微博是通过1个小时内评判流量是否倾斜</li><li>符合平台运营的基本规范 + 生产用户喜欢的优质内容</li><li><p>微博加权规则</p><ul><li><p>账号因素：</p><ul><li>认证：媒体账号</li><li>会员</li><li>绑定手机号</li><li>丰富账号信息</li></ul></li><li>内容因素：热门话题 | 九图 | 头条文章 | 视频</li></ul></li><li><p>微博降权</p><ul><li>不被推荐到热门流 减少部分曝光量 减少大部分曝光量 封号</li><li>向外引流：微信 | 抖音</li><li><p>广告关键词：</p><ul><li>易导致账号被降权，降低在热门展现的几率或者是禁止展现</li><li>“购买” “优惠” “券”等 淘宝 | 京东 | 亚马逊 | 。。。| 5 折。。。都要避免</li><li>电商领域会有外链的特权</li></ul></li></ul></li><li><p>微博向微信引流</p><ul><li>将微信号插在图片，被监测的几率相对较低</li><li>设置私信自动回复，用“VX”字样</li></ul></li><li><p>微博蹭热搜、公众号蹭热点</p><ul><li>选择可蹭的话题</li><li>撰写蹭热文案：关键词必须相同、完全关联，且要保证文案的相关性</li></ul></li><li><p>长文关注：</p><ul><li>新账号扶植功能，仅粉丝可阅读全文，否则需关注账号看全文</li><li>总粉丝两万以下的账号有此功能，一旦突破，功能自动取消</li></ul></li><li><p>利用大 V 流量增粉</p><ul><li>找垂直领域大V</li><li>谈价格</li><li>写文章</li></ul></li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="tu3ryh"></a>资源</h2><p><a href="http://123.ipaiban.com/" target="_blank" rel="noopener">公众号运营工具导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微博运营&quot;&gt;&lt;a href=&quot;#微博运营&quot; class=&quot;headerlink&quot; title=&quot;微博运营&quot;&gt;&lt;/a&gt;&lt;a name=&quot;1y6nkg&quot;&gt;&lt;/a&gt;微博运营&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;微博重点扶持行业：母婴、金融、汽车、美妆、饮料等&lt;/li&gt;
&lt;li&gt;要
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this 指向</title>
    <link href="http://lulustyle.net/2018/12/23/this%20%E6%8C%87%E5%90%91/"/>
    <id>http://lulustyle.net/2018/12/23/this 指向/</id>
    <published>2018-12-23T01:30:22.000Z</published>
    <updated>2018-12-27T01:35:19.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this-介绍"><a href="#this-介绍" class="headerlink" title="this 介绍"></a><a name="daw7bf"></a>this 介绍</h2><p>this 总是指向一个对象，而具体指向哪个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境</p><p>this的指向</p><ul><li>作为对象的方法调用：指向该对象</li><li>作为普通函数调用：指向全局对象(严格模式下：undefined)</li><li>构造器调用</li><li>Function.prototype.call 或 Function.prototype.apply 调用</li></ul><p>document.getElementById()的内部实现中需要用到this，并且这个this被期望指向document</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById = (</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> func.apply(<span class="built_in">document</span>, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)(<span class="built_in">document</span>.getElementById)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById</span><br></pre></td></tr></table></figure><h2 id="call-amp-amp-apply"><a href="#call-amp-amp-apply" class="headerlink" title="call &amp;&amp; apply"></a><a name="gg23ed"></a>call &amp;&amp; apply</h2><p>当使用 call 或 apply 时，如果我们传入的第一个参数为null, 函数体内的 this 会指向默认的宿主对象，在浏览器中则是window.但是在严格模式下，函数体内的 this 还是为 null</p><p>有时候使用 call 或 apply 的目的不在于指定 this 指向，而是借用其他对象的方法</p><p>如 Math.max.apply(null, [1,2,3,4,5]) 等同于 Math.max(…[1,2,3,4,5])</p><h3 id="改变this的指向"><a href="#改变this的指向" class="headerlink" title="改变this的指向"></a><a name="3d3ilr"></a>改变this的指向</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span> <span class="comment">// 保存原函数</span></span><br><span class="line"><span class="keyword">var</span> context = [].shift.call(<span class="built_in">arguments</span>) <span class="comment">// 需要绑定的 this 上下文</span></span><br><span class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>) <span class="comment">// 剩余的参数转成数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 返回一个新的函数</span></span><br><span class="line"><span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))) </span><br><span class="line"><span class="comment">// 执行新的函数的时候，会把之前传入的context当作新函数体内的this</span></span><br><span class="line"><span class="comment">// 并且组合两次分别传入的参数，作为新函数的参数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name: <span class="string">'lulu'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name)</span><br><span class="line">alert([a, b, c, d])</span><br><span class="line">&#125;.bind(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">func(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="借用其他对象的方法"><a href="#借用其他对象的方法" class="headerlink" title="借用其他对象的方法"></a><a name="5bxenb"></a>借用其他对象的方法</h3><ol><li>借用构造函数，从而实现一些类似继承的效果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">A.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">B.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B(<span class="string">'lulu'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b.getName()) <span class="comment">// lulu</span></span><br></pre></td></tr></table></figure><ol><li>操作arguments对象时借用Array.prototype上的方法</li></ol><ul><li>向 arguments 中添加一个新的元素：Array.prototype.push.call(arguments, …)</li><li>把 arguments 转换成一个真的数组：Array.prototype.slice.call(arguments)</li><li>截去 arguments 的头一个元素：Array.prototype.shift.call(arguments)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="number">3</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// [1,2,3]</span></span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V8 源码实现上面的代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayPush</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> n = TO_UINT32(<span class="keyword">this</span>.length) <span class="comment">// 被 push 的对象的 length</span></span><br><span class="line"><span class="keyword">var</span> m = %_ArgumentsLength() <span class="comment">// push 的参数个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">this</span>[n + i] = %_Arguments[i] <span class="comment">// 对象本身要可以存取属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.length = n + m <span class="comment">// 修正 length 属性的值</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.length <span class="comment">// 对象的 length 属性要可读写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;this-介绍&quot;&gt;&lt;a href=&quot;#this-介绍&quot; class=&quot;headerlink&quot; title=&quot;this 介绍&quot;&gt;&lt;/a&gt;&lt;a name=&quot;daw7bf&quot;&gt;&lt;/a&gt;this 介绍&lt;/h2&gt;&lt;p&gt;this 总是指向一个对象，而具体指向哪个对象是在运行时基
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>闭包和高阶函数</title>
    <link href="http://lulustyle.net/2018/12/23/%E9%97%AD%E5%8C%85%E5%92%8C%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://lulustyle.net/2018/12/23/闭包和高阶函数/</id>
    <published>2018-12-23T01:04:56.000Z</published>
    <updated>2018-12-27T01:35:19.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="closure"><a href="#closure" class="headerlink" title="closure"></a><a name="2ywuce"></a>closure</h2><p>看是否对自由变量进行了捕获</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a><a name="t3vhby"></a>变量作用域</h3><ul><li>函数作用域</li><li>全局作用域</li></ul><p>作用域链：变量的搜索从内而外。函数像一层半透明的玻璃，在函数里面可以看到函数外面的变量，而函数外面则无法看到函数里面的变量</p><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a><a name="lttudk"></a>变量的生命周期</h3><ul><li>全局变量：永久，除非主动销毁</li><li>局部变量：退出函数时就没有了价值，即随着函数调用的结束而被销毁</li></ul><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a><a name="g906ax"></a>闭包的作用</h3><ul><li>封装变量</li><li>延续局部变量的寿命</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 然而闭包可以延续局部变量的生命周期</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">a++;</span><br><span class="line">alert(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = func()</span><br><span class="line">f() <span class="comment">// 2</span></span><br><span class="line">f() <span class="comment">// 3</span></span><br><span class="line">f() <span class="comment">// 4</span></span><br><span class="line">f() <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><blockquote><p>当退出函数时，局部变量a并没有消失，而是似乎一直在某个地方存活着。这是因为当执行<code>var f = func()</code>时，f返回了一个匿名函数的引用，它可以访问到func()被调用时产生的环境，而局部变量a一直处在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Type = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; type = [<span class="string">'String'</span>, <span class="string">'Array'</span>, <span class="string">'Number'</span>]; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">Type[<span class="string">`is<span class="subst">$&#123;type&#125;</span>`</span>] = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object $&#123;type&#125;]'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)(type)</span><br><span class="line">&#125;</span><br><span class="line">Type.isArray([])</span><br><span class="line">Type.isString(<span class="string">'str'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于相同的参数来说，每次都进行计算时一种浪费，引入缓存机制提高函数性能</span></span><br><span class="line"><span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line"><span class="keyword">if</span> (cache[args]) <span class="keyword">return</span> cache[args]</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">result = result * <span class="built_in">arguments</span>[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cache[args] = result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(cache)</span><br></pre></td></tr></table></figure><p>代码重构：1. 去掉全局变量 2. 独立可复用的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> mult = (</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line"><span class="keyword">if</span> (cache[args]) <span class="keyword">return</span> cache[args]</span><br><span class="line"><span class="comment">// return cache[args] = calculate.apply(null, arguments) // null 即 windows 对象</span></span><br><span class="line"> <span class="keyword">return</span> cache[args] = calculate(...arguments)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">result = result * <span class="built_in">arguments</span>[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> report = <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> imgs = []</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">imgs.push(img)</span><br><span class="line">img.src = src</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a><a name="6kpemq"></a>面向对象设计</h3><blockquote><p>过程与数据的结合是形容面向对象中的“对象”时经常使用的表达<br>对象以方法的形式包含了过程<br>而闭包则是在过程中以环境的形式包含了数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="keyword">var</span> extent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">call: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">value++</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> extent = extent()</span><br><span class="line">extent.call()</span><br><span class="line">extent.call()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向对象</span></span><br><span class="line"><span class="keyword">var</span> extent = &#123;</span><br><span class="line">value: <span class="number">0</span>,</span><br><span class="line">call: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value++</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">extent.call() <span class="comment">// 1</span></span><br><span class="line">extent.call() <span class="comment">// 2</span></span><br><span class="line">extent.call() <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">var</span> Extent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">Extent.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value++</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> extent = <span class="keyword">new</span> Extent()</span><br><span class="line">extent.call() <span class="comment">// 1</span></span><br><span class="line">extent.call() <span class="comment">// 2</span></span><br><span class="line">extent.call() <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="用闭包实现命令模式"><a href="#用闭包实现命令模式" class="headerlink" title="用闭包实现命令模式"></a><a name="d6m8qw"></a>用闭包实现命令模式</h3><p>命令模式的意图是把请求封装为对象，从而分离请求的发起者和请求的接收者(执行者)之间的耦合关系。在命令被执行之前，可以预先往命令对象中植入命令的接收者。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button id=<span class="string">"execute"</span>&gt;点我执行命令&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="undo"&gt;点我执行命令&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">var Tv = &#123;</span></span><br><span class="line"><span class="string">open: function() &#123;</span></span><br><span class="line"><span class="string">console.log('打开电视机')</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">close: function() &#123;</span></span><br><span class="line"><span class="string">console.log('关上电视机')</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var OpenTvCommand = function(receiver) &#123;</span></span><br><span class="line"><span class="string">this.receiver = receiver</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">OpenTvCommand.prototype.execute = function() &#123;</span></span><br><span class="line"><span class="string">this.receiver.open() // 执行命令，打开电视机</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">OpenTvCommand.prototype.undo = function() &#123;</span></span><br><span class="line"><span class="string">this.receiver.close() // 执行命令，关闭电视机</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var setCommand = function(command) &#123;</span></span><br><span class="line"><span class="string">document.getElementById('execute').onclick = function() &#123;</span></span><br><span class="line"><span class="string">command.execute()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">document.getElementById('undo').onclick = function() &#123;</span></span><br><span class="line"><span class="string">command.undo()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">setCommand(new OpenTvCommand(Tv))</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> Tv = &#123;</span><br><span class="line">open: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'打开电视机'</span>)</span><br><span class="line">&#125;</span><br><span class="line">close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'关上电视机'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> receiver.open() <span class="comment">// 执行命令，打开电视机</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> undo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> receiver.close() <span class="comment">// 执行命令，关闭电视机</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">execute: execute,</span><br><span class="line">undo: undo</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'execute'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">command.execute()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'undo'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">command.undo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">setCommand(createCommand(Tv))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="闭包与内存管理"><a href="#闭包与内存管理" class="headerlink" title="闭包与内存管理"></a><a name="6v3wqm"></a>闭包与内存管理</h3><p>局部变量本来应该在函数退出的时候被解除引用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。如果在将来需要回收这些变量，可以手动把这些变量设为null</p><p>使用闭包的同时比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，就有可能造成内存泄露。在IE浏览器中，由于 BOM 和 DOM 中的对象是使用 C++ 以 COM 对象的方式实现的，而 COM 对象的垃圾收集机制采用的是引用计数策略。在基于引用计数策略的垃圾回收机制中，如果两个对象之间形成了循环引用，那么这两个对象都无法被回收。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a><a name="pmboba"></a>高阶函数</h2><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul><h3 id="作为参数被传递"><a href="#作为参数被传递" class="headerlink" title="作为参数被传递"></a><a name="cxr4rr"></a>作为参数被传递</h3><p>分离业务代码中变化和不变的部分</p><ol><li>回调函数</li></ol><ul><li>异步请求</li><li>当一个函数不适合执行一些请求时，可以把这些请求封装成一个函数，“委托”给另外一个函数来执行</li></ul><h3 id="作为返回值输出"><a href="#作为返回值输出" class="headerlink" title="作为返回值输出"></a><a name="5gqtge"></a>作为返回值输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ret || (ret = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getScript = getSingle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> script1 = getScript()</span><br><span class="line"><span class="keyword">var</span> script2 = getScript()</span><br><span class="line">alert(script1 === script2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数实现AOP"><a href="#高阶函数实现AOP" class="headerlink" title="高阶函数实现AOP"></a><a name="5unzvt"></a>高阶函数实现AOP</h3><p>AOP(面向切面编程)的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _self = <span class="keyword">this</span> <span class="comment">// 保存原函数的引用,this 值是func -&gt; &#123;console.log(2)&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 返回包含了原函数和新函数的“代理”函数</span></span><br><span class="line">beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) <span class="comment">// 执行新函数，修正this,this是window</span></span><br><span class="line"><span class="keyword">return</span> _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) <span class="comment">// 执行原函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterfn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _self = <span class="keyword">this</span> <span class="comment">// this 值是“代理”函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret = _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">func = func.before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure></p><h3 id="currying"><a href="#currying" class="headerlink" title="currying"></a><a name="5e91ag"></a>currying</h3><p>一个柯里化的函数首先会接受一些参数，接受了这些参数之后，该参数并不会立即求值，而是继续返回另一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cost = (</span><br><span class="line"><span class="keyword">var</span> args = []</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> money = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">money += args[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> money</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">[].push.apply(args, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)()</span><br><span class="line">cost(<span class="number">100</span>) <span class="comment">// 未真正求值</span></span><br><span class="line">cost(<span class="number">200</span>) <span class="comment">// 未真正求值</span></span><br><span class="line">cost(<span class="number">300</span>) <span class="comment">// 未真正求值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cost())</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = []</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">[].push.apply(args, <span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arguments'</span>, <span class="built_in">arguments</span>, <span class="built_in">arguments</span>.callee )</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">arguments</span>.callee</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> money = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">money += <span class="built_in">arguments</span>[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> money</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cost = currying(cost)</span><br><span class="line"></span><br><span class="line">cost(<span class="number">100</span>) <span class="comment">// 未真正求值</span></span><br><span class="line">cost(<span class="number">200</span>) <span class="comment">// 未真正求值</span></span><br><span class="line">cost(<span class="number">300</span>) <span class="comment">// 未真正求值</span></span><br><span class="line"></span><br><span class="line">alert(cost()) <span class="comment">// 求值并输出： 600</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> push = <span class="built_in">Array</span>.prototype.push.uncurrying()</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">push(<span class="built_in">arguments</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Function</span>.prototype.call.apply(self, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Arg = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn, arr = [<span class="string">'push'</span>, <span class="string">'shift'</span>, <span class="string">'forEach'</span>]; fn = arr[i++];) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(fn)</span><br><span class="line">Arg[fn] = <span class="built_in">Array</span>.prototype[fn].uncurrying()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">'length'</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">'0'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'1'</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">'2'</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">Arg.push(obj, <span class="number">4</span>) <span class="comment">// 向对象中添加一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.length) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a><a name="arxtqr"></a>函数节流</h3><p>有些情况下，函数的触发不是由用户直接控制的，这样当函数被非常频繁的调用时，会造成大的性能问题。</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a><a name="6411wc"></a>场景</h4><ul><li>window.onresize()：给window对象绑定了resize事件，当浏览器窗口大小被拖动而改变的时候，这个事件触发的频率非常之高。如果我们在window.onresize事件函数里有一些跟DOM节点相关的操作，而跟DOM节点相关的操作往往是非常消耗性能的，这时候浏览器可能就会吃不消而造成卡顿现象。</li><li>mousemove()：同样，给一个div节点绑定了拖拽事件(主要是mousemove),div节点被拖动的时候，也会频繁地触发该拖拽事件函数</li><li>上传进度：微云的上传功能使用了一个浏览器插件。该插件在真正开始上传文件之前，会对文件进行扫描并随时通知JS函数，以便在页面中显示当前的扫描进度。但该插件通知的频率非常之高，约10s一次</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><a name="3m0qxa"></a>原理</h4><p>当函数被触发的频率太高时，需要按时间段来忽略掉一些事件请求，借助setTimeout来完成</p><p>将即将被执行的函数用setTimeout延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求</p><p>一定要等当前执行的事件执行完了，才会让新的事件进来，否则全部作废</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _self = fn, <span class="comment">// 保存需要被延迟执行的函数引用</span></span><br><span class="line">timer, <span class="comment">// 定时器</span></span><br><span class="line">firstTime = <span class="literal">true</span>; <span class="comment">// 是否是第一次调用</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">arguments</span>,</span><br><span class="line">_me = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstTime) &#123; <span class="comment">// 如果是第一次调用，不需要延迟执行</span></span><br><span class="line">_self.apply(_me, args)</span><br><span class="line"><span class="keyword">return</span> firstTime = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (timer) &#123; <span class="comment">// 如果定时器还在，说明前一次延迟执行还没有完成</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 延迟一段时间执行</span></span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = <span class="literal">null</span></span><br><span class="line">_self.apply(_me, args)</span><br><span class="line">&#125;, interval || <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a><a name="mso8zg"></a>函数防抖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a><a name="yr7fna"></a>场景</h4><ul><li>搜索引擎搜索：希望用户在输入完最后一个字才调用查询接口，适用<code>延迟执行</code>的防抖函数，</li></ul><h3 id="分时函数"><a href="#分时函数" class="headerlink" title="分时函数"></a><a name="xhrtby"></a>分时函数</h3><p>在短时间内大量触发请求会严重影响页面性能，解决方案之一是让这些请求分批进行，比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建节点时需要用到的数据</span></span><br><span class="line"><span class="comment">// 封装了创建节点逻辑的函数</span></span><br><span class="line"><span class="comment">// 每一批创建的节点数量</span></span><br><span class="line"><span class="keyword">var</span> timeChunk = <span class="function"><span class="keyword">function</span>(<span class="params">ary, fn, count</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj, t</span><br><span class="line"><span class="keyword">var</span> len = ary.length</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(count || <span class="number">1</span>, ary.length); i++) &#123;</span><br><span class="line"><span class="keyword">var</span> obj = ary.shift()</span><br><span class="line">fn(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">t = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ary.length === <span class="number">0</span>) &#123; <span class="comment">// 如果全部节点都已经被创建好</span></span><br><span class="line"><span class="keyword">return</span> clearInterval(t)</span><br><span class="line">&#125;</span><br><span class="line">start()</span><br><span class="line">&#125;, <span class="number">200</span>) <span class="comment">// 分批执行的时间间隔，也可以用参数的形式传入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="ydm1yn"></a>资源</h2><p><a href="https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension" target="_blank" rel="noopener">7分钟理解JS的节流、防抖及使用场景</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;closure&quot;&gt;&lt;a href=&quot;#closure&quot; class=&quot;headerlink&quot; title=&quot;closure&quot;&gt;&lt;/a&gt;&lt;a name=&quot;2ywuce&quot;&gt;&lt;/a&gt;closure&lt;/h2&gt;&lt;p&gt;看是否对自由变量进行了捕获&lt;/p&gt;
&lt;h3 id=&quot;变量作
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>消息机制</title>
    <link href="http://lulustyle.net/2018/12/23/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://lulustyle.net/2018/12/23/消息机制/</id>
    <published>2018-12-23T00:52:20.000Z</published>
    <updated>2018-12-27T01:35:19.721Z</updated>
    
    <content type="html"><![CDATA[<p>消息机制是软件工程中一个普遍运用的工程思想。</p><ul><li style="list-style: none"><input type="checkbox"> “设计模式”中的观察者模式</li><li style="list-style: none"><input type="checkbox"> Windows 操作系统底层</li><li style="list-style: none"><input type="checkbox"> Spring 框架中的 ApplicationListener 模块</li><li style="list-style: none"><input type="checkbox"> Objective-C 语言中的函数调用<br>都是通过消息机制驱动的。</li></ul><p>使用消息机制最大的好处在于可以做到<strong>业务模块间安全解耦</strong>，模块间通过发送消息的方式进行协作。</p><h2 id="非消息机制案例"><a href="#非消息机制案例" class="headerlink" title="非消息机制案例"></a><a name="gh7nbe"></a>非消息机制案例</h2><p>我们先举一个后端开发中的例子，下图是一个简单的预定系统的建模图，并没有使用消息机制：</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545526439092-cffa7282-741c-4d10-9aef-caa7e8b9e826.png" alt="image.png | left | 692x413"></p><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">在没有消息机制的情况下，用户模块需要知道订单模块的存在，并向其进行接口调用，同理订单模块需要向支付模块进行接口调用。这种设计下模块间是</span></span><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><strong>耦合</strong></span></span><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">的。</span></span></p><h2 id="消息机制案例"><a href="#消息机制案例" class="headerlink" title="消息机制案例"></a><a name="ropvsn"></a>消息机制案例</h2><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545526529039-574cbd66-9ce4-4839-90d9-1f846e9be30e.png" alt="image.png | left | 692x483"></p><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">上图中，无论是客户下订单、支付还是预定都是通过消息的方式传递的，每个模块都是向一个消息处理器起发消息，同时也监听消息处理器发送回来的消息。在这种模式下，模块完全不知道其它模块的存在，彻底做到了解耦。</span></span></p><h2 id="消息机制在前端中的应用"><a href="#消息机制在前端中的应用" class="headerlink" title="消息机制在前端中的应用"></a><a name="qqcfyv"></a>消息机制在前端中的应用</h2><p>在前端业务开发中，我们经常也会用到 EventEmitter 库来进行消息传递。比如页面上有两块区域，一块用 React 框架渲染，一块用 D3 渲染的，当两块区域需要数据同步时，就可以使用消息机制进行通讯，保证页面数据整体一致。</p><p>如果你的业务中有不同生命周期的组件，建议采用消息机制进行管理，<strong>不仅消除了耦合，逻辑关系部分的代码也集中到了一个文件中，内聚性得到了提升</strong>。</p><p>使用消息机制的一个附属产物就是中间件，我们可以为消息定制各种中间件，在中间中完成一些通用逻辑，让业务代码更精炼。</p><p>说到前端框架中消息机制的运用，当然首推 Redux 框架，在 Redux 框架中，任何数据交互都需要先转化为一个 action，由 action 去触发 reducer 和相关的 middleware 处理 action，改变数据，最终同步到页面 UI 上，如下图所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545526709716-9e26728b-aadd-4222-b955-0b2e98fc33b9.png" alt="image.png | left | 692x439"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;消息机制是软件工程中一个普遍运用的工程思想。&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; “设计模式”中的观察者模式&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;inp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式及设计原则</title>
    <link href="http://lulustyle.net/2018/12/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://lulustyle.net/2018/12/23/设计模式及设计原则/</id>
    <published>2018-12-23T00:47:22.000Z</published>
    <updated>2018-12-25T09:24:59.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><a name="ah8geh"></a>面向对象</h1><ul><li><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a><a name="k9pbms"></a>三要素</h2><ul><li>继承：子类继承父类</li><li>封装：数据的权限和保密</li><li><p>多态：同一接口不同实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name, age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"><span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">eat() &#123;</span><br><span class="line">alert(`$&#123;<span class="keyword">this</span>.name&#125; eat something`)</span><br><span class="line">&#125;</span><br><span class="line">speak() &#123;</span><br><span class="line">alert(`$&#123;<span class="keyword">this</span>.name&#125;: age $&#123;<span class="keyword">this</span>.age&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name, age, number)&#123;</span><br><span class="line"><span class="keyword">super</span>(name, age)</span><br><span class="line"><span class="keyword">this</span>.number = number</span><br><span class="line">&#125;</span><br><span class="line">study() &#123;</span><br><span class="line">alert(`$&#123;<span class="keyword">this</span>.name&#125; study`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">let xiaoming = <span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>, <span class="number">10</span>, <span class="string">'A1'</span>)</span><br><span class="line">xiaoming.study()</span><br><span class="line">xiaoming.eat()</span><br><span class="line"></span><br><span class="line">let wangxin = <span class="keyword">new</span> Student(<span class="string">'wangxin'</span>, <span class="number">10</span>, <span class="string">'A2'</span>)</span><br><span class="line">wangxin.study()</span><br><span class="line">wangxin.speak()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a><a name="qwytbl"></a>继承</h3><pre><code>* People是父类，公共的，不仅仅服务于Student* 继承可将公共方法抽离出来，提高复用，减少冗余</code></pre><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a><a name="qe8oqi"></a>封装</h3><pre><code>(ES6尚不支持，TS支持)定义属性关键字：* public: 完全开放；前面如果不写关键字，那么默认是public* protected: 对子类开放* private: 对自己开放[TypeScript](http://www.typescriptlang.org/play/index.html)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line"><span class="keyword">protected</span> weight <span class="comment">// 对子类开放</span></span><br><span class="line">constructor(name, age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"><span class="keyword">this</span>.age = age</span><br><span class="line"><span class="keyword">this</span>.weight = <span class="number">120</span></span><br><span class="line">&#125;</span><br><span class="line">eat() &#123;</span><br><span class="line">alert(`$&#123;<span class="keyword">this</span>.name&#125; eat something`)</span><br><span class="line">&#125;</span><br><span class="line">speak() &#123;</span><br><span class="line">alert(`$&#123;<span class="keyword">this</span>.name&#125;: age $&#123;<span class="keyword">this</span>.age&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">number</span><br><span class="line"><span class="keyword">private</span> girlFriend</span><br><span class="line">constructor(name, age, number)&#123;</span><br><span class="line"><span class="keyword">super</span>(name, age)</span><br><span class="line"><span class="keyword">this</span>.number = number</span><br><span class="line"><span class="keyword">this</span>.girlfriend = <span class="string">'lu'</span></span><br><span class="line">&#125;</span><br><span class="line">study() &#123;</span><br><span class="line">alert(`$&#123;<span class="keyword">this</span>.name&#125; study`)</span><br><span class="line">&#125;</span><br><span class="line">getWeight() &#123;</span><br><span class="line">alert(`weight: $&#123;<span class="keyword">this</span>.weight&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">let xiaoming = <span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>, <span class="number">10</span>, <span class="string">'A1'</span>)</span><br><span class="line">xiaoming.study()</span><br><span class="line">xiaoming.eat()</span><br><span class="line">xiaoming.getWeight()</span><br><span class="line">xiaoming.girlFriend <span class="comment">// 编译时会报错，直接会编译不通过！！！</span></span><br><span class="line"></span><br><span class="line">let wangxin = <span class="keyword">new</span> Student(<span class="string">'wangxin'</span>, <span class="number">10</span>, <span class="string">'A2'</span>)</span><br><span class="line">wangxin.study()</span><br><span class="line">wangxin.speak()</span><br></pre></td></tr></table></figure>* 减少耦合，不该外露的不外露* 利于数据、接口的权限管理* ES6 不支持，一般认为以\_开头的属性是 private</code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a><a name="74htag"></a>多态</h3><pre><code>* 同一个接口，不同表现* JS应用极少* 需要结合java等语言的接口、重写、重载等功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name, age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"><span class="keyword">this</span>.age = age</span><br><span class="line"><span class="keyword">this</span>.weight = <span class="number">120</span></span><br><span class="line">&#125;</span><br><span class="line">saySomething() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name) &#123;</span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line">saySomething() &#123;</span><br><span class="line">alert(`I am A : $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name) &#123;</span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line">&#125;</span><br><span class="line">saySomething() &#123;</span><br><span class="line">alert(`I am B : $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let a = <span class="keyword">new</span> A(<span class="string">'a'</span>)</span><br><span class="line">a.saySomething()</span><br><span class="line">let b = <span class="keyword">new</span> B(<span class="string">'b'</span>)</span><br><span class="line">b.saySomething()</span><br></pre></td></tr></table></figure>* 保持子类的开放性和灵活性* 面向接口编程* JS引用极少，了解即可</code></pre><h2 id="jQuery-应用举例"><a href="#jQuery-应用举例" class="headerlink" title="jQuery 应用举例"></a><a name="8lmtzb"></a>jQuery 应用举例</h2><pre><code>* jQuery是一个class* \$(&apos;p&apos;)是jQuery的一个实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">constructor(selector) &#123;</span><br><span class="line">let slice = Array.prototype.slice</span><br><span class="line">let dom = slice.call(document.querySelectorAll(selector))</span><br><span class="line">let len = len ? dom.length : <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.length = len</span><br><span class="line"><span class="keyword">this</span>.selector = selector || <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">append(node) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addClass(name) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html(data) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.$ = function(selector) &#123;</span><br><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">var</span> $p = $(<span class="string">'p'</span>)</span><br><span class="line">console.log($p)</span><br><span class="line">console.log($p.addClass)</span><br></pre></td></tr></table></figure></code></pre><h2 id="为何使用面向对象？"><a href="#为何使用面向对象？" class="headerlink" title="为何使用面向对象？"></a><a name="ozrwhm"></a>为何使用面向对象？</h2><pre><code>* 程序执行：顺序、判断、循环 ———— 结构化* 面向对象 ———— 数据结构化* 对于计算机，结构化的才是最简单的* 编程：简单 &amp; 抽象</code></pre><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a><a name="7efstm"></a>UML 类图</h2><pre><code>* Unified Modeling Language : 统一建模语言* UML包含很多种图，本章相关的是类图* 关系    * 泛化：继承;空箭头    * 关联：引用: People 引用 House；实心箭头* 演示，代码和类图的结合* MS Office Visio* [ProcessOn](https://www.processon.com/)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name, house) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"><span class="keyword">this</span>.house = house</span><br><span class="line">&#125;</span><br><span class="line">saySomething() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name, house) &#123;</span><br><span class="line"><span class="keyword">super</span>(name, house)</span><br><span class="line">&#125;</span><br><span class="line">saySomething() &#123;</span><br><span class="line">alert(`I am A : $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">constructor(name, house) &#123;</span><br><span class="line"><span class="keyword">super</span>(name, house)</span><br><span class="line">&#125;</span><br><span class="line">saySomething() &#123;</span><br><span class="line">alert(`I am B : $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">constructor(city) &#123;</span><br><span class="line"><span class="keyword">this</span>.city = city</span><br><span class="line">&#125;</span><br><span class="line">showCity() &#123;</span><br><span class="line">alert(`house in : $&#123;<span class="keyword">this</span>.name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let ahouse = <span class="keyword">new</span> House(<span class="string">'beijing'</span>)</span><br><span class="line">let a = <span class="keyword">new</span> A(<span class="string">'a'</span>, ahouse)</span><br><span class="line">a.saySomething()</span><br><span class="line">let b = <span class="keyword">new</span> B(<span class="string">'b'</span>)</span><br><span class="line">b.saySomething()</span><br></pre></td></tr></table></figure>类图* 类名* 所有的属性：public 属性名A：类型* 所有的方法：public 方法名A(参数1，参数2)：返回值类型* &apos;+&apos;: public* &apos;#&apos;: protected* &apos;-&apos;: private</code></pre><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a><a name="pv6ggv"></a>设计原则</h1><ul><li><h2 id="何为设计？"><a href="#何为设计？" class="headerlink" title="何为设计？"></a><a name="bw0ccf"></a>何为设计？</h2><ul><li>即按照哪一种思路或者标准来实现功能</li><li>功能相同，可以有不同设计方案来实现</li><li><p>伴随着需求增加，设计的作用才能体现出来</p><p>《LINUX/UNIX设计哲学》</p></li></ul><ol><li>小即是美</li><li>让每个程序只做好一件事</li><li>快速建立原型</li><li>舍弃高效率而取可移植性(效率会因为硬件的升级而被抹平)</li><li>采用纯文本来存储数据</li><li>充分利用软件的杠杆效应(软件复用)</li><li>使用shell脚本来提高杠杆效应和可移植性</li><li>避免强制性的用户界面</li><li><p>让每个程序都成为过滤器</p><p>小准则：</p></li><li>允许用户定制环境</li><li>尽量使操作系统内核小而轻量化</li><li>使用小写字母并尽量简写</li><li>沉默是金</li><li>各部分之和大于整体</li><li><p>寻求90%的解决方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | grep *.json | grep <span class="string">'package'</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="5大设计原则"><a href="#5大设计原则" class="headerlink" title="5大设计原则"></a><a name="xtx1kt"></a>5大设计原则</h2><pre><code>* Single: 单一职责原则    * 一个程序只做好一件事    * 如果功能过于复杂* Open: 开放封闭原则    * 对扩展开放，对修改封闭    * 增加需求时，拓展新代码，而非修改已有代码    * 这是软件设计的终极目标* L: 李氏置换原则    * 子类能覆盖父类    * 父类能出现的地方子类就能出现    * JS中使用较少(弱类型 &amp; 继承使用较少)* Interface: 接口独立原则    * 保持接口的单一独立，避免出现“胖接口”    * JS中没有接口(TS例外)，使用较少    * 类似于单一职责原则，这里更关注接口* Dependence: 依赖倒置原则    * 面向接口编程，依赖于抽象而不依赖于具体    * 使用方只关注接口而不关注具体类的实现    * JS中使用较少(没有接口 &amp; 弱类型)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">loadImg</span><span class="params">(src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">let img = document.createElement(<span class="string">'img'</span>)</span><br><span class="line">img.onload = () =&gt; &#123;</span><br><span class="line">resolve(img)</span><br><span class="line">&#125;</span><br><span class="line">img.onerror = () =&gt; &#123;</span><br><span class="line">reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">&#125;</span><br><span class="line">img.src = src</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let src = <span class="string">'./img.png'</span></span><br><span class="line">let result = loadImg(src)</span><br><span class="line"></span><br><span class="line">result.then((img) =&gt; &#123;</span><br><span class="line">alert(`width: $&#123;img.width&#125;`)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;).then((img) =&gt; &#123;</span><br><span class="line">alert(`height: $&#123;img.height&#125;`)</span><br><span class="line">&#125;).<span class="keyword">catch</span>((err) =&gt; &#123;</span><br><span class="line">console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="从设计到模式"><a href="#从设计到模式" class="headerlink" title="从设计到模式"></a><a name="i504rb"></a>从设计到模式</h2><pre><code>* 设计：指导思想* 模式：结合日常开发总结出固定的模板23种设计模式* 创建型* 组合型* 行为型</code></pre><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a><a name="bptspo"></a>面试题</h2><pre><code>&gt; 打车时，可以打专车或者快车；&gt; 任何车都有车牌号和名称；&gt; 不同车价格不同，快车1元/km，专车2元/km；&gt; 行程开始时，显示车辆信息；&gt; 行程结束时，显示打车金额(假定行程就5km)。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(number, name) &#123;</span><br><span class="line"><span class="keyword">this</span>.number = number</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KuaiChe</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(number, name) &#123;</span><br><span class="line"><span class="keyword">super</span>(number, name)</span><br><span class="line"><span class="keyword">this</span>.price = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhuanChe</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(number, name) &#123;</span><br><span class="line"><span class="keyword">super</span>(number, name)</span><br><span class="line"><span class="keyword">this</span>.price = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(car) &#123;</span><br><span class="line"><span class="keyword">this</span>.car = car</span><br><span class="line">&#125;</span><br><span class="line">start() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`行程开始 名称：<span class="subst">$&#123;<span class="keyword">this</span>.car.name&#125;</span> 车牌号：<span class="subst">$&#123;<span class="keyword">this</span>.car.number&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">end() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`行程结束 价格：<span class="subst">$&#123;<span class="keyword">this</span>.car.price&#125;</span> * 5`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> KuaiChe(<span class="number">100</span>, <span class="string">'桑塔纳'</span>)</span><br><span class="line"><span class="keyword">let</span> trip = <span class="keyword">new</span> Trip(car)</span><br><span class="line">trip.start()</span><br><span class="line">trip.end()</span><br></pre></td></tr></table></figure>&gt; 某停车场，分3层，每层100车位；&gt; 每个车位都能监控到车辆的驶入和离开；&gt; 车辆进入前，显示每层的空余车位数量；&gt; 车辆进入时，摄像头可识别车牌号和时间；&gt; 车辆出来时，出口显示器显示车牌号和停车时长。&gt; </code></pre><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a><a name="p9dtce"></a>设计模式</h1><ul><li>优先级：创建型 | 结构型 | 行为型</li><li>结合核心技术</li><li>结合框架应用</li></ul><h1 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a><a name="v4rceg"></a>综合示例</h1><ul><li>设计方案</li><li>代码演示</li><li>设计模式对应（7种）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;&lt;a name=&quot;ah8geh&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;三要素&quot;&gt;&lt;a href=&quot;#三要素&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>穿搭篇</title>
    <link href="http://lulustyle.net/2018/12/22/%E7%A9%BF%E6%90%AD%E7%AF%87/"/>
    <id>http://lulustyle.net/2018/12/22/穿搭篇/</id>
    <published>2018-12-22T10:10:59.000Z</published>
    <updated>2018-12-25T09:24:59.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="血管颜色"><a href="#血管颜色" class="headerlink" title="血管颜色"></a><a name="2yxadb"></a>血管颜色</h2><p>手腕内侧血管颜色偏蓝紫：冷色调</p><p>冷色调：带红感的肤色</p><h2 id="穿金戴银"><a href="#穿金戴银" class="headerlink" title="穿金戴银"></a><a name="c5e2gr"></a>穿金戴银</h2><p>冷色调：银色</p><h2 id="白色上身"><a href="#白色上身" class="headerlink" title="白色上身"></a><a name="smi7ve"></a>白色上身</h2><p>冷色调：纯白色比乳白色更好</p><h2 id="衣服颜色搭配"><a href="#衣服颜色搭配" class="headerlink" title="衣服颜色搭配"></a><a name="k0m2yd"></a>衣服颜色搭配</h2><p>属于冷基调的人适合：<br>以蓝色为基调的颜色，红色是偏紫的红，如玫红色；<br>不适合橙，黄。适合<strong>偏蓝的黄</strong>如柠檬黄；绿<strong>偏蓝的绿</strong>。<br>蓝色和紫色非常适合冷皮的妹子。<br>（灰色非常适合皮肤白皙的妹子穿！）</p><h2 id="色彩分配原则"><a href="#色彩分配原则" class="headerlink" title="色彩分配原则"></a><a name="fgsudx"></a>色彩分配原则</h2><ol><li>整体性：全身整体围绕一个主色调展开，用同色系不同明度饱和度的颜色搭出层次感</li><li>配饰类：饰品，鞋等颜色上相互呼应</li><li>细节：靠近面部位置的配饰如围巾耳环帽子，避免冷色。</li></ol><p>上冷 + 下暖</p><h2 id="口红"><a href="#口红" class="headerlink" title="口红"></a><a name="9tgbso"></a>口红</h2><p>偏紫红色口红比橘色口红更适合</p><h2 id="冷色调"><a href="#冷色调" class="headerlink" title="冷色调"></a><a name="vmixue"></a>冷色调</h2><p>冷色调包括大热的冰淇淋色、婴儿蓝、樱花粉，偏紫的红等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;血管颜色&quot;&gt;&lt;a href=&quot;#血管颜色&quot; class=&quot;headerlink&quot; title=&quot;血管颜色&quot;&gt;&lt;/a&gt;&lt;a name=&quot;2yxadb&quot;&gt;&lt;/a&gt;血管颜色&lt;/h2&gt;&lt;p&gt;手腕内侧血管颜色偏蓝紫：冷色调&lt;/p&gt;
&lt;p&gt;冷色调：带红感的肤色&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码观</title>
    <link href="http://lulustyle.net/2018/12/22/%E4%BB%A3%E7%A0%81%E8%A7%82/"/>
    <id>http://lulustyle.net/2018/12/22/代码观/</id>
    <published>2018-12-22T09:58:39.000Z</published>
    <updated>2018-12-25T09:24:59.101Z</updated>
    
    <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox"> <strong>代码要清晰地表达意图</strong><br>  代码是给人读的，不要耍小聪明。</li><li style="list-style: none"><input type="checkbox"> <strong>用代码沟通</strong><br>  注释的艺术。</li><li style="list-style: none"><input type="checkbox"> <strong>动态地进行取舍</strong><br>  记住，没有最佳解决方案。各种目标不可能面面俱到，关注对用户重要的需求。</li><li style="list-style: none"><input type="checkbox"> <strong>增量式编程</strong><br>  写一点代码就构建、测试、重构、休息。让代码干净利落。</li><li style="list-style: none"><input type="checkbox"> <strong>尽量简单</strong><br>  宁简勿繁。如果没有充足的理由，就不要使用什么模式、原则和特别的技术。</li><li style="list-style: none"><input type="checkbox"> <strong>编写内聚的代码</strong><br>  类和组件应该足够小，任务单一。</li><li style="list-style: none"><input type="checkbox"> <strong>告知，不要询问</strong><br>  多用消息传递，少用函数调用。</li><li style="list-style: none"><input type="checkbox"> <strong>根据契约进行替换</strong><br>  委托往往优于继承</li><li style="list-style: none"><input type="checkbox"> <strong>记录问题解决日志</strong><br>  不要在同一地方摔倒两次。错误是最宝贵的财富。</li><li style="list-style: none"><input type="checkbox"> <strong>警告就是错误</strong><br>  忽视编译器的警告可能铸成大错。</li><li style="list-style: none"><input type="checkbox"> <strong>对问题各个击破</strong><br>  分而治之是计算机科学中最重要的思想之一。但是，要从设计和原型阶段就考虑各部分应该能够很好地分离。</li><li style="list-style: none"><input type="checkbox"> <strong>报告所有的异常</strong></li><li style="list-style: none"><input type="checkbox"> <strong>提供有用的错误信息</strong><br>  稍微多花一点心思，出错的时候，将给你带来极大便利</li><li style="list-style: none"><input type="checkbox"> <strong>准备好后再共享代码</strong><br>  不要提交无法编译或者没有通过单元测试的代码！</li><li style="list-style: none"><input type="checkbox"> <strong>做代码复查</strong><br>  复查对提高代码质量、减少错误极为重要。</li><li style="list-style: none"><input type="checkbox"> <strong>及时通报进展与问题</strong><br>  主动通报，不要让别人来问你</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;checkbox&quot;&gt; &lt;strong&gt;代码要清晰地表达意图&lt;/strong&gt;&lt;br&gt;  代码是给人读的，不要耍小聪明。&lt;/li&gt;
&lt;li style=&quot;list-style: none&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Awesome Frontend</title>
    <link href="http://lulustyle.net/2018/12/22/Awesome%20Frontend/"/>
    <id>http://lulustyle.net/2018/12/22/Awesome Frontend/</id>
    <published>2018-12-22T09:21:05.000Z</published>
    <updated>2018-12-27T01:35:19.728Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/kobg2k/ipgh9u" target="_blank" rel="noopener">https://www.yuque.com/kobg2k/ipgh9u</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.yuque.com/kobg2k/ipgh9u&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yuque.com/kobg2k/ipgh9u&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自动化部署</title>
    <link href="http://lulustyle.net/2018/12/22/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://lulustyle.net/2018/12/22/自动化部署/</id>
    <published>2018-12-22T09:20:04.000Z</published>
    <updated>2018-12-25T09:24:59.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动化部署三剑客"><a href="#自动化部署三剑客" class="headerlink" title="自动化部署三剑客"></a><a name="9rc7gb"></a>自动化部署三剑客</h2><p>Jenkins + Ansible + Gitlab</p><h2 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a><a name="ib64ds"></a>持续交付</h2><p>现场交付 =&gt; shell命令行 =&gt; 持续交付</p><ul><li>版本控制系统：GitLab + GitHub</li><li>持续集成工具：Jenkins</li><li>部署工具(远程服务器端交付推送): Ansible + Saltstack + Chef</li></ul><h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a><a name="xgbkbk"></a>GitLab</h2><h3 id="GitLab-与-GitHub-的不同"><a href="#GitLab-与-GitHub-的不同" class="headerlink" title="GitLab 与 GitHub 的不同"></a><a name="pp95ne"></a>GitLab 与 GitHub 的不同</h3><ul><li>GitHub：分布式在线代码托管仓库<ul><li>个人版本可在线免费使用</li><li>企业版本收费且需要服务器安装</li></ul></li><li>GitLab：分布式在线代码仓库托管软件<ul><li>社区免费版本需要服务器安装</li><li>企业收费版本需要服务器安装</li></ul></li></ul><blockquote><p>GitLab的优势和应用场景</p></blockquote><ul><li>开源免费，适合中小型公司将代码放置在该系统中</li><li>差异化的版本管理，离线同步以及强大分支管理功能</li><li>便捷的GUI操作界面以及强大账户权限管理功能</li><li>集成度很高，能够集成绝大多数的开发工具</li><li>支持内置HA，保证在高并发下仍旧实现高可用性</li></ul><h3 id="GitLab主要服务构成"><a href="#GitLab主要服务构成" class="headerlink" title="GitLab主要服务构成"></a><a name="10e8px"></a>GitLab主要服务构成</h3><ul><li>Nginx静态Web服务器</li><li>GitLab-workhorse轻量级的反向代理服务器</li><li>Gitlab-shell用于处理Git命令和修改authorized keys列表</li><li>Logrotate日志文件管理工具</li><li>Postgresql数据库</li><li>Redis缓存服务器</li></ul><h3 id="Gitlab安装配置管理"><a href="#Gitlab安装配置管理" class="headerlink" title="Gitlab安装配置管理"></a><a name="2hfkdy"></a>Gitlab安装配置管理</h3><ul><li>利用VirtualBox创建测试服务器</li><li>安装Gitlab前系统预配置准备工作<ul><li>关闭firewalld防火墙：保证本地PC可以访问虚拟机中的所有资源<ul><li><code># systemctl stop firewalld</code> : 关闭当前正在运行的防火墙服务</li><li><code># systemctl disable firewalld</code> : 禁用防火墙开机启动</li></ul></li></ul></li><li>关闭SELINUX（强制访问控制安全策略）并重启系统：保证该策略不会影响Gitlab的正常运行<ul><li><code># vi /etc/sysconfig/selinux</code>: 修改SELINUX=disabled</li><li><code># reboot</code>: 重启系统，完成SELINUX的禁用操作</li><li><code>getenforce</code>: 查看SELINUX是否已经被禁用</li></ul></li><li>安装Omnibus Gitlab-ce package<ul><li><code># yum -y install curl policycoreutils openssh-server openssh-clients postfix</code>: 安装Gitlab组件</li><li><code># curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</code>: 配置YUM仓库</li><li><code>sudo yum install postfix     sudo systemctl enable postfix     sudo systemctl start postfix</code>: 启动postfix邮件服务</li><li>安装Gitlab-ce社区版本：<code># yum install -y gitlab-ce</code></li></ul></li><li>Omnibus Gitlab 等相关配置初始化并完成安装<ul><li>证书创建与配置加载<ul><li>创建本地私有密钥<ul><li><code>mkdir -p /etc/gitlab/ssl</code></li><li><code>openssl genrsa -out &quot;/etc/gitlab/ssl/gitlab.example.com.key&quot; 2048</code></li><li><code>openssl req -new -key &quot;/etc/gitlab/ssl/gitlab.example.com.key&quot; -out &quot;/etc/gitlab/ssl/gitlab.example.com.csr&quot;</code></li><li><code>openssl x509 -req -days 365 -in &quot;/etc/gitlab/ssl/gitlab.example.com.csr&quot; -signkey &quot;/etc/gitlab/ssl/gitlab.example.com.key&quot; -out &quot;/etc/gitlab/ssl/gitlab.example.com.crt&quot;</code></li><li><code>openssl dhparam -out /etc/gitlab/ssl/dhparams.pem 2048</code></li><li>更改证书权限：<code>chmod 600 *</code></li></ul></li></ul></li><li>Nginx SSL 代理服务配置<ul><li><code>vi /etc/gitlab/gitlab.rb</code></li><li>修改 <code>external_url &#39;https://gitlab.example.com&#39;</code></li><li>修改 <code>nginx[&#39;/redirect_http_to_https&#39;] = true</code></li><li>修改    <code>nginx[&#39;ssl_certificate&#39;] = &#39;/etc/gitlab/ssl/gitlab.example.com.crt&#39;</code></li><li>修改    <code>nginx[&#39;ssl_certificate_key&#39;] = &#39;/etc/gitlab/ssl/gitlab.example.com.key&#39;</code></li><li>修改 <code>nginx[&#39;ssl_dhparam&#39;] = &#39;/etc/gitlab/ssl/dhparams.pem&#39;</code></li><li><code>vi /var/opt/gitlab/nginx/conf/gitlab-http.conf</code></li><li>找到 <code>server_name gitlab.example.com</code>,并在下面添加<code>rewrite ^(.*)$ https://$host$1 permanent</code></li><li><code>gitlab-ctl restart</code></li><li>编辑windows下的host文件，手动添加一条DNS记录<code>10.110.16.20 gitlab.example.com</code></li></ul></li><li>初始化Gitlab相关服务并完成安装<ul><li><code># gitlab-ctl reconfigure</code></li></ul></li></ul></li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="u20alt"></a>资源</h2><p><a href="https://about.gitlab.com/installation/#centos-7" target="_blank" rel="noopener">Installation methods for GitLab</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自动化部署三剑客&quot;&gt;&lt;a href=&quot;#自动化部署三剑客&quot; class=&quot;headerlink&quot; title=&quot;自动化部署三剑客&quot;&gt;&lt;/a&gt;&lt;a name=&quot;9rc7gb&quot;&gt;&lt;/a&gt;自动化部署三剑客&lt;/h2&gt;&lt;p&gt;Jenkins + Ansible + Gitla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Router 4.0</title>
    <link href="http://lulustyle.net/2018/12/22/React%20Router%204.0/"/>
    <id>http://lulustyle.net/2018/12/22/React Router 4.0/</id>
    <published>2018-12-22T09:16:12.000Z</published>
    <updated>2018-12-25T09:24:59.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由使用场景"><a href="#路由使用场景" class="headerlink" title="路由使用场景"></a><a name="u7uoba"></a>路由使用场景</h2><ul><li>如果是功能复杂的网站，建议后端路由，不建议大型网站用前端路由，太重（通常来说就是整个网站，也可以是功能单一的大型网站，比如携程这样的）</li><li>功能单一的网站，比如webapp那种，建议前端路由（通常说的单页应用SPA）</li><li>页面有很多组件复用的情况，建议前端路由（如果页面功能复杂，参考第一条）</li><li>无所谓前端还是后端路由的网站，比如后台管理系统，那就前端路由吧，毕竟无论是Vue还是React,都有好几个搭配的UI库，前端路由会比较顺心</li><li>功能太简单的网站，简单到就几个静态页面，前端路由、后端路由均可，甚至不需要路由</li><li>前端路由不能做SEO</li><li>事情没有绝对性，任何前端路由的网站肯定能用后端路由实现，反之亦然</li><li>可以把项目按不同的需求拆分开，有些部分后台路由，部分前端路由也可。</li></ul><h2 id="Router原理"><a href="#Router原理" class="headerlink" title="Router原理"></a><a name="afvofa"></a>Router原理</h2><ul><li>历史：入栈 | 出栈，记录跳转关系还能原路跳转回去的机制</li><li>跳转：可以传递参数，负责不同页面的跳转动作</li><li>事件：打开一个新页面或者退回到上一个页面时触发的逻辑</li></ul><h2 id="原生路由方法"><a href="#原生路由方法" class="headerlink" title="原生路由方法"></a><a name="q20msw"></a>原生路由方法</h2><ul><li>window.location</li><li>window.location.pathname</li><li>window.location.search</li></ul><h3 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a><a name="alm1is"></a>页面路由</h3><p>window.location.href = ‘/test’ // 页面路由<br>history.back() // 出栈</p><h3 id="hash路由"><a href="#hash路由" class="headerlink" title="hash路由"></a><a name="ksfyrk"></a>hash路由</h3><p>window.location.hash = ‘#test’<br>// hash值变化时执行的回调函数<br>window.onhashchange = () =&gt; (<br>console.log(‘current router’, window.location.hash)<br>)</p><h3 id="H5路由"><a href="#H5路由" class="headerlink" title="H5路由"></a><a name="lxdgbc"></a>H5路由</h3><p>history.pushState(name, title, toPath) // 入栈<br>history.replaceState(name, title, toPath) // 不会更改历史记录，替换当前状态值<br>// 出栈时执行的回调函数<br>window.onpopstate = (e) =&gt; (<br>console.log(‘h5 router change’, e.state)<br>)</p><h2 id="常见Router"><a href="#常见Router" class="headerlink" title="常见Router"></a><a name="pbxloq"></a>常见Router</h2><ul><li>页面Router: 页面刷新</li><li>Hash Router: 页面不刷新，但是会改变url</li><li>H5 Router: 既能操作Hash又能操作路径，兼容性差。和hash类似。页面不刷新，但是会改变url</li></ul><h2 id="相互独立的包"><a href="#相互独立的包" class="headerlink" title="相互独立的包"></a><a name="wc4vlr"></a>相互独立的包</h2><p><code>yarn add react-router-dom@v4.2.2</code></p><ul><li><code>react-router</code> React Router 核心</li><li><code>react-router-dom</code> 用于 DOM 绑定的 React Router</li><li><code>react-router-native</code> 用于 React Native 的 React Router</li><li><code>react-router-redux</code> React Router 和 Redux 的集成</li><li><code>react-router-config</code> 静态路由配置的小助手</li></ul><h2 id="lt-BrowserRouter-gt"><a href="#lt-BrowserRouter-gt" class="headerlink" title="&lt;BrowserRouter&gt;"></a><a name="h33iwt"></a><code>&lt;BrowserRouter&gt;</code></h2><p>用H5的方式来实现的</p><ul><li><p>basename: string</p><ul><li>作用：为所有位置添加一个基准UR</li><li>场景：需要把页面部署到服务器的二级目录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter basename=<span class="string">"/minooo"</span> /&gt;</span><br><span class="line">&lt;Link to=<span class="string">"/react"</span> /&gt; <span class="comment">// 最终渲染为 &lt;a href="/minooo/react"&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>getUserConfirmation: func</p><ul><li>作用：导航到此页面前执行的函数，默认使用 window.confirm</li><li>场景：当需要用户进入页面前执行什么操作时可用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getConfirmation = <span class="function">(<span class="params">message, callback</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> allowTransition = <span class="built_in">window</span>.confirm(message)</span><br><span class="line">callback(allowTransition)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;BrowserRouter getUserConfirmation=&#123;getConfirmation(<span class="string">'Are you sure?'</span>, yourCallBack)&#125; /&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>forceRefresh: bool</p><ul><li>作用：当浏览器不支持 HTML5 的 history API 时强制刷新页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supportsHistory = <span class="string">'pushState'</span> <span class="keyword">in</span> <span class="built_in">window</span>.history</span><br><span class="line">&lt;BrowserRouter forceRefresh=&#123;!supportsHistory&#125; /&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>keyLength: number</p><ul><li>作用：设置它里面路由的 location.key 的长度。默认是6。（key的作用：点击同一个链接时，每次该路由下的 location.key都会改变，可以通过 key 的变化来刷新页面。）</li><li>场景：按需设置<br>  <code>&lt;BrowserRouter keyLength={12} /&gt;</code></li></ul></li><li>children: node<ul><li>作用：渲染唯一子元素</li><li>场景：作为一个 React组件，天生自带 children 属性</li></ul></li></ul><h2 id="lt-Route-gt"><a href="#lt-Route-gt" class="headerlink" title="&lt;Route&gt;"></a><a name="1mxaqo"></a><code>&lt;Route&gt;</code></h2><p>路由规则<br> 自带三个 render method 和三个 props(match | location | history) 。</p><h3 id="render-method"><a href="#render-method" class="headerlink" title="render method"></a><a name="5gtadq"></a>render method</h3><p>每种 render method 都有不同的应用场景，同一个 应该只使用一种 render method ，大部分情况下你将使用 component</p><ul><li><p><code>&lt;Route component&gt;</code></p><ul><li>只有当访问地址和路由匹配时，一个 React component 才会被渲染，此时此组件接受 route props (match, location, history)。</li><li><p>当使用 component 时，router 将使用 React.createElement 根据给定的 component 创建一个新的 React 元素。这意味着如果你使用内联函数（inline function）传值给 component将会产生不必要的重复装载。对于内联渲染（inline rendering）, 建议使用 render prop。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/user/:username"</span> component=&#123;User&#125; /&gt;</span><br><span class="line"><span class="keyword">const</span> User = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &lt;h1&gt;Hello &#123;match.params.username&#125;!&lt;/h1&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>&lt;Route render&gt;</code></p><ul><li>此方法适用于内联渲染，而且不会产生上文说的重复装载问题。</li><li>也可用于子路由</li><li><p>render方法会传入route的信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内联渲染</span></span><br><span class="line">&lt;Route path=<span class="string">"/home"</span> render=&#123;() =&gt; &lt;h1&gt;Home&lt;/h1&#125; /&gt;</span><br><span class="line"></span><br><span class="line">// 包装 组合</span><br><span class="line">const FadingRoute = (&#123; component: Component, ...rest &#125;) =&gt; (</span><br><span class="line">&lt;Route &#123;...rest&#125; render=&#123;props =&gt; (</span><br><span class="line">    &lt;FadeIn&gt;</span><br><span class="line">    &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">    &lt;/FadeIn&gt;</span><br><span class="line">)&#125; /&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;FadingRoute path="/cool" component=&#123;Something&#125; /&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>&lt;Route children&gt;</code></p></li></ul><p>子路由：有时候只想知道访问地址是否匹配，然后改变下别的东西，而不是对应的整个页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;ListIemLink to=<span class="string">'somewhere'</span> /&gt;</span><br><span class="line">    &lt;ListIemLink to=<span class="string">'somewhere-ele'</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">const ListIemLink = (&#123;to, ...rest&#125;) =&gt; (</span></span><br><span class="line"><span class="regexp">    &lt;Route path=&#123;to&#125; children=&#123;(&#123;match&#125; =&gt; (</span></span><br><span class="line"><span class="regexp">        &lt;li className=&#123;match ? 'active' : ' '&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Link to=&#123;to&#125; &#123;...rest&#125; /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    ))&#125;&gt;&lt;/</span>Route&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="path-string"><a href="#path-string" class="headerlink" title="path: string"></a><a name="ozgpvh"></a>path: string</h3><ul><li>任何可以被解析的有效URL路径</li><li>如果不给path，那么路由将总是匹配</li></ul><h3 id="exact-bool"><a href="#exact-bool" class="headerlink" title="exact: bool"></a><a name="bfigxd"></a>exact: bool</h3><ul><li>精确匹配</li><li>path 为 ‘/one’ 的路由将不能匹配 ‘/one/two’，反之，亦然。所以在配子路由时千万注意不要配这个参数</li></ul><h3 id="strict-bool"><a href="#strict-bool" class="headerlink" title="strict: bool"></a><a name="yt3gcv"></a>strict: bool</h3><ul><li>对路径末尾斜杠的匹配。如果为 true。path 为 ‘/one/‘ 将不能匹配 ‘/one’ 但可以匹配 ‘/one/two’。</li><li>如果要确保路由没有末尾斜杠，那么 strict 和 exact 都必须同时为 true</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><a name="fxx5es"></a></h2><p>为应用提供声明式，无障碍导航</p><ul><li>to: string<ul><li>作用：跳转到指定路径</li><li>场景：如果只是单纯的跳转就直接用字符串形式的路径。</li></ul></li><li>to: object<ul><li>作用：携带参数跳转到指定路径</li><li>场景：比如你点击的这个链接将要跳转的页面需要展示此链接对应的内容，又比如这是个支付跳转，需要把商品的价格等信息传递过去。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123;</span><br><span class="line">  pathname: &apos;/course&apos;,</span><br><span class="line">  search: &apos;?sort=name&apos;,</span><br><span class="line">  state: &#123; price: 18 &#125;</span><br><span class="line">&#125;&#125; /&gt;</span><br><span class="line">&lt;Link to=&quot;/courses&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>replace: bool<ul><li>为 true 时，点击链接后将使用新地址替换掉上一次访问的地址，什么意思呢，比如：你依次访问 ‘/one’ ‘/two’ ‘/three’ ’/four’ 这四个地址，如果回退，将依次回退至 ‘/three’ ‘/two’ ‘/one’ ，这符合我们的预期，假如我们把链接 ‘/three’ 中的 replace 设为 true 时。依次点击 one two three four 然后再回退会发生什么呢？会依次退至 ‘/three’ ‘/one’！</li><li>场景：在用 路由 做选项卡时候会用到</li></ul></li></ul><h2 id="lt-NavLink-gt"><a href="#lt-NavLink-gt" class="headerlink" title="&lt;NavLink&gt;"></a><a name="cvgegr"></a><code>&lt;NavLink&gt;</code></h2><p>为了实现页面导航的“激活状态”，是<code>&lt;Link&gt;</code>的特别版本</p><ul><li>activeClassName: string<ul><li>导航选中激活时候应用的样式名，默认样式名为 active</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/about"</span></span><br><span class="line">  activeClassName=<span class="string">"selected"</span></span><br><span class="line">&gt;MyBlog&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><ul><li>activeStyle: object<ul><li>如果不想使用样式名就直接写style</li></ul></li><li>exact: bool<ul><li>若为 true，只有当访问地址严格匹配时激活样式才会应用</li></ul></li><li>strict: bool<ul><li>若为 true，只有当访问地址后缀斜杠严格匹配（有或无）时激活样式才会应用</li></ul></li><li>isActive: func<ul><li>决定导航是否激活，或者在导航激活时候做点别的事情。不管怎样，它不能决定对应页面是否可以渲染。</li></ul></li></ul><h2 id="lt-Switch-gt"><a href="#lt-Switch-gt" class="headerlink" title="&lt;Switch&gt;"></a><a name="e91vnz"></a><code>&lt;Switch&gt;</code></h2><p>路由选项，解决路由多次匹配的问题<br>只渲染出第一个与当前访问地址匹配的 <code>&lt;Route&gt;</code> 或 <code>&lt;Redirect&gt;</code><br>场景：对于转场动画非常适用，因为被渲染的路由和前一个被渲染的路由处于同一个节点位置！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Fade&gt;</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">    &#123;<span class="comment">/* 用了Switch 这里每次只匹配一个路由，所有只有一个节点。 */</span>&#125;</span><br><span class="line">    &lt;Route/&gt;</span><br><span class="line">    &lt;Route/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Fade&gt;</span><br><span class="line"></span><br><span class="line">&lt;Fade&gt;</span><br><span class="line">  &lt;Route/&gt;</span><br><span class="line">  &lt;Route/&gt;</span><br><span class="line">  &#123;<span class="comment">/* 不用 Switch 这里可能就会匹配多个路由了，即便匹配不到，也会返回一个null，使动画计算增加了一些麻烦。 */</span>&#125;</span><br><span class="line">&lt;<span class="regexp">/Fade&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>children: node</li><li><code>&lt;Switch&gt;</code> 下的子节点只能是 <code>&lt;Route&gt;</code> 或 <code>&lt;Redirect&gt;</code> 元素。只有与当前访问地址匹配的第一个子节点才会被渲染。<code>&lt;Route&gt;</code> 元素用它们的 <code>path</code> 属性匹配，<code>&lt;Redirect&gt;</code> 元素使用它们的 <code>from</code> 属性匹配。如果没有对应的 <code>path</code> 或 <code>from</code>，那么它们将匹配任何当前访问地址。</li></ul><h2 id="lt-Redirect-gt"><a href="#lt-Redirect-gt" class="headerlink" title="&lt;Redirect&gt;"></a><a name="4yw9av"></a><code>&lt;Redirect&gt;</code></h2><p>渲染时将导航到一个新地址，这个新地址覆盖在访问历史信息里面的本该访问的那个地址</p><ul><li>to: string<br>  重定向的 URL 字符串</li><li>to: object<br>  重定向的 location 对象</li><li>push: bool<br>  若为真，重定向操作将会把新地址加入到访问历史记录里面，并且无法回退到前面的页面。</li><li>from: string<br>  需要匹配的将要被重定向路径</li></ul><h2 id="lt-Prompt-gt"><a href="#lt-Prompt-gt" class="headerlink" title="&lt;Prompt&gt;"></a><a name="9scgyk"></a><code>&lt;Prompt&gt;</code></h2><p>当用户离开当前页面前做出一些提示。</p><ul><li>message: string<br>  当用户离开当前页面时，设置的提示信息。<br>  <code>&lt;Prompt message=&quot;确定要离开？&quot; /&gt;</code></li><li>message: func<br>  当用户离开当前页面时，设置的回掉函数<br>  <code>&lt;Prompt message={location =&gt; (</code>你确定要跳转到 \${location.pathname}页面吗?<code>)} /&gt;</code></li><li>when: bool<br>  通过设置一定条件决定是否启用Prompt</li></ul><h2 id="history"><a href="#history" class="headerlink" title="history"></a><a name="yc0icm"></a>history</h2><p>实现了对会话（session）历史的管理</p><ul><li>“browser history” - history 在 DOM 上的实现，用于支持 HTML5 history API 的浏览器</li><li>“hash history” - history 在 DOM 上的实现，用于旧版浏览器。</li><li>“memory history” - history 在内存上的实现，用于测试或非 DOM 环境（例如 React Native）</li></ul><p>history的属性和方法</p><ul><li>length: number 浏览历史堆栈中的条目数</li><li>action: string 路由跳转到当前页面执行的动作，分为 PUSH, REPLACE, POP</li><li>location: object 当前访问地址信息组成的对象<ul><li>pathname: string URL路径</li><li>search: string URL中的查询字符串</li><li>hash: string URL的 hash 片段</li><li>state: string 例如执行 push(path, state) 操作时，location 的 state 将被提供到堆栈信息里，state 只有在 browser 和 memory history 有效。</li></ul></li><li>push(path, [state]) 在历史堆栈信息里加入一个新条目</li><li>replace(path, [state]) 在历史堆栈信息里替换掉当前的条目</li><li>go(n) 将 history 堆栈中的指针向前移动 n<ul><li>goBack() 等同于 go(-1)</li><li>goForward 等同于 go(1)</li></ul></li><li>block(prompt) 阻止跳转</li></ul><p>history 对象是可变的，因为建议从  的 prop 里来获取 location，而不是从 history.location 直接获取。这样可以保证 React 在生命周期中的钩子函数正常执行</p><h2 id="location"><a href="#location" class="headerlink" title="location"></a><a name="6b1bfn"></a>location</h2><ul><li>当前的位置，将要去的位置，或是之前所在的位置</li><li>location 对象不会发生改变，因此可以在生命周期的回调函数中使用 location 对象来查看当前页面的访问地址是否发生改变。</li><li>场景：在获取远程数据以及使用动画时非常有用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  key: <span class="string">'sdfad1'</span></span><br><span class="line">  pathname: <span class="string">'/about'</span>,</span><br><span class="line">  search: <span class="string">'?name=minooo'</span></span><br><span class="line">  hash: <span class="string">'#sdfas'</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    price: <span class="number">123</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取location对象</p><ul><li>在 Route component 中，以 this.props.location 获取</li><li>在 Route render 中，以 ({location}) =&gt; () 方式获取</li><li>在 Route children 中，以 ({location}) =&gt; () 方式获取</li><li>在 withRouter 中，以 this.props.location 的方式获取</li></ul><h2 id="match"><a href="#match" class="headerlink" title="match"></a><a name="o4u4cu"></a>match</h2><ul><li>包含了  如何与 URL 匹配的信息<ul><li>params: object 路径参数，通过解析 URL 中的动态部分获得键值对</li><li>isExact: bool 为 true 时，整个 URL 都需要匹配</li><li>path: string 用来匹配的路径模式，用于创建嵌套的 </li><li>url: string URL 匹配的部分，用于嵌套的 </li></ul></li><li>当一个 Route 没有 path 时，它会匹配一切路径。</li></ul><p>获取 match 对象</p><ul><li>在 Route component 中，以 this.props.match获取</li><li>在 Route render 中，以 ({match}) =&gt; () 方式获取</li><li>在 Route children 中，以 ({match}) =&gt; () 方式获取</li><li>在 withRouter 中，以 this.props.match的方式获取</li><li>matchPath 的返回值</li><li>取路由中传入的参数值，即：传入的参数;带参数的路由一般放到最后，以避免冲突<br>  <a href="http://this.props.match.param.id" target="_blank" rel="noopener">this.props.match.param.id</a></li><li>this.props.match.path</li></ul><h2 id="code-splitting"><a href="#code-splitting" class="headerlink" title="code-splitting"></a><a name="pq9hzo"></a>code-splitting</h2><p>Code Spliting 是一个非常酷的特性，它能让我们用户无需完整下载整个 app 即可使用。你可以将他认为是增量加载我们的应用。尽管有一些其他工具也能实现相关特性，但在这个教程里我们使用 Webpack 和 bundle loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bundle.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bundle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="comment">// short for "module" but that's a keyword in js, so "mod"</span></span><br><span class="line">    mod: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="comment">// 加载初始状态</span></span><br><span class="line">    <span class="keyword">this</span>.load(<span class="keyword">this</span>.props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.load !== <span class="keyword">this</span>.props.load) &#123;</span><br><span class="line">      <span class="keyword">this</span>.load(nextProps);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  load(props) &#123;</span><br><span class="line">    <span class="comment">// 重置状态</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      mod: <span class="literal">null</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 传入组件的组件</span></span><br><span class="line">    props.load(<span class="function">(<span class="params">mod</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        <span class="comment">// handle both es imports and cjs</span></span><br><span class="line">        mod: mod.default ? mod.default : mod</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// if state mode not undefined,The container will render children</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.mod ? <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.state.mod) : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bundle.propTypes = &#123;</span><br><span class="line">  load: PropTypes.func,</span><br><span class="line">  children: PropTypes.func</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Bundle;</span><br></pre></td></tr></table></figure><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a><a name="gxyuzh"></a>配置路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RouteConfigExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Route,</span><br><span class="line">  Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some folks find value in a centralized route config.</span></span><br><span class="line"><span class="comment">// A route config is just data. React is great at mapping</span></span><br><span class="line"><span class="comment">// data into components, and &lt;Route&gt; is a component.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// /////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// first our route components</span></span><br><span class="line"><span class="keyword">const</span> Main = <span class="function"><span class="params">()</span> =&gt;</span> &lt;h2&gt;Main&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Sandwiches = () =&gt; &lt;h2&gt;Sandwiches&lt;/</span>h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Tacos = <span class="function">(<span class="params">&#123; routes &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Tacos&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;&lt;Link to='/</span>tacos/bus<span class="string">'&gt;Bus&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;&lt;Link to='</span>/tacos/cart<span class="string">'&gt;Cart&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123;routes.map((route, i) =&gt; (</span></span><br><span class="line"><span class="string">      &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /&gt;</span></span><br><span class="line"><span class="string">    ))&#125;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Bus = () =&gt; &lt;h3&gt;Bus&lt;/h3&gt;</span></span><br><span class="line"><span class="string">const Cart = () =&gt; &lt;h3&gt;Cart&lt;/h3&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/// /////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="string">// then our route config</span></span><br><span class="line"><span class="string">const routes = [</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    path: '</span>/sandwiches<span class="string">',</span></span><br><span class="line"><span class="string">    component: Sandwiches</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    path: '</span>/tacos<span class="string">',</span></span><br><span class="line"><span class="string">    component: Tacos,</span></span><br><span class="line"><span class="string">    routes: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        path: '</span>/tacos/bus<span class="string">',</span></span><br><span class="line"><span class="string">        component: Bus</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        path: '</span>/tacos/cart<span class="string">',</span></span><br><span class="line"><span class="string">        component: Cart</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// wrap &lt;Route&gt; and use this everywhere instead, then when</span></span><br><span class="line"><span class="string">// sub routes are added to any route it'</span>ll work</span><br><span class="line"><span class="keyword">const</span> RouteWithSubRoutes = <span class="function">(<span class="params">route</span>) =&gt;</span> (</span><br><span class="line">  &lt;Route path=&#123;route.path&#125; render=&#123;props =&gt; (</span><br><span class="line">    <span class="comment">// pass the sub-routes down to keep nesting</span></span><br><span class="line">    &lt;route.component &#123;...props&#125; routes=&#123;route.routes&#125; /&gt;</span><br><span class="line">  )&#125; /&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouteConfigExample = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;Link to='/tacos'&gt;Tacos&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;Link to='/sandwiches'&gt;Sandwiches&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &#123;routes.map((route, i) =&gt; (</span></span><br><span class="line"><span class="regexp">        &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /</span>&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RouteConfigExample</span><br></pre></td></tr></table></figure><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="4e5ygu"></a>资源</h2><p><a href="https://blog.csdn.net/sinat_17775997/article/details/77411324" target="_blank" rel="noopener">关于 React Router 4 的一切</a></p><p><a href="http://reacttraining.cn/" target="_blank" rel="noopener">React Router 中文文档</a></p><p><a href="https://molunerfinn.com/fe-be-router-render/#%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E4%B8%8E%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">浅谈前后端路由与前后端渲染</a></p><h2 id="hash-VS-browser"><a href="#hash-VS-browser" class="headerlink" title="hash VS browser"></a><a name="iqbxix"></a>hash VS browser</h2><ul><li>Warning: Hash history cannot PUSH the same path; a new entry will not be added to the history stack</li></ul><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a><a name="14besq"></a>坑</h2><ul><li><a href="http://blog.codingplayboy.com/2017/12/26/react-router-browserhistory-404/" target="_blank" rel="noopener">react-router browserHistory刷新页面404问题解决</a></li><li>通过router 的 history.push() 方法延迟跳转后还是会跳转</li><li>在当前目录下的文件路径不再使用./, 而是直接用/</li><li>的优先级要比  高，所以不要在同一个  中同时使用这两个属性。</li><li>Link 和 BrowserRouter 是同一个history，然而createBrowserHistory 的 history只能改变url，并没有触发页面刷新</li><li>错误的地方就在类似这样的代码<br>  写法1<br>  <code>export default connect(mapStateToProp, mapDispatchToProp)(withRouter(AppContainer));</code><br>  应该写成</li></ul><p>写法2</p><p><code>export default withRouter(connect(mapStateToProp, mapDispatchToProp)(AppContainer));</code><br>原因<br>connect内是进行shallow comparison浅比较的。它重写了组件的shouldComponentUpdate方法</p><p>写法1中，connect重写了withRouter的shouldComponentUpdate方法，导致其不能够响应location的变化（仅仅响应mapStateToProps里面的变化）</p><p>写法2中，将withRouter提到外层，withRouter的shouldComponentUpdate不会被重写，就会响应location的变化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;路由使用场景&quot;&gt;&lt;a href=&quot;#路由使用场景&quot; class=&quot;headerlink&quot; title=&quot;路由使用场景&quot;&gt;&lt;/a&gt;&lt;a name=&quot;u7uoba&quot;&gt;&lt;/a&gt;路由使用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果是功能复杂的网站，建议后端路由，不建议大型网站用前
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正确的提问(issue)</title>
    <link href="http://lulustyle.net/2018/12/22/%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%8F%90%E9%97%AE(issue)/"/>
    <id>http://lulustyle.net/2018/12/22/正确的提问(issue)/</id>
    <published>2018-12-22T07:28:59.000Z</published>
    <updated>2018-12-25T09:24:59.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不要问已经回答过的问题"><a href="#不要问已经回答过的问题" class="headerlink" title="不要问已经回答过的问题"></a><a name="wrwezy"></a>不要问已经回答过的问题</h2><p>尽职调查，试着找找是不是已经有人问过你的问题。如果你问了一个很容易找到答案的问题，你的问题很快会作为重复的问题关闭。</p><h2 id="不要让人替你写代码"><a href="#不要让人替你写代码" class="headerlink" title="不要让人替你写代码"></a><a name="k2pfey"></a>不要让人替你写代码</h2><p>如果你只是问”我怎么做某件事？”你的问题很快就会被关掉。希望你能在提issue之前自己先努力尝试着解决它。在你的问题里描述你尝试过的办法，以及为什么不行。</p><h2 id="一次问一个问题"><a href="#一次问一个问题" class="headerlink" title="一次问一个问题"></a><a name="sdm3mq"></a>一次问一个问题</h2><p>一次问5件事情的问题：“我怎么做这件事，然后是那件，然后另一件事情，以及什么是做这个的最好办法？”，这很难回答，并且会让人望而却步。</p><h2 id="为你的问题做一个最精简的例子"><a href="#为你的问题做一个最精简的例子" class="headerlink" title="为你的问题做一个最精简的例子"></a><a name="ueyrql"></a>为你的问题做一个最精简的例子</h2><p>当人们看到有3页代码（或者更多！)的问题时，总是会跳过去，把5000行的代码文件直接贴到issue里不利于得到答案(但总有人这么干)。这是一种经常得不到回报的懒惰行为。这不仅让你不太可能得到有用的答案，并且也正是消除无关因素的过程会引导你自己解决问题(这样你甚至不用在issue上问这个问题了)。制作最精简的例子对你的调试技能有好处，对你认真思考问题的能力也有所帮助。</p><h2 id="如果在别给出答案之前你自己解决了问题，那就自己回答那个问题"><a href="#如果在别给出答案之前你自己解决了问题，那就自己回答那个问题" class="headerlink" title="如果在别给出答案之前你自己解决了问题，那就自己回答那个问题"></a><a name="bgv3ck"></a>如果在别给出答案之前你自己解决了问题，那就自己回答那个问题</h2><p>你遇到的问题很可能别人也会遇到，如果你已经解决了，本着助人为乐的精神，把你的答案放上去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不要问已经回答过的问题&quot;&gt;&lt;a href=&quot;#不要问已经回答过的问题&quot; class=&quot;headerlink&quot; title=&quot;不要问已经回答过的问题&quot;&gt;&lt;/a&gt;&lt;a name=&quot;wrwezy&quot;&gt;&lt;/a&gt;不要问已经回答过的问题&lt;/h2&gt;&lt;p&gt;尽职调查，试着找找是不是已
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GTD 时间管理方法论</title>
    <link href="http://lulustyle.net/2018/12/22/GTD%20%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>http://lulustyle.net/2018/12/22/GTD 时间管理方法论/</id>
    <published>2018-12-22T07:28:08.000Z</published>
    <updated>2018-12-25T09:24:59.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收件箱（INBOX）"><a href="#收件箱（INBOX）" class="headerlink" title="收件箱（INBOX）"></a><a name="fvv0sa"></a>收件箱（INBOX）</h2><p>这里的收件箱并不等于邮箱，照片，想看的网页，想看的书电影电视剧，邮件，临时的想法，想到要做的事情等等都可以放到这里来，这是GTD的第一步，收集（CAPTURE）</p><h2 id="甄别-CLARIFYING"><a href="#甄别-CLARIFYING" class="headerlink" title="甄别(CLARIFYING)"></a><a name="o02zpn"></a>甄别(CLARIFYING)</h2><p>这步是要做出判断，收件箱里的东西是否是一个action</p><ol><li>如果是，则进一步判断是单个动作还是多个动作，如果是单个动作，则要判断能否在两分钟内完成，如果能就马上去完成它。</li><li>如果不是ACTION，那么这个东西有几个去处，<ul><li>一是垃圾桶，顾名思义，</li><li>二是当前没啥事能做，但在某个指定时间需要提醒自己，</li><li>三是参考材料</li></ul></li></ol><h2 id="整理（ORGANISING）"><a href="#整理（ORGANISING）" class="headerlink" title="整理（ORGANISING）"></a><a name="fws3rx"></a>整理（ORGANISING）</h2><p>在上一步我们说到要判断是否是多个动作。现在我们来说说怎么分类处理多个动作。</p><p>首先需要多个动作才能完成的短期成果我们称之为项目。项目是可以衡量的短期成果，学好GTD不叫项目，学会如何给任务设置上下文（更好的翻译是情境）这是项目。</p><p>出于分类的方便，多个动作可以进一步分为：</p><ol><li>日程表动作，即那些必须在特定时间或日期完成的动作，它们需要标注在日程表上提醒自己；</li><li>等待动作，这是指只有当你的同伴或队友完成了某个或多个动作并发给/告知你成果，你才能开始的动作，他们要放在等待列表里；</li><li>尽快开始动作，简称ASAP动作。对于ASAP动作的管理，除了使用项目的观念，还要引入情境，能量，时间和优先级这四个概念。<ul><li>情境：完成动作必须用到的工具或必须处于的场地，比如你必须到实验室才能做实验，则实验室便是一个情境。</li><li>能量，包括生理状态和心理状态，比如阅读文件需要聚精会神，那么就是高能量。</li><li>时间，这里指的是要花费的时间多少，比如这个动作要1小时左右完成，则1小时便是时间标签。</li><li>优先级：优先级指的是在当前的情境，能量，时间条件下哪个动作能带给你最大的收益，那么就是高优先级。<br>  事实上，随着GTD的发展，情境之外的三个条件已经被很多人设置为了情境使用。SOMEDAY动作，想做，但可能做也可能不做的事情，比如想读一本书但不确定到底要不要读。</li></ul></li><li>回顾，回顾这里不妨使用GTD的六层视野模型|<ul><li>六层：原则，这里是核心的价值观，比如这个项目为什么要存在</li><li>五层：愿景，这里是期望的长期成果，比如让公司上市</li><li>四层，目标，两年以内的中长期成果，比如完成收购某某集团</li><li>三层：关注的领域，这里是要维持你自己是身心健康或公司的日常运作需要不断进行的动作，最简单的例子比如买菜，健身等等</li><li>二层，项目，由多个具体可执行动作组成的短期成果</li><li>一层，接下来要做的动作，即项目下的可执行动作<br>  需要注意的是GTD要求每周至少一次回顾自己的项目/任务列表，维护自己的系统</li></ul></li></ol><h2 id="omnifocus-相对于其他GTD软件"><a href="#omnifocus-相对于其他GTD软件" class="headerlink" title="omnifocus 相对于其他GTD软件"></a><a name="golynn"></a>omnifocus 相对于其他GTD软件</h2><ol><li>可以设置顺序执行的项目类型, 比如 你有一个项目,是做饭,然后下面有2个动作,买菜,然后炒菜,炒菜要等买菜完成以后才能出现.通过设置一些顺序执行项目的分解,可以把一大部分不可用的任务给过滤掉!</li><li>设置推迟时间 ( 指定任务的出现时间 )没有一个gtd任务有,比如,我每天晚上要冥想,我就设置每天9点以后才出现这个任务.通过这样的设置,又可以过滤掉一堆任务!</li><li>项目文件夹分类,无限层级分类.这个用过的人才知道好</li><li>注释可以添加富文本,可以添加附件.这个相当强大,doit就没这功能,我有的时候,甚至会新建一个任务,然后把聊天截图的截图直接黏贴进去~.</li><li>配合mac的脚本软件,可以发送周报,日报,以及工作计划等到印象笔记</li><li>还有更强的脚本,可以把一本书,输入页,开始和结束时间,自动拆分成每天需要阅读多少页~</li><li>手机上配合workflow可以快速添加任务! ( 从剪切板添加任务,从通知中心添加任务等 )</li><li>为任务设置预估时间,配合脚本还可以统计总时间.配合透视,还可以把小于5分钟的任务筛选出来,然后一起处理</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><a name="6ur1pd"></a>注意</h2><h3 id="项目与行动"><a href="#项目与行动" class="headerlink" title="项目与行动"></a><a name="q4x6ux"></a>项目与行动</h3><p>一个项目 5 月 1 号开始，9月 30 号结束。<br>那么这个项目肯定是由许许多多的小行动组成的。假设这个项目是抄写150条知乎问题；5月1号开始，9月30号结束。那么它也能分解成：每天抄写一条知乎问题。</p><h3 id="行动与提醒"><a href="#行动与提醒" class="headerlink" title="行动与提醒"></a><a name="sy1zle"></a>行动与提醒</h3><p>OmniFoucs：不需要提醒的，项目一般在项目下都可以看见，每天有空做事的时候从中挑一件合适的事情做就OK了</p><p>calendar events：有明确时间要求的，比如15:00开会，这种行动应该记在日历中，不是OF中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;收件箱（INBOX）&quot;&gt;&lt;a href=&quot;#收件箱（INBOX）&quot; class=&quot;headerlink&quot; title=&quot;收件箱（INBOX）&quot;&gt;&lt;/a&gt;&lt;a name=&quot;fvv0sa&quot;&gt;&lt;/a&gt;收件箱（INBOX）&lt;/h2&gt;&lt;p&gt;这里的收件箱并不等于邮箱，照片，想
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>埋点方案</title>
    <link href="http://lulustyle.net/2018/12/22/%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/"/>
    <id>http://lulustyle.net/2018/12/22/埋点方案/</id>
    <published>2018-12-22T07:26:51.000Z</published>
    <updated>2018-12-27T01:35:19.735Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 业务场景解决方案</span></span></p><hr><h2 id="埋点方式"><a href="#埋点方式" class="headerlink" title="埋点方式"></a><a name="1cv6yv"></a>埋点方式</h2><ul><li>数据监测：数据采集 | 数据传输 | 数据存储 | 数据分析挖掘 | 数据可视化</li><li>数据采集也叫埋点(加码|打点)</li><li>埋点核心参数：埋点 | 埋点参数 | 来源页面 | 来源页面参数 | 当前页面 | 当前页面参数</li></ul><h3 id="手工埋点"><a href="#手工埋点" class="headerlink" title="手工埋点"></a><a name="2g0ybo"></a>手工埋点</h3><ul><li>在需要监测的页面引入基础js文件，然后根据业务需求添加监测代码</li><li>手工埋点的数据监测产品：Google Analytics | Omniture | Webtrends | Coremetrics | Flurry | 百度统计 | CNZZ | 腾讯云分析 | 友盟</li><li>灵活：可以设置自定义事件属性、发送数据内容、发送时间等，可以采集自己最为关心和需要的数据</li><li>对于大型、复杂的网站，跨部门沟通成本较高</li></ul><h3 id="可视化埋点"><a href="#可视化埋点" class="headerlink" title="可视化埋点"></a><a name="mqznbv"></a>可视化埋点</h3><ul><li>通过点击交互替代手写代码</li><li>原理：在需要监测的页面引入基础JS文件，使用者进入可视化模式下，选择并配置监测内容(html元素)的信息被记录，并存放在相应位置。当真实世界的用户触发到该监测内容时，基础JS会自动加载之前配置过的信息，记录并发送该数据</li><li>产品：Mixpanel 的 Codeless 模式 | 神策分析</li></ul><h3 id="无埋点-全埋点"><a href="#无埋点-全埋点" class="headerlink" title="无埋点(全埋点)"></a><a name="g0cydy"></a>无埋点(全埋点)</h3><ul><li>也是通过可视化的形式添加要监测的内容</li><li>可视化埋点是需要先通过配置才能实现内容监测，而无埋点默认先尽可能多的收集能监测的内容，然后再通过配置确定哪些内容需要展示和分析</li><li>可以对想要监测的数据进行回溯，不必担心因为漏掉埋点而导致数据丢失</li><li>但由于有大量数据需要预先传输，数据时效性和网络传输对无埋点技术要求较高</li><li>产品：Heap | GrowingIO</li></ul><h2 id="前端埋点操作"><a href="#前端埋点操作" class="headerlink" title="前端埋点操作"></a><a name="dlasth"></a>前端埋点操作</h2><p>由于访问印记实现埋点是跨域的请求，所以前端这里用jsonp实现跨域请求。</p><ol><li>下载并引入第三方库 jsonp</li></ol><ul><li>npm install jsonp –save</li><li>import originJsonp from ‘jsonp’</li></ul><ol><li>jsonp的实现原理就是动态创建script标签，并且将我们需要请求的路径通过该标签的src来实现，并且将我们要传入的参数拼接在路径后面。</li><li>jsonp请求的封装</li></ol><ul><li>url：需要请求的接口地址</li><li>option(Object)：jsonp的请求配置，如：timeout设置超时时间、param(String)回调函数名称</li><li>fn：回调函数，用来接受返回的错误或者成功的结果</li></ul><ol><li>封装调用印记方法</li></ol><ul><li>提供三种方法实现印记系统的登录、定时激活session、调用印记接口记录日志</li><li>将三种方法放在jsonpCMT对象中<ol><li>writeLogLogin 登录印记系统</li><li>writeLogActive 激活session</li><li>writeLogToDSInfo 调用印记接口记录日志</li><li>上述三种方法只需要传入一个参数params(Object)即可。该参数就是需要记录的状态。</li></ol></li></ul><ol><li>实现埋点</li></ol><ul><li>在需要埋点的模块中导入模块 import jsonpCMT from ‘文件路径’</li><li>在前端应用登录成功以后调用jsonpCMT.writeLogLogin方法，该方法成功以后则成功登录印记系统</li><li>在登录印记系统成功以后调用jsonpCMT.writeLogActive实现定时激活session</li><li>在需要实现埋点的地方调用jsonpCMT.writeLogToDSInfo实现日志记录</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><a name="y7stdu"></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>随记</title>
    <link href="http://lulustyle.net/2018/12/22/%E9%9A%8F%E8%AE%B0/"/>
    <id>http://lulustyle.net/2018/12/22/随记/</id>
    <published>2018-12-22T07:24:47.000Z</published>
    <updated>2018-12-25T09:24:59.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随心随想随笔"><a href="#随心随想随笔" class="headerlink" title="随心随想随笔"></a><a name="ty9dul"></a>随心随想随笔</h1><ul><li>PWA:<ul><li>渐进式：能确保每个用户都能打开网页</li><li>响应式：PC，手机，平板，不管哪种格式，网页格式都能完美适配</li><li>离线应用：支持用户在没网的条件下也能打开网页，这里就需要 Service Worker 的帮助</li><li>APP 化：能够像 APP 一样和用户进行交互常</li><li>更新：一旦 Web 网页有什么改动，都能立即在用户端体现出来</li><li>安全：安全第一，给自己的网站加上一把绿锁–HTTPS</li><li>可搜索：能够被引擎搜索到推送：做到在不打开网页的前提下，推送新的消息</li><li>可安装：能够将Web像APP一样添加到桌面可跳转：只要通过一个连接就可以跳转到你的 Web 页面</li></ul></li><li>Web要做的是把组件化、离线缓存、本地API、通知接口、自适应设备做好</li><li>service worker强大的网络请求拦截可以帮助用户更好的原生APP体验。PWA存在的问题主要是浏览器的兼容问题</li><li>service worker，pouchdb对离线体验的加持，以上几个库都没polymer做得好。</li><li>乔布斯：Design is not just what it looks like and feels like. Design is how it works</li><li>《死亡诗社》：我步入丛林，因为我希望活得深刻，吸取生命中所有的精华，把非生命的一切都击溃，以免当我生命终结时，发现自己从没有活过。</li><li>你要拼尽全力在年轻的时候给自己足够多的机会，创造更多的可能。</li><li>你要改变心态，要增长才干，积累阅历，这样你才有得选。</li><li>村上春树：你要做一个不动声色的大人了，不准情绪化，不准偷偷想念，不准回头看，去过自己另外的生活，你要听话，不是所有的鱼都会生活在同一片海里。</li><li>“If you cannot measure it, you cannot improve it” ———— William Thomson</li><li>You need to be right before being good</li><li>try…catch…finally: 在保持代码运行的同时，处理给定代码块中可能发生的部分或所有错误的方法。如果出现了未处理的错误，JS将提供常规错误消息。<ul><li>try块包含可能引发错误的代码</li><li>catch块包含处理部分或所有错误的代码</li><li>如果try块中发生错误，则程序控件将传递exception的值给catch块</li><li>如果未发生错误，则绝不执行catch块中的代码</li><li>可以通过使用throw语句重新引发错误来将错误传递到下一级别</li><li>在执行try块中的所有语句并在catch块中完成错误处理后，无论是否已处理错误，都将执行finally块中的语句。</li><li>finally块中的代码保证能运行，除非发生未处理的错误（例如，catch块内发生的运行时错误）</li></ul></li><li>只有理解细节，才有可能在特定场景里进行优化和创造</li><li>每次选择的时候，听内心的声音，选择似乎难一点的那条路，就是在践行理想：<ul><li>自己的工作做到最高标准，不断精进；</li><li>不斤斤计较自己的得失，先人后己；</li><li>看到不公平的情况，发声；</li><li>看到需要帮助的“无关人等”，伸手；</li><li>对认为正确的事情，坚持；</li><li>少抱怨，多行动；</li><li>对支持创新的事，敢于冒险；</li><li>看到需要支持的人，挺身而出；</li><li>出了问题，敢于担当；</li></ul></li><li>React是用来替换jQuery的，那么Redux就是以替换Backbone|Ember等MVC框架为目的的。</li><li>如果你愿意限制做事方式的灵活度，你几乎总会发现可以做的更好</li><li>政治学说：谁垄断了信息的阐释权，谁就掌握了权利</li><li>经济学说：你能让信息有公信力，你就控制了一笔看不见的财富</li><li>如果说信息就是财富，那么得到的方法有两种：<ul><li>一种是利用信息不对称赚取利益，就像利用各种面试技巧，取得面试官的信任；</li><li>一种是让自己的能力“公有化”，利用信息透明化，来降低交易成本。</li></ul></li><li>面试要考虑两个问题：<ul><li>你是否能满足这个职位现在和以后的要求？——你有什么能力？</li><li>这个人在团队中会产生什么样的作用？他是否符合公司文化的要求？——你是什么样的人？你有着怎样的故事？关键在于，如何讲这个故事。</li><li>”弱点——挑战——解决“的情节建构模式<ul><li>能力一般，但工作有韧劲儿，性格单纯，所以有些事情干得反而比聪明人更好</li><li>我喜欢观察事物，改变对事情的看法，从而解决问题。人物形象：我是一个有想法有创意的人</li><li>对于认准的事情，我非常坚持，不达目的，绝不放弃。人物形象：我是一个有毅力的人，可以打硬仗。</li><li>我的关注点常常不在具体问题，而是喜欢梳理业务逻辑，从制度层面优化办事效率。人物形象：我是一个理性、系统性很强的人。</li></ul></li><li>屡战屡败是一个事实，屡败屡战就是一个故事</li><li>你并没有浪费掉一个好机会，你只是主动放弃掉一些不适合你的机会而已</li><li>只有不断放大自己的性格，你才会令人印象深刻</li></ul></li><li>骤然临之而不惊，无故加之而不怒<ul><li>每临大事有静气，不信今时无古贤</li><li>始终要做到精神镇静，头脑冷静，心态平静，要力戒浮躁、急躁、焦躁，培育静气、大气，始终做到不为诱惑所动、猝变所惊、名利所累、俗事所扰，讲政治、顾大局、守纪律，以无私无欲、至大至刚，涵养浩然大气，把静气当成一种境界去追求，一种情操去修炼，一种品质去磨砺，静气才会形而上为道，形而下为行，内化于心，外化于事，成为我们立身做人，为官做事的强大人格力量。</li></ul></li><li>精明的最高境界是厚道，修养的最高境界是善良</li><li><a href="https://cloud.tencent.com/developer/labs/lab/10004/console" target="_blank" rel="noopener">https://cloud.tencent.com/developer/labs/lab/10004/console</a></li><li>若没有人愿意与你颠沛流离，则以梦为马，随处而栖</li><li>营销的基础是洞察受众的社会心态</li><li>数组的some和filter方法的区别<ul><li>some方法返回的是boolean值，可用于检察数组中是否有某对象</li><li>filter方法返回的是一个新数组，可用于过滤数组中的对象</li></ul></li><li>初级 | 小农经济 | 几乎不需要成本，不需要思考，靠人力获取价值，出现问题连基本的定位都很难，找到问题还是要靠大量的人力去解决重复性的劳动</li><li>中级 | 蒸汽时代（借助平台） | 工程化时代，借助工具快速定位，| 为了效率</li><li>高级 | 资本运作（人工智能|平台） | 资本带动资本，前期投资大，后期牵一发而动全身 | 思维方式的颠覆，具有积累效应（随着项目实践越来越多反哺从而变得越来越智能）</li><li>从依靠别人慢慢成长为成为别人的依靠</li><li>Array.prototype.filter ( callbackfn(元素的值，元素的索引，遍历的对象) )</li><li>以企业的研究、生产、销售（“研产销”）三大功能计，原来三者之间市场交易成本太高，所以，必须把它们一体化到一家公司屋檐之下，才能顺畅运转，生产出有竞争力的产品。价值观、预设和行为习惯都不同的三大功能，一方面要充分尊重它们的差异化（differentiation），另外一方面又要实现一体化（integration），这也是管理学著名的所谓应变理论（contingency theory）的核心。现在，市场上的交易费用降低了，行业的产业组织模式发生变化了，原来必须放在一个屋檐之下的功能可以到市场上去购买了，“研产销”模式之外，还有可能出现的形式是：“研销＋产”（如电子代工业）、“研＋产销”（如新药研发）、“研产＋销”（如汽车分销业），当然，还有“研＋产＋销”（如芯片业）</li><li>渠道（客户）为王还是内容（产品）为王，从来都取决于二者的相对谈判力。小岛上十个男生，一个女生，女生为王；十个女生，一个男生，男生为王。没有谁是天生的真命天子。</li><li>互联网对产业的影响，我们主要看两个维度，一个是行业市场化的程度，一个是行业信息化的程度</li><li>行业信息化的程度，指这个行业的人流、物流、生意流多大程度上是跟着信息流走的，如果很大程度上是跟着信息流走的，互联网在这个行业就有戏；如果不跟着走，就不要去搞什么互联网，“互联网+”或者“+互联网”，都不会有太大意义。只要一个行业的信息化程度高，互联网化的潜力大，这个行业里一般就会出现专做信息的平台。</li><li>偷是这个世界上唯一的罪，偷懒也是偷</li><li>有两件事情不做好容易走弯路，一是官方文档没有看透，基础不扎实；二是该遵循的规范没有遵循</li><li>不能简单地做单目标局部短期优化，必须多目标长期地把这种商业生态需求同算法融合在一起。</li><li>互联网商业:<ul><li>流量集中化:线上最重要的特点是用户和流量集中化，不再有地理位置限制，可以显著提升商业效率。这里对技术有非常强的依赖和挑战，要求我们能快速把好的商家和商品筛选出来给用户，把不好的淘汰掉，甚至要针对不同类型的用户和场景，更多体现某一类商品或商家的特点。一旦我们做不好，负向结果也会迅速扩大，会把不好的或者不适合的商品迅速推送给某个场景下某个用户群体，这样对生态对用户的损害也是非常显著的</li><li>产品化:</li><li>大数据赋能:之所以技术能够提升商业效率，核心也在于线上环境有丰富的大数据，例如用户、商品、商家、交易、评价等数据，而这些大量的数据是结构化和打通的，在这个基础上技术才能有发挥的空间，才能去提升商业效率</li></ul></li><li>如果提前了解了你们要面对的人生，不知你们是否还会有勇气前来。看见的和听到的，经常会令你们沮丧。世俗是这样的强大，强大到生不出改变他们的念头来。可是如果有机会提前了解了你们的人生，知道青春也不过只有这些日子，不知你们是否还会在意那些世俗希望你们在意的事情。比如占有多少才更荣耀，拥有什么才能被爱。等你们长大你们会因绿芽冒出土地而喜悦，会对初升的朝阳欢呼跳跃，也会给别人善意和温暖。但是却会在赞美别的生命的同时，常常，甚至永远地忘了自己的珍贵。“愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵。爱你所爱，行你所行，听从你心，无问西东。</li><li>做出正交的设计，“正交”讲的是线性无关，非常重要，就像一个点(x,y)，在x轴的变化不会影响y，y轴的变化不会影响x，这就是正交。“正交”威力巨大，(x,y)可以表达二维平面的所有的点，如果增加一个z轴，不但能表达三维空间中所有的点，并且每个轴都可以独立变化。设计模式一直强调的『发现变化并且封装变化』其实就是这个意思。</li><li>前端技术：优先解决基础技术设施的问题<ul><li>业务：对外</li><li>开发效率 VS 研发效率</li><li>性能 &amp;&amp; 用户体验</li><li>技术生态</li></ul></li><li>团队驱动：结果可衡量：为团队争取时间</li><li>Move Fast and Break Things</li><li>Huge Impact with Small Teams</li><li>Be Bold and Innovative</li><li>代码对于一个软件工程师就是尊严。</li><li>当你遇到困惑不知道该怎么办，永远记住:Read-Search-Ask。<ul><li>Read the error</li><li>search google</li><li>ask for help</li></ul></li><li>个人学习求新，企业架构求稳。无非喜好与场景而已。</li><li>其实没有刺不穿的盾，只是攻击的成本和攻击成功后获得的利益成不成正比。</li><li>你需要的伴侣，最好是那能够和你并肩立在船头，浅斟低唱两岸风光，同时更能在惊涛骇浪中紧紧握住你的手不放的人。——龙应台</li><li>恩宜自淡而浓，先浓后淡者人忘其惠；威宜自严而宽，先宽后严者人怨其酷</li><li>阳光下像个天真烂漫的孩子，风雨里做个相互扶持的大人</li><li>何谓平庸？平庸是一种被动而又功利的谋生态度。平庸者什么也不缺少，只是无感于外部世界的精彩，人类历史的厚重，终极道义的神圣，生命涵意的丰富。</li><li>只有书籍，能把辽阔的空间和漫长的时间浇灌给你，能把一切高贵生命早已飘散的信号传递给你，能把无数的智能和美好对比着愚昧和丑陋一起呈现给你。</li><li>这个世界上多的是短平快、付出马上就有回报的立竿见影的事，也多的是需要长期投入、靠矢志不渝的坚持才有大成的事。只不过，对前一种人们常常趋之若鹜，对后一种人们却避之唯恐不及。</li><li>当爱支配一切时，权利就不存在了，当权力主宰一切时，爱就消失了</li><li>力微休负重，言轻莫劝人</li><li>逝者不可追，来者犹可待</li><li>拿破仑曾说：“能控制好自己情绪的人，比拿下一座城池的将军更伟大。”</li><li>衡量一个人的成功标志，不是看他登到顶峰的高度，而是看他跌到低谷的反弹力。</li><li>金钱教育，本质上就是教会孩子如何正确对待“获得”和“拥有”。“君子爱财取之有道”</li><li>自信的孩子，眉间有笑，心中有光，做事有决断，大多具有领导才能，内心果敢而笃定，未来会有无限可能。</li><li>这个世界上所有的爱都以聚合为最终目的，只有一种爱是以分离为目的，那就是父母对孩子的爱。</li><li>浅层学习满足输入，深度学习注重输出。</li><li>正确思考的核心是让自己的主观认知尽量与客观世界保持一致</li><li>自卑不是来自你的缺点，而来自你没有足以对抗的优点。</li><li>自己的目的是什么？</li><li>对方的目的是什么？</li><li>如何做才能达成我们双方共同的目的？</li><li>对方为什么会产生这样的情绪？</li><li>如何才能让对方感觉是处于安全的对话环境中？</li><li>如何控制自己的情绪，客观的评价对方的观点和行为？</li><li>《菜根谭》：冷眼观人，冷耳听语，冷情当感，冷心思理。</li><li>所谓学习，就是把原本不相关的东西联系在一起的过程</li><li>我们经常说某个人口才好，能把一个复杂的概念讲明白，那一定是因为这个人用了一个你熟悉的概念作为起点，帮助你连接到这个新概念上，这样你就能一下子听明白了。<ul><li>人是在已有认知上，建立新的连接，来理解新事物的。</li><li>整理背景知识的：MECE法则。</li><li>提升沟通效果的：SCQA结构化表达。</li><li>用于策略选择的：SWOT分析。</li><li>正向演绎推理的：三段论。</li><li>用于创新思考的：加减乘除排列组合。</li></ul></li><li>对创业者来说，合伙人的背景非常重要，尽量不要找一起长大的，一个学校读书的，这样你会干的事情他也会干</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;随心随想随笔&quot;&gt;&lt;a href=&quot;#随心随想随笔&quot; class=&quot;headerlink&quot; title=&quot;随心随想随笔&quot;&gt;&lt;/a&gt;&lt;a name=&quot;ty9dul&quot;&gt;&lt;/a&gt;随心随想随笔&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;PWA:&lt;ul&gt;
&lt;li&gt;渐进式：能确保每个用户都能打
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写一个 Loader</title>
    <link href="http://lulustyle.net/2018/12/22/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%20Loader/"/>
    <id>http://lulustyle.net/2018/12/22/编写一个 Loader/</id>
    <published>2018-12-22T07:19:22.000Z</published>
    <updated>2018-12-27T01:35:19.739Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a><a name="z84ilz"></a>loader</h2><p>loader是导出为一个函数的 node 模块，该函数在 loader 转换资源时调用，给定的函数将调用loader API，并通过this上下文访问<br>本质：接收字符串(或者buffer)，再返回处理完的字符串(或者buffer)的过程</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a><a name="qsyxma"></a>设置</h2><h3 id="匹配单个-loader"><a href="#匹配单个-loader" class="headerlink" title="匹配单个 loader"></a><a name="r6aibc"></a>匹配单个 loader</h3><p>webpack.config.js<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.js$/</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: path.resolve(<span class="string">'path/to/loader.js'</span>), <span class="comment">// 通过rule对象指向本地文件</span></span><br><span class="line">      options: &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="匹配多个-loaders"><a href="#匹配多个-loaders" class="headerlink" title="匹配多个 loaders"></a><a name="rrg6vz"></a>匹配多个 loaders</h3><p>webpack.config.js<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolveLoader: &#123;</span><br><span class="line">  modules: [</span><br><span class="line">    <span class="string">'node_modules'</span>,</span><br><span class="line">    path.resolve(__dirname, <span class="string">'loaders'</span>) <span class="comment">// 如果你的项目中有一个 /loaders 本地目录</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="为-loader-创建了独立的库和包"><a href="#为-loader-创建了独立的库和包" class="headerlink" title="为 loader 创建了独立的库和包"></a><a name="v6wvoa"></a>为 loader 创建了独立的库和包</h3><p>使用 <a href="https://docs.npmjs.com/cli/link" target="_blank" rel="noopener">npm link</a>，来将其关联到你要测试的项目<br>Npm link 专门用于开发和调试本地Npm模块，能做到在不发布模块的情况下，把本地的一个正在开发的模块的源码链接到项目的 node_modules 目录下，让项目可以直接使用本地的 Npm 模块。<br>由于是通过软链接的方式实现的，编辑了本地的 Npm 模块代码，在项目中也能使用到编辑后的代码。</p><p>完成 Npm link 的步骤如下：</p><ul><li>确保正在开发的本地 Npm 模块（也就是正在开发的 Loader）的 package.json 已经正确配置好；</li><li>在本地 Npm 模块根目录下执行 npm link，把本地模块注册到全局；</li><li>在项目根目录下执行 npm link loader-name，把第2步注册到全局的本地 Npm 模块链接到项目的 node_moduels 下，其中的 loader-name 是指在第1步中的 package.json 文件中配置的模块名称。</li><li>链接好 Loader 到项目后你就可以像使用一个真正的 Npm 模块一样使用本地的 Loader 了</li></ul><h2 id="复杂用法"><a href="#复杂用法" class="headerlink" title="复杂用法"></a><a name="wbz9we"></a>复杂用法</h2><p>链式调用多个loader时，以相反顺序调用，从右往左或从上到下</p><ul><li>最后的loader最早调用，将会传入原始资源内容</li><li>第一个loader最后调用，期望值是传出JS和SourceMap(可选)</li><li>中间的loader执行时，会传入前一个loader传出的结果</li></ul><h2 id="用法准则"><a href="#用法准则" class="headerlink" title="用法准则"></a><a name="cfnbxz"></a>用法准则</h2><ul><li>简单：loaders 应该只做单一任务。这不仅使每个 loader 易维护，也可以在更多场景链式调用。</li><li>链式：loader 可以被链式调用意味着不一定要输出 JavaScript。只要下一个 loader 可以处理这个输出，这个 loader 就可以返回任意类型的模块。</li><li>模块化：保证输出模块化。loader 生成的模块与普通模块遵循相同的设计原则。</li><li>无状态：确保 loader 在不同模块转换之间不保存状态。每次运行都应该独立于其他编译模块以及相同模块之前的编译结果。</li><li><p>loader工具库：</p><ul><li><a href="https://github.com/webpack/loader-utils" target="_blank" rel="noopener">loader-utils</a></li><li><a href="https://github.com/webpack-contrib/schema-utils" target="_blank" rel="noopener">schema-utils</a></li><li><p>loader.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getOptions &#125; <span class="keyword">from</span> <span class="string">'loader-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> validateOptions <span class="keyword">from</span> <span class="string">'schema-utils'</span>;</span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">  type: <span class="string">'object'</span>,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      type: <span class="string">'string'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = getOptions(<span class="keyword">this</span>);</span><br><span class="line">  validateOptions(schema, options, <span class="string">'Example Loader'</span>);</span><br><span class="line">  <span class="comment">// 对资源应用一些转换……</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`export default <span class="subst">$&#123; <span class="built_in">JSON</span>.stringify(source) &#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* loader 依赖: 必须使用 addDependency 方法显式声明<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path from <span class="string">'path'</span>;</span><br><span class="line"><span class="function">export <span class="keyword">default</span> <span class="title">function</span><span class="params">(source)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="keyword">this</span>.async();</span><br><span class="line">  <span class="keyword">var</span> headerPath = path.resolve(<span class="string">'header.js'</span>);</span><br><span class="line">  <span class="keyword">this</span>.addDependency(headerPath);</span><br><span class="line">  fs.readFile(headerPath, <span class="string">'utf-8'</span>, function(err, header) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> callback(err);</span><br><span class="line">    callback(<span class="keyword">null</span>, header + <span class="string">"\n"</span> + source);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><ul><li>模块依赖<ul><li>通过把它们转化成 require 语句。</li><li>使用 this.resolve 函数解析路径</li></ul></li><li>通用代码<ul><li>在 loader 中创建一个运行时文件，并生成 require 语句以引用该共享模块</li></ul></li><li>绝对路径<ul><li>loader-utils 中的 stringifyRequest 方法，可以将绝对路径转化为相对路径。</li></ul></li><li>同等依赖<ul><li>package.json中指定peerDependency的值</li></ul></li></ul><h2 id="处理二进制数据"><a href="#处理二进制数据" class="headerlink" title="处理二进制数据"></a><a name="luz9ak"></a>处理二进制数据</h2><p>在默认的情况下，Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串。<br>但有些场景下 Loader 不是处理文本文件，而是处理二进制文件，例如 file-loader，就需要 Webpack 给 Loader 传入二进制格式的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = function(source) &#123;</span><br><span class="line">    <span class="comment">// 在 exports.raw === true 时，Webpack 传给 Loader 的 source 是 Buffer 类型的</span></span><br><span class="line">    source <span class="keyword">instanceof</span> Buffer === <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// Loader 返回的类型也可以是 Buffer 类型的</span></span><br><span class="line">    <span class="comment">// 在 exports.raw !== true 时，Loader 也可以返回 Buffer 类型的结果</span></span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 通过 exports.raw 属性告诉 Webpack 该 Loader 是否需要二进制数据</span></span><br><span class="line"><span class="comment">// 最关键的代码是最后一行,没有该行 Loader 只能拿到字符串。 </span></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span>.raw = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><h2 id="缓存加速"><a href="#缓存加速" class="headerlink" title="缓存加速"></a><a name="cn3bqu"></a>缓存加速</h2><p>在有些情况下，有些转换操作需要大量计算非常耗时，如果每次构建都重新执行重复的转换操作，构建将会变得非常缓慢。<br>为此，Webpack 会默认缓存所有 Loader 的处理结果，也就是说在需要被处理的文件或者其依赖的文件没有发生变化时，<br>是不会重新调用对应的 Loader 去执行转换操作的。</p><p>如果你想让 Webpack 不缓存该 Loader 的处理结果，可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = function(source) &#123;</span><br><span class="line">  <span class="comment">// 关闭该 Loader 的缓存功能</span></span><br><span class="line">  <span class="keyword">this</span>.cacheable(<span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="this-callback"><a href="#this-callback" class="headerlink" title="this.callback"></a><a name="lt9yhq"></a>this.callback</h2><p>this.callback 是 Webpack 给 Loader 注入的 API，以方便 Loader 和 Webpack 之间通信。<br>this.callback 的详细使用方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.callback(</span><br><span class="line">    <span class="comment">// 当无法转换原内容时，给 Webpack 返回一个 Error</span></span><br><span class="line">    err: Error | <span class="keyword">null</span>,</span><br><span class="line">    <span class="comment">// 原内容转换后的内容</span></span><br><span class="line">    content: string | Buffer,</span><br><span class="line">    <span class="comment">// 用于把转换后的内容得出原内容的 Source Map，方便调试</span></span><br><span class="line">    sourceMap?: SourceMap,</span><br><span class="line">    <span class="comment">// 如果本次转换为原内容生成了 AST 语法树，可以把这个 AST 返回，</span></span><br><span class="line">    <span class="comment">// 以方便之后需要 AST 的 Loader 复用该 AST，以避免重复生成 AST，提升性能</span></span><br><span class="line">    abstractSyntaxTree?: AST</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="其他Loader-API"><a href="#其他Loader-API" class="headerlink" title="其他Loader API"></a><a name="vaz3xa"></a>其他Loader API</h2><ul><li><code>this.context</code>：当前处理文件的所在目录，假如当前 Loader 处理的文件是 /src/main.js，则 this.context 就等于 /src。</li><li><code>this.resource</code>：当前处理文件的完整请求路径，包括 querystring，例如 /src/main.js?name=1。</li><li><code>this.resourcePath</code>：当前处理文件的路径，例如 /src/main.js。</li><li><code>this.resourceQuery</code>：当前处理文件的 querystring。</li><li><code>this.target</code>：等于 Webpack 配置中的 Target</li><li><code>this.loadModule</code>：但 Loader 在处理一个文件时，如果依赖其它文件的处理结果才能得出当前文件的结果时，<br>  就可以通过 this.loadModule(request: string, callback: function(err, source, sourceMap, module)) 去获得 request 对应文件的处理结果。</li><li><code>this.resolve</code>：像 require 语句一样获得指定文件的完整路径，使用方法为 resolve(context: string, request: string, callback: function(err, result: string))。</li><li><code>this.addDependency</code>：给当前处理文件添加其依赖的文件，以便再其依赖的文件发生变化时，会重新调用 Loader 处理该文件。使用方法为 addDependency(file: string)。</li><li><code>this.addContextDependency</code>：和 addDependency 类似，但 addContextDependency 是把整个目录加入到当前正在处理文件的依赖中。使用方法为 addContextDependency(directory: string)。</li><li><code>this.clearDependencies</code>：清除当前正在处理文件的所有依赖，使用方法为 clearDependencies()。</li><li><code>this.emitFile</code>：输出一个文件，使用方法为 emitFile(name: string, content: Buffer|string, sourceMap: {…})。</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="6wvfwr"></a>资源</h2><p><a href="https://github.com/atian25/blog/issues/17" target="_blank" rel="noopener">npm link</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器兼容性</title>
    <link href="http://lulustyle.net/2018/12/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    <id>http://lulustyle.net/2018/12/22/浏览器兼容性/</id>
    <published>2018-12-22T07:14:00.000Z</published>
    <updated>2018-12-27T01:35:19.741Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 业务场景解决方案</span></span></p><hr><h2 id="IE9"><a href="#IE9" class="headerlink" title="IE9"></a><a name="qew1cd"></a>IE9</h2><ul><li>不支持flex布局</li><li>css行数过多会不加载，需要用CSSSplitWebpackPlugin分割</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CSSSplitWebpackPlugin(&#123;</span><br><span class="line">    size: <span class="number">4000</span>,</span><br><span class="line">    filename:utils.assetsPath(<span class="string">'css/[name]-[part].[ext]'</span>),</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><ul><li>不支持websocket</li><li>vue框架:<ul><li>刷新多次才显示界面</li><li>滚动条 | 下拉框箭头 | 展开箭头 | 排序箭头</li><li>消息x号不居中</li><li>列表获得焦点样式,没有边框线</li></ul></li></ul><h2 id="IE-JS兼容性"><a href="#IE-JS兼容性" class="headerlink" title="IE JS兼容性"></a><a name="3hhckx"></a>IE JS兼容性</h2><ul><li><strong>事件绑定方法</strong>为attachEvent而不是通用的addEventListener</li><li><strong>事件捕获方式</strong>由内而外而不是由外而内，一般将IE的标准定为标准</li><li><strong>事件获取目标元素</strong>event.srcElement而不是event.target</li><li><strong>ajax</strong>是activeXObject</li><li><strong>innerHtml</strong>IE中不能操作tr的innerHtml</li><li><p><strong>获取DOM节点</strong></p><ul><li>IE: parentElement | parentElement.children</li><li>other: parentNode | parentNode.childNodes</li></ul></li></ul><h2 id="在HTML中禁止IE缓存"><a href="#在HTML中禁止IE缓存" class="headerlink" title="在HTML中禁止IE缓存"></a><a name="y6mggg"></a>在HTML中禁止IE缓存</h2><p>IE浏览器提供的ajax对象在发送get请求时，会查看请求地址<br>是否访问过，如果访问过，则显示第一次访问的结果（也就是说，<br>会将第一次访问的结果缓存下来）</p><ul><li>在Head里添加禁止使用缓存的代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将所有的ajax调用都改为post方法</li><li>在请求地址后面添加随机数或者时间戳,<br>  比如xhr.open(‘get’,’<a href="http://luck.do?&#39;+Math.random(" target="_blank" rel="noopener">luck.do?’+Math.random(),true</a>,true));</li></ul><h2 id="兼容性测试工具"><a href="#兼容性测试工具" class="headerlink" title="兼容性测试工具"></a><a name="42rrru"></a>兼容性测试工具</h2><ul><li><a href="https://browserling.com/" target="_blank" rel="noopener">browserling</a></li><li><a href="https://blog.csdn.net/cooldiok/article/details/79134245" target="_blank" rel="noopener">在HTML中禁止IE缓存</a></li></ul><h2 id="overflow-兼容性问题"><a href="#overflow-兼容性问题" class="headerlink" title="overflow 兼容性问题"></a><a name="813der"></a>overflow 兼容性问题</h2><p>chrome: 容器可滚动，padding-bottom 也算在滚动尺寸之内<br>IE和 Firefox 会忽略 padding-bottom<br>同时会导致 scrollHeight 值不一样<br><strong>解决方案</strong>：如果需要留有间隙，则使用透明边框</p><h2 id="WebP图片兼容性处理"><a href="#WebP图片兼容性处理" class="headerlink" title="WebP图片兼容性处理"></a><a name="850nhq"></a>WebP图片兼容性处理</h2><p><a href="https://github.com/RicardoCao-Biker/RICO-BLOG/issues/9" target="_blank" rel="noopener">https://github.com/RicardoCao-Biker/RICO-BLOG/issues/9</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域问题解决方案</title>
    <link href="http://lulustyle.net/2018/12/22/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://lulustyle.net/2018/12/22/跨域问题解决方案/</id>
    <published>2018-12-22T07:07:34.000Z</published>
    <updated>2018-12-27T01:35:19.742Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 业务场景解决方案</span></span></p><hr><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a><a name="06xhzu"></a>什么是跨域</h2><p>由于浏览器的同源策略，导致只要协议、域名、端口有任何一个不同，都被当作是不同的域，从而导致了跨域访问的需求</p><ul><li>服务器端不存在跨域</li><li>不能通过ajax的方法去请求不同源中的文档</li><li>不同域的框架之间是不能进行JS交互操作的，不同的框架之间是可以获取window对象的，但是无法获取响应的属性和方法</li><li>如果是协议和端口造成的跨域问题“前台”是无能为力的</li><li>在跨域问题上，域仅仅是通过“URL首部”来识别，而不会去尝试判断相同的IP地址对应着两个域或两个域是否在同一个IP上<ul><li>URL首部：window.location.protocol + window.location.host</li></ul></li><li>针对接口的请求</li><li>针对Dom的查询</li></ul><h2 id="跨域的方法"><a href="#跨域的方法" class="headerlink" title="跨域的方法"></a><a name="18m1wr"></a>跨域的方法</h2><p>双向通信：即两个iframe,页面与iframe或是页面与页面之间<br>单向跨域：一般用来获取数据</p><h3 id="iframe-document-domain"><a href="#iframe-document-domain" class="headerlink" title="iframe + document.domain"></a><a name="mfxbhl"></a>iframe + document.domain</h3><p>将两个页面的 document.domain 都设成相同的域名(只能设置成自身或更高一级的父域，且主域必须相同)</p><h3 id="ifame-location-hash"><a href="#ifame-location-hash" class="headerlink" title="ifame + location.hash"></a><a name="x0h5oq"></a>ifame + location.hash</h3><p>父窗口可以对iframe进行URL读写，iframe也可以读写父窗口的URL<br>hash一般用于浏览器锚点定位，Server端并不关心这部分，应该说HTTP请求过程中不会携带hash，所以这部分的修改不会产生HTTP请求，但是会产生浏览器历史记录。</p><h3 id="H5的postMessage"><a href="#H5的postMessage" class="headerlink" title="H5的postMessage"></a><a name="vva3gy"></a>H5的postMessage</h3><p>IE8+</p><ul><li>发送信息的postMessage事件: otherWindow.postMessage(message, targetOrigin)<ul><li>otherWindow: 目标窗口，也就是给哪个window发消息，是window.frames属性的成员或者window.open创建的窗口</li><li>message：要发送的消息，String | Object</li><li>targetOrigin: 限定消息接收范围，不限制请使用“*”</li></ul></li><li>监听接收信息的message事件</li><li>既可以处理Get请求也可以处理POST请求</li></ul><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><a name="mpuipv"></a>JSONP</h3><p>通过script标签引入的JS是不受同源策略的限制的，可以通过script标签引入一个文件，此文件必须返回一个JS函数的调用(要和后端约定好)<br>只能实现GET请求<br>jquery的getJSON()会自动判断是否跨域，不跨域就调用普通的ajax()；<br>跨域则会以异步加载JS文件的形式来调用JSONP的回调函数</p><p>JSONP优点：</p><ul><li>不像XHR对象实现Ajax请求那样受到同源策略的限制</li><li>兼容性更好，不需要XHR或者ActiveX的支持</li><li>在请求完毕后可以通过调用callback的方式回传结果</li></ul><p>JSONP缺点：</p><ul><li>只支持GET而不支持POST等其它类型的HTTP请求</li><li>只支持跨域HTTP请求的情况，不能解决不同域的两个页面之间如何进行JS调用的问题</li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a><a name="41twgo"></a>CORS</h3><p>IE10+</p><p>CORS：</p><ul><li>使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。</li><li>实现CORS通信的关键是服务器，只要服务器实现了CORS接口，就可以跨源通信。</li><li>服务器端对于CORS的支持，主要通过设置Access-Control-Allow-Origin来进行。</li><li>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头部信息，有时还会多出一次附加请求，但用户不会有感觉。</li></ul><p>CORS与JSONP相比，无疑更为先进、方便和可靠：</p><ul><li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求</li><li>使用CORS，开发者可以使用普通的XHR发起请求和获得数据，比起JSONP有更好的错误处理</li><li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS</li></ul><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a><a name="tauvxb"></a><a href="http://window.name" target="_blank" rel="noopener">window.name</a></h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a name="6ci8gu"></a>其他</h2><ul><li>中间件跨域</li><li>服务器代理跨域</li><li>Flash URLLoader跨域</li><li>动态创建script标签</li><li>websocket协议支持跨域</li></ul><h2 id="遇到的跨域问题"><a href="#遇到的跨域问题" class="headerlink" title="遇到的跨域问题"></a><a name="zsllcb"></a>遇到的跨域问题</h2><h3 id="单点登陆嵌入子系统页面"><a href="#单点登陆嵌入子系统页面" class="headerlink" title="单点登陆嵌入子系统页面"></a><a name="9a4qqp"></a>单点登陆嵌入子系统页面</h3><p>通过 iframe + document.domain 的方式解决</p><h3 id="icon-font-放到GitHub上导致跨域问题"><a href="#icon-font-放到GitHub上导致跨域问题" class="headerlink" title="icon-font 放到GitHub上导致跨域问题"></a><a name="hk2blm"></a>icon-font 放到GitHub上导致跨域问题</h3><p>通过将icon-font 的 url 改成 base64 的形式直接嵌入到页面中</p><p>这样会产生跨域问题<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'idoll-icon-online'</span>;</span><br><span class="line">  <span class="attribute">src</span>:  url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-online.eot?67rfls'</span>);</span><br><span class="line">  <span class="attribute">src</span>:  url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-online.eot?67rfls#iefix'</span>) format(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">    url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-online.ttf?67rfls'</span>) format(<span class="string">'truetype'</span>),</span><br><span class="line">    url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-online.woff?67rfls'</span>) format(<span class="string">'woff'</span>),</span><br><span class="line">    url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-online.svg?67rfls#idoll-icon-online'</span>) format(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加了base64的方式便不会跨域了<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;<span class="attribute">font-family</span>: <span class="string">"idoll-icon-pro2"</span>;</span><br><span class="line">  <span class="attribute">src</span>: url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-pro2.eot?t=1544695441349'</span>); <span class="comment">/* IE9*/</span></span><br><span class="line">  <span class="attribute">src</span>: url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-pro2.eot?t=1544695441349#iefix'</span>) format(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">  url(<span class="string">'data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAnUAAsAAAAAD6AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADMAAABCsP6z7U9TLzIAAAE8AAAARAAAAFY870h2Y21hcAAAAYAAAACNAAACCoOE66ZnbHlmAAACEAAABWMAAAg0ycE3gmhlYWQAAAd0AAAALwAAADYTj+MfaGhlYQAAB6QAAAAcAAAAJAfeA45obXR4AAAHwAAAAA8AAAA0NAAAAGxvY2EAAAfQAAAAHAAAABwMfA5MbWF4cAAAB+wAAAAfAAAAIAEcAGluYW1lAAAIDAAAAUUAAAJtPlT+fXBvc3QAAAlUAAAAfwAAAMqOQWaEeJxjYGRgYOBikGPQYWB0cfMJYeBgYGGAAJAMY05meiJQDMoDyrGAaQ4gZoOIAgCKIwNPAHicY2BkYWCcwMDKwMHUyXSGgYGhH0IzvmYwYuRgYGBiYGVmwAoC0lxTGByeVT5rYW7438AQw9zA0AAUZgTJAQDw3gzgeJztkckRAjEQA9usWa4NhQAIiBcZLPcVCNFNGovGepAErmpVjTz2QwLmQCe2okI5UMizl1ua37FufmXXdmr68Z4m6ZiquTZdMdN21Z89C71asmHQRc//DE0/vylG09I8GiVInIyyJM4mG4qLyazjarK9uBllTtyN0iceJtuLp1EjxMuoG7VoGL6PiyuHAAAAeJytVc1vE0cUn/fW9mY3eJ3dtb3xZ+y1vSZANyRer5VAyfIRUCitgFYt4EpNK0BUJCr0lnDAwKGoJ6QoUiVoi1Rx4Q9AvRQMUg699FiJ9FCK1AMVlVBvVPW4b+wQQY9t5d15nvcx83ufy0KMddtSWwrYIMuyCtvNGGgg58HaBQ0XTA1sF71dOJHHeATsSDw54XsOsceQFGRStfyk3LNo7BIPsrudcLhzt7ce8q9+cfXs5OTZPuH3dcuyLasWTZqImFFC6T1pKIdk2QTIm2lHDRlS8MKY1s6O+oaxIPCbMLct/hHOIODx28cgqmgaepu3z2/bYmPIswZGmfSST3G2/VWP5IlkPGI7nk8+yBGnSkzfkYlMC60RSPqNZOQVJ+72QR8crKTNPIApy+ESpHdnQkqGnDCTUVV/BfStdYxbLS+E9pZt89s3e6hp6iY4dvs4oZ7BSA8jY1KLSIHV2SRhtCM5KNY9R9ASQdEJcZHQ6S5US8SXJ/zXoZYo1msJkYTXoUgU9KKONzWjy4ys0cqUAcoZXKctQ9OMVqfVIhEwg7tI1xlaoaAZtJJCp71uEBAlbpvYrVZfTCtn0OItAbOH9XN8wpIszUoCqwyR+AjkoTbRIERF8L0qOFIVLLCdMWhYGmAzqvKdqvplbn8lGoX7/A4cVFX+h7rjMQz9wj9Ou8ZnJx6bLj4Raml1JZdFCOANNaWCrHa+X4PYQ/6VaVxsrhlmD0P3uXQTVylek+wEY5RKCg74lE4ZNMyjyKDYxWjnkPSFLJLHjb+O5XgNsvNctCMxEHUwTdtecZPYXi1XQqMOyEraVPjzXAEz9QOHZ3NcTZlKx5k7M+c7WAZTFeKnQ+DU9Bcb5+QPqgqOYZpl13ONZWGxnJl5a8bP5TJ8TU3vqcyd+aAKEcVMqfzP/Ozh/X4GCzmumGmFO6OhysXqSYdOM9Mq/12vOTAEcaW3KWNRTStQNdyaWzZNY1mwlzPZbGPmzZksX1NEekK9HLXxZq/mHTbxj6p3wRMxiFTGqZxIMJ4Y78vGw8QgSjtKGvNnAWb9/popl/1yGW5NP11ZeTrdX3mwtDo1tbrUW5Ft6Pqz90Bo++Xg0g3EG5fg8nXE65d/hsVTpxcBFk+fWhQQwz2cAbYpozJLsBTLEdJioijTC0W9tFH2pXBNL5n0wkVAzu8hlTIy3gqoYkGUeMAfBUEroLOCQsDnRLH26xlaQZcB64qroD8L4Bu6i0HdpTaTx+MalsQoq43TRSSM5+NA8+VQLJGIURfThTHTjB2iqZPIJ8J/fbcR3wKuMIWZLMNG6LSqY8fAavieXKUIU+37XliOJKexKpzBn/ZR2qzzlrL3RDga5r+eh0yYH8+iMnBBOlfAoNPGA/tUNfmppab2N0OwrrLpxwuyAlk493WBrsR+Xqn897L3+zlN0BtPWhSnRK1eEuPZb9BvBzj1fh7jcm3CEgrk51YgJWJ7DmGskv8SYRZTfBp0MUbquiUm+hg4iAvXpHfmsTSSCipBoTDlDg9b1bo6+NogLhw5soCDo9FNtYo1POxOFQrB22eF5nRZurYQVZuiJG2aMxXRDU1VYsTG6NJ7Y4dHUsUIBmQTTFnOAOTto/OI80ftPA5ULGK6wwFqS+/2FMPSwjX+rdIU7VfiD8Uggi2O6JCm0o9Ft/v/xiKS0CmLYpaJiNCXjaKje/8+Fp9oht0PQaoflIrxn2JhaHzNVuPiMHFmXK3AqGb0Z3L3kfShVKKZnGI2RUNMYNkpFV/+dOyEilUyi3oxQZyaNKfwZ1E9FOYvD/4uu3Kl3WmD6Ks2PIuqMDQoCWknWG+ndnjgzhXO8MEDYjD2N29KiC4AeJxjYGRgYADiKYu+r4vnt/nKwM3CAAI3LPwnIuj/B1gYmB2AXA4GJpAoAEB+CnwAeJxjYGRgYG7438AQw8IAAkCSkQEV8AIARxMCdnicY2FgYGAhEQMABeQANQAAAAAAAGoAvAESAVQB5AI4AnAClALQA1YD3AQaeJxjYGRgYOBliGVgZQABJiDmAkIGhv9gPgMAEzEBhgB4nGWPTU7DMBCFX/oHpBKqqGCH5AViASj9EatuWFRq911036ZOmyqJI8et1ANwHo7ACTgC3IA78EgnmzaWx9+8eWNPANzgBx6O3y33kT1cMjtyDRe4F65TfxBukF+Em2jjVbhF/U3YxzOmwm10YXmD17hi9oR3YQ8dfAjXcI1P4Tr1L+EG+Vu4iTv8CrfQ8erCPuZeV7iNRy/2x1YvnF6p5UHFockikzm/gple75KFrdLqnGtbxCZTg6BfSVOdaVvdU+zXQ+ciFVmTqgmrOkmMyq3Z6tAFG+fyUa8XiR6EJuVYY/62xgKOcQWFJQ6MMUIYZIjK6Og7VWb0r7FDwl57Vj3N53RbFNT/c4UBAvTPXFO6stJ5Ok+BPV8bUnV0K27LnpQ0kV7NSRKyQl7WtlRC6gE2ZVeOEXpc0Yk/KGdI/wAJWm7IAAAAeJxtjM0KwjAQhHfqT9vYKj5IDj5SSLYSWJIQKuLbyyY3cS473ww7NFCXof9aMeCAI044Y8SEGQYXLFhxpXup2ca0Zetj9cI2336SRdk74RRcnRsIuzp1F8uohj9s9AYW3vuLZBdiej5aXzi1/lU0bn3I76TQhrYoTPQFVnUylgA='</span>) format(<span class="string">'woff'</span>),</span><br><span class="line">  url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-pro2.ttf?t=1544695441349'</span>) format(<span class="string">'truetype'</span>), <span class="comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+*/</span></span><br><span class="line">  url(<span class="string">'@&#123;icon-url&#125;/idoll-icon-pro2.svg?t=1544695441349#iconfont'</span>) format(<span class="string">'svg'</span>); <span class="comment">/* iOS 4.1- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="ip6yxp"></a>资源</h2><p><a href="https://mp.weixin.qq.com/s/NOmsbKZsryTUONQj2gBFIA" target="_blank" rel="noopener">前端跨域知识总结</a><br><a href="https://www.cnblogs.com/ahole/p/5885122.html" target="_blank" rel="noopener">最直白的跨域访问原理</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">浏览器的同源策略</a><br><a href="https://mp.weixin.qq.com/s/Ldh6rkcimZ1ppHPHK3KeUQ" target="_blank" rel="noopener">不要再问我跨域的问题了</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6|ES7|ES8</title>
    <link href="http://lulustyle.net/2018/12/22/ES6%7CES7%7CES8/"/>
    <id>http://lulustyle.net/2018/12/22/ES6|ES7|ES8/</id>
    <published>2018-12-22T07:03:14.000Z</published>
    <updated>2018-12-27T01:35:19.744Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 底层原理及基础</span></span></p><hr><h1 id="ES6常用新特性"><a href="#ES6常用新特性" class="headerlink" title="ES6常用新特性"></a><a name="gacxmv"></a>ES6常用新特性</h1><h2 id="let-amp-amp-const"><a href="#let-amp-amp-const" class="headerlink" title="let &amp;&amp; const"></a><a name="cud9cv"></a>let &amp;&amp; const</h2><p>let 命令也用于变量声明，但是作用域为局部<br>const用于声明一个常量，设定后值不会再改变</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a><a name="o9fwtq"></a>箭头函数</h2><p>箭头函数是 ES6 中新的函数定义形式，function name(arg1, arg2) {…}可以使用(arg1, arg2) =&gt; {…}来定义。示例如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS 普通函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index)</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index)</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中this是全局变量的问题（没有独立的作用域），看如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>)  <span class="comment">// &#123;a: 100&#125; ，该作用域下的 this 的真实的值</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="comment">// 普通 JS</span></span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'js'</span>, <span class="keyword">this</span>)  <span class="comment">// window 。普通函数，这里打印出来的是全局变量，令人费解</span></span><br><span class="line">      <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'es6'</span>, <span class="keyword">this</span>)  <span class="comment">// &#123;a: 100&#125; 。箭头函数，这里打印的就是父作用域的 this</span></span><br><span class="line">      <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a><a name="zgeiwz"></a>解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><p>对象的解构赋值：获取对象的多个属性并且使用一条语句将它们赋给多个变量<br>  var {<br>  StyleSheet,<br>  Text,<br>  View<br>  } = React;</p><p>  等同于<br>  var StyleSheet = React.StyleSheet;<br>  var Text = React.Text;<br>  var View = React.Text;<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 模块化 import导入模块、export导出模块</span><br><span class="line">如果只是输出一个唯一的对象，使用export default即可，代码如下  </span><br><span class="line">```js</span><br><span class="line">// 创建 util1.js 文件，内容如</span><br><span class="line">export default &#123;</span><br><span class="line"> a: 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建 index.js 文件，内容如</span><br><span class="line">import obj from &apos;./util1.js&apos;</span><br><span class="line">console.log(obj)</span><br></pre></td></tr></table></figure></p><p>  如果想要输出许多个对象，就不能用<code>default</code>了，且<code>import</code>时候要加<code>{...}</code>，代码如下<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 util2.js 文件，内容如</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="string">'fn1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="string">'fn2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 index.js 文件，内容如</span></span><br><span class="line"><span class="keyword">import</span> &#123; fn1, fn2 &#125; <span class="keyword">from</span> <span class="string">'./util2.js'</span></span><br><span class="line">fn1()</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure></p><h2 id="类class"><a href="#类class" class="headerlink" title="类class"></a>类class</h2><p>  class 其实一直是 JS 的关键字（保留字），但是一直没有正式使用，直到 ES6 。 ES6 的 class 就是取代之前构造函数初始化对象的形式，从语法上更加符合面向对象的写法。例如：  </p><p>  JS 构造函数的写法<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MathHandle</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  MathHandle.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(m.add())</span><br><span class="line"></span><br><span class="line">用 ES6 <span class="class"><span class="keyword">class</span> 的写法</span></span><br><span class="line"><span class="class">```<span class="title">js</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MathHandle</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add())</span><br></pre></td></tr></table></figure></p><p>注意以下几点，全都是关于 class 语法的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、class 是一种新的语法形式，是class Name &#123;...&#125;这种形式，和函数的写法完全不一样</span><br><span class="line">2、两者对比，构造函数函数体的内容要放在 class 中的constructor函数中，constructor即构造器，初始化实例时默认执行</span><br><span class="line">3、class 中函数的写法是add() &#123;...&#125;这种形式，并没有function关键字</span><br></pre></td></tr></table></figure></p><p>使用 class 来实现继承就更加简单了，至少比构造函数实现继承简单很多。看下面例子<br>JS 构造函数实现继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'animal eat'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"><span class="comment">// 哈士奇</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog()</span><br></pre></td></tr></table></figure></p><p>ES6 class 实现继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="keyword">super</span>(name)</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> say`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)</span><br><span class="line">dog.say()</span><br><span class="line">dog.eat()</span><br></pre></td></tr></table></figure></p><p>注意以下两点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、使用extends即可实现继承，更加符合经典面向对象语言的写法，如 Java</span><br><span class="line">2、子类的constructor一定要执行super()，以调用父类的constructor</span><br></pre></td></tr></table></figure></p><h2 id="Set-和-Map"><a href="#Set-和-Map" class="headerlink" title="Set 和 Map"></a><a name="pq8yqx"></a>Set 和 Map</h2><blockquote><p>题目：ES6 中新增的数据类型有哪些？</p></blockquote><p>Set 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构，目前尚未被大规模使用，但是作为前端程序员，提前了解是必须做到的。先总结一下两者最关键的地方：<br>1、Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复<br>2、Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a><a name="0h8vbs"></a>Set</h4><p>Set 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过add添加元素，元素不能重复，重复的会被忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set) <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> set.add(item));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4 8</span></span><br></pre></td></tr></table></figure><p>Set 实例的属性和方法有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、size：获取元素数量。</span><br><span class="line">2、add(value)：添加元素，返回 Set 实例本身。</span><br><span class="line">3、delete(value)：删除元素，返回一个布尔值，表示删除是否成功。</span><br><span class="line">4、has(value)：返回一个布尔值，表示该值是否是 Set 实例的元素。</span><br><span class="line">5、clear()：清除所有元素，没有返回值。</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>); <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">s.size <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">2</span>);</span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.clear();</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>Set 实例的遍历，可使用如下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、keys()：返回键名的遍历器。</span><br><span class="line">2、values()：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys()和values()返回结果一致。</span><br><span class="line">3、entries()：返回键值对的遍历器。</span><br><span class="line">4、forEach()：使用回调函数遍历每个成员</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["aaa", "aaa"]</span></span><br><span class="line"><span class="comment">// ["bbb", "bbb"]</span></span><br><span class="line"><span class="comment">// ["ccc", "ccc"]</span></span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// aaa : aaa</span></span><br><span class="line"><span class="comment">// bbb : bbb</span></span><br><span class="line"><span class="comment">// ccc : ccc</span></span><br></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a><a name="88irup"></a>Map</h4><p>Map 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。<br>  const map = new Map();<br>  const obj = {p: ‘Hello World’};</p><p>  map.set(obj, ‘OK’)<br>  map.get(obj) // “OK”</p><p>  map.has(obj) // true<br>  map.delete(obj) // true<br>  map.has(obj) // false<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">需要使用new Map()初始化一个实例，下面代码中set get has delete顾名即可思义（下文也会演示）。其中，map.set(obj, &apos;OK&apos;)就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过map.get(obj)正确获取了</span><br><span class="line"></span><br><span class="line">Map 实例的属性和方法如下：</span><br><span class="line"></span><br><span class="line"> 1、size：获取成员的数量</span><br><span class="line"> 2、set：设置成员 key 和 value</span><br><span class="line"> 3、get：获取成员属性值</span><br><span class="line"> 4、has：判断成员是否存在</span><br><span class="line"> 5、delete：删除成员</span><br><span class="line"> 6、clear：清空所有</span><br><span class="line"> </span><br><span class="line">```js </span><br><span class="line">const map = new Map();</span><br><span class="line">map.set(&apos;aaa&apos;, 100);</span><br><span class="line">map.set(&apos;bbb&apos;, 200);</span><br><span class="line"></span><br><span class="line">map.size // 2</span><br><span class="line"></span><br><span class="line">map.get(&apos;aaa&apos;) // 100</span><br><span class="line"></span><br><span class="line">map.has(&apos;aaa&apos;) // true</span><br><span class="line"></span><br><span class="line">map.delete(&apos;aaa&apos;)</span><br><span class="line">map.has(&apos;aaa&apos;) // false</span><br><span class="line"></span><br><span class="line">map.clear()</span><br></pre></td></tr></table></figure></p><p>  Map 实例的遍历方法有：</p><p>   1、keys()：返回键名的遍历器。<br>   2、values()：返回键值的遍历器。<br>   3、entries()：返回所有成员的遍历器。<br>   4、forEach()：遍历 Map 的所有成员</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'aaa'</span>, <span class="number">100</span>);</span><br><span class="line">map.set(<span class="string">'bbb'</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "aaa"</span></span><br><span class="line"><span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa 100</span></span><br><span class="line"><span class="comment">// bbb 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa 100</span></span><br><span class="line"><span class="comment">// bbb 200</span></span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>    Promise是 CommonJS 提出来的这一种规范，有多个版本，在 ES6 当中已经纳入规范，原生支持 Promise 对象，非 ES6 环境可以用类似 Bluebird、Q 这类库来支持。<br>    Promise 可以将回调变成链式调用写法，流程更加清晰，代码更加优雅。<br>    简单归纳下 Promise：三个状态、两个过程、一个方法，快速记忆方法：3-2-1<br>    三个状态：pending、fulfilled、rejected</p><p>  两个过程：<br>   1、pending→fulfilled（resolve）<br>   2、pending→rejected（reject）<br>  当然还有其他概念，如catch、 Promise.all/race，这里就不展开了  </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">     url : <span class="string">"xxxxx"</span>,</span><br><span class="line">     type : <span class="string">"post"</span></span><br><span class="line">     success(res)&#123;</span><br><span class="line">       resolve(res)</span><br><span class="line">     &#125;,</span><br><span class="line">     error(err)&#123;</span><br><span class="line">       reject（err）</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  &#125;,()=&gt;&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">  ES6常用新特性</span><br><span class="line"></span><br><span class="line">## &lt;a name="778mgs"&gt;&lt;/a&gt;let &amp;&amp; const</span><br><span class="line">  <span class="keyword">let</span> 命令也用于变量声明，但是作用域为局部</span><br><span class="line"><span class="keyword">const</span>用于声明一个常量，设定后值不会再改变</span><br><span class="line"></span><br><span class="line">## &lt;a name="96mmga"&gt;&lt;/a&gt;箭头函数</span><br><span class="line">箭头函数是 ES6 中新的函数定义形式，<span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">arg1, arg2</span>) </span>&#123;...&#125;可以使用(arg1, arg2) =&gt; &#123;...&#125;来定义。示例如下：</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">// JS 普通函数</span></span><br><span class="line"><span class="string">var arr = [1, 2, 3]</span></span><br><span class="line"><span class="string">arr.map(function (item) &#123;</span></span><br><span class="line"><span class="string">  console.log(index)</span></span><br><span class="line"><span class="string">  return item + 1</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// ES6 箭头函数</span></span><br><span class="line"><span class="string">const arr = [1, 2, 3]</span></span><br><span class="line"><span class="string">arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="string">  console.log(index)</span></span><br><span class="line"><span class="string">  return item + 1</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中this是全局变量的问题（没有独立的作用域），看如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>)  <span class="comment">// &#123;a: 100&#125; ，该作用域下的 this 的真实的值</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="comment">// 普通 JS</span></span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'js'</span>, <span class="keyword">this</span>)  <span class="comment">// window 。普通函数，这里打印出来的是全局变量，令人费解</span></span><br><span class="line">      <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'es6'</span>, <span class="keyword">this</span>)  <span class="comment">// &#123;a: 100&#125; 。箭头函数，这里打印的就是父作用域的 this</span></span><br><span class="line">      <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a><a name="4n0gei"></a>解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><p>对象的解构赋值：获取对象的多个属性并且使用一条语句将它们赋给多个变量<br>  var {<br>  StyleSheet,<br>  Text,<br>  View<br>  } = React;</p><p>  等同于<br>  var StyleSheet = React.StyleSheet;<br>  var Text = React.Text;<br>  var View = React.Text;<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 模块化 import导入模块、export导出模块</span><br><span class="line">如果只是输出一个唯一的对象，使用export default即可，代码如下  </span><br><span class="line">```js</span><br><span class="line">// 创建 util1.js 文件，内容如</span><br><span class="line">export default &#123;</span><br><span class="line"> a: 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建 index.js 文件，内容如</span><br><span class="line">import obj from &apos;./util1.js&apos;</span><br><span class="line">console.log(obj)</span><br></pre></td></tr></table></figure></p><p>  如果想要输出许多个对象，就不能用<code>default</code>了，且<code>import</code>时候要加<code>{...}</code>，代码如下<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 util2.js 文件，内容如</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="string">'fn1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="string">'fn2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 index.js 文件，内容如</span></span><br><span class="line"><span class="keyword">import</span> &#123; fn1, fn2 &#125; <span class="keyword">from</span> <span class="string">'./util2.js'</span></span><br><span class="line">fn1()</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure></p><h2 id="类class-1"><a href="#类class-1" class="headerlink" title="类class"></a>类class</h2><p>  class 其实一直是 JS 的关键字（保留字），但是一直没有正式使用，直到 ES6 。 ES6 的 class 就是取代之前构造函数初始化对象的形式，从语法上更加符合面向对象的写法。例如：  </p><p>  JS 构造函数的写法<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MathHandle</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  MathHandle.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(m.add())</span><br><span class="line"></span><br><span class="line">用 ES6 <span class="class"><span class="keyword">class</span> 的写法</span></span><br><span class="line"><span class="class">```<span class="title">js</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MathHandle</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add())</span><br></pre></td></tr></table></figure></p><p>注意以下几点，全都是关于 class 语法的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、class 是一种新的语法形式，是class Name &#123;...&#125;这种形式，和函数的写法完全不一样</span><br><span class="line">2、两者对比，构造函数函数体的内容要放在 class 中的constructor函数中，constructor即构造器，初始化实例时默认执行</span><br><span class="line">3、class 中函数的写法是add() &#123;...&#125;这种形式，并没有function关键字</span><br></pre></td></tr></table></figure></p><p>使用 class 来实现继承就更加简单了，至少比构造函数实现继承简单很多。看下面例子<br>JS 构造函数实现继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'animal eat'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"><span class="comment">// 哈士奇</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog()</span><br></pre></td></tr></table></figure></p><p>ES6 class 实现继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="keyword">super</span>(name)</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> say`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)</span><br><span class="line">dog.say()</span><br><span class="line">dog.eat()</span><br></pre></td></tr></table></figure></p><p>注意以下两点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、使用extends即可实现继承，更加符合经典面向对象语言的写法，如 Java</span><br><span class="line">2、子类的constructor一定要执行super()，以调用父类的constructor</span><br></pre></td></tr></table></figure></p><h2 id="Set-和-Map-1"><a href="#Set-和-Map-1" class="headerlink" title="Set 和 Map"></a><a name="t7n1mw"></a>Set 和 Map</h2><blockquote><p>题目：ES6 中新增的数据类型有哪些？</p></blockquote><p>Set 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构，目前尚未被大规模使用，但是作为前端程序员，提前了解是必须做到的。先总结一下两者最关键的地方：<br>1、Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复<br>2、Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型</p><h4 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a><a name="2wbxsn"></a>Set</h4><p>Set 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过add添加元素，元素不能重复，重复的会被忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set) <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> set.add(item));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4 8</span></span><br></pre></td></tr></table></figure><p>Set 实例的属性和方法有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、size：获取元素数量。</span><br><span class="line">2、add(value)：添加元素，返回 Set 实例本身。</span><br><span class="line">3、delete(value)：删除元素，返回一个布尔值，表示删除是否成功。</span><br><span class="line">4、has(value)：返回一个布尔值，表示该值是否是 Set 实例的元素。</span><br><span class="line">5、clear()：清除所有元素，没有返回值。</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>); <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">s.size <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">2</span>);</span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.clear();</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>Set 实例的遍历，可使用如下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、keys()：返回键名的遍历器。</span><br><span class="line">2、values()：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys()和values()返回结果一致。</span><br><span class="line">3、entries()：返回键值对的遍历器。</span><br><span class="line">4、forEach()：使用回调函数遍历每个成员</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["aaa", "aaa"]</span></span><br><span class="line"><span class="comment">// ["bbb", "bbb"]</span></span><br><span class="line"><span class="comment">// ["ccc", "ccc"]</span></span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// aaa : aaa</span></span><br><span class="line"><span class="comment">// bbb : bbb</span></span><br><span class="line"><span class="comment">// ccc : ccc</span></span><br></pre></td></tr></table></figure><h4 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a><a name="22r1ic"></a>Map</h4><p>Map 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。<br>  const map = new Map();<br>  const obj = {p: ‘Hello World’};</p><p>  map.set(obj, ‘OK’)<br>  map.get(obj) // “OK”</p><p>  map.has(obj) // true<br>  map.delete(obj) // true<br>  map.has(obj) // false<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">需要使用new Map()初始化一个实例，下面代码中set get has delete顾名即可思义（下文也会演示）。其中，map.set(obj, &apos;OK&apos;)就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过map.get(obj)正确获取了</span><br><span class="line"></span><br><span class="line">Map 实例的属性和方法如下：</span><br><span class="line"></span><br><span class="line"> 1、size：获取成员的数量</span><br><span class="line"> 2、set：设置成员 key 和 value</span><br><span class="line"> 3、get：获取成员属性值</span><br><span class="line"> 4、has：判断成员是否存在</span><br><span class="line"> 5、delete：删除成员</span><br><span class="line"> 6、clear：清空所有</span><br><span class="line"> </span><br><span class="line">```js </span><br><span class="line">const map = new Map();</span><br><span class="line">map.set(&apos;aaa&apos;, 100);</span><br><span class="line">map.set(&apos;bbb&apos;, 200);</span><br><span class="line"></span><br><span class="line">map.size // 2</span><br><span class="line"></span><br><span class="line">map.get(&apos;aaa&apos;) // 100</span><br><span class="line"></span><br><span class="line">map.has(&apos;aaa&apos;) // true</span><br><span class="line"></span><br><span class="line">map.delete(&apos;aaa&apos;)</span><br><span class="line">map.has(&apos;aaa&apos;) // false</span><br><span class="line"></span><br><span class="line">map.clear()</span><br></pre></td></tr></table></figure></p><p>  Map 实例的遍历方法有：</p><p>   1、keys()：返回键名的遍历器。<br>   2、values()：返回键值的遍历器。<br>   3、entries()：返回所有成员的遍历器。<br>   4、forEach()：遍历 Map 的所有成员</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'aaa'</span>, <span class="number">100</span>);</span><br><span class="line">map.set(<span class="string">'bbb'</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "aaa"</span></span><br><span class="line"><span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa 100</span></span><br><span class="line"><span class="comment">// bbb 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa 100</span></span><br><span class="line"><span class="comment">// bbb 200</span></span><br></pre></td></tr></table></figure><h2 id="Promise-1"><a href="#Promise-1" class="headerlink" title="Promise"></a>Promise</h2><p>    Promise是 CommonJS 提出来的这一种规范，有多个版本，在 ES6 当中已经纳入规范，原生支持 Promise 对象，非 ES6 环境可以用类似 Bluebird、Q 这类库来支持。<br>    Promise 可以将回调变成链式调用写法，流程更加清晰，代码更加优雅。<br>    简单归纳下 Promise：三个状态、两个过程、一个方法，快速记忆方法：3-2-1<br>    三个状态：pending、fulfilled、rejected</p><p>  两个过程：<br>   1、pending→fulfilled（resolve）<br>   2、pending→rejected（reject）<br>  当然还有其他概念，如catch、 Promise.all/race，这里就不展开了  </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">     url : <span class="string">"xxxxx"</span>,</span><br><span class="line">     type : <span class="string">"post"</span></span><br><span class="line">     success(res)&#123;</span><br><span class="line">       resolve(res)</span><br><span class="line">     &#125;,</span><br><span class="line">     error(err)&#123;</span><br><span class="line">       reject（err）</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  &#125;,()=&gt;&#123;</span><br><span class="line">  &#125;)</span><br><span class="line"># &lt;a name="hh0lph"&gt;&lt;/a&gt;ES7新特性</span><br><span class="line"><span class="string">`1.Array.prototype.includes`</span></span><br><span class="line"><span class="string">`2.Exponentiation Operator(求幂运算)`</span></span><br><span class="line"></span><br><span class="line">## &lt;a name="g0nhws"&gt;&lt;/a&gt;Array.prototype.includes</span><br><span class="line"><span class="built_in">Array</span>.prototype.includes用法都容易和简单。它是一个替代indexOf，开发人员用来检查数组中是否存在值，indexOf是一种尴尬的使用，因为它返回一个元素在数组中的位置或者<span class="number">-1</span>当这样的元素不能被找到的情况下。所以它返回一个数字，而不是一个布尔值。开发人员需要实施额外的检查。在ES6，要检查是否存在值你需要做一些如下图所示小技巧，因为他们没有匹配到值，<span class="built_in">Array</span>.prototype.indexOf返回<span class="number">-1</span>变成了<span class="literal">true</span>（转换成<span class="literal">true</span>），但是当匹配的元素为<span class="number">0</span>位置时候，该数组包含元素，却变成了<span class="literal">false</span>。</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">let arr = [‘react‘, ‘angular‘, ‘vue‘]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// WRONG</span></span><br><span class="line"><span class="string">if (arr.indexOf(‘react‘)) &#123; // 0 -&gt; evaluates to false, definitely as we expected</span></span><br><span class="line"><span class="string">console.log(‘Can use React‘) // this line would never be executed</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Correct</span></span><br><span class="line"><span class="string">if (arr.indexOf(‘react‘) !== -1) &#123;</span></span><br><span class="line"><span class="string">console.log(‘Can use React‘)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>或者使用一点点hack 位运算符 ~ 使代码更加紧凑一些，因为~（位异或）对任何数字相当于-(a + 1):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [‘react‘, ‘angular‘, ‘vue‘]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">if</span> (~arr.indexOf(‘react‘)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(‘Can use React‘)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES7中使用includes代码如下:</p><p>  let arr = [‘react‘, ‘angular‘, ‘vue‘]</p><p>  // Correct<br>  if (arr.includes(‘react‘)) {<br>  console.log(‘Can use React‘)<br>  }<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  还能在字符串中使用includes:</span><br><span class="line">  ```js</span><br><span class="line">  let str = ‘React Quickly‘</span><br><span class="line">  </span><br><span class="line">  // Correct</span><br><span class="line">  if (str.toLowerCase().includes(‘react‘)) &#123;  // true</span><br><span class="line">  console.log(‘Found &quot;react&quot;‘)  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">除了增强了可读性语义化，实际上给开发者返回布尔值，而不是匹配的位置。</span><br><span class="line"></span><br><span class="line">includes也可以在NaN(非数字)使用。最后 ，includes第二可选参数fromIndex，这对于优化是有好处的，因为它允许从特定位置开始寻找匹配。</span><br><span class="line">更多例子：</span><br><span class="line"></span><br><span class="line">  console.log([1, 2, 3].includes(2)) // === true)</span><br><span class="line">  console.log([1, 2, 3].includes(4)) // === false)</span><br><span class="line">  console.log([1, 2, NaN].includes(NaN)) // === true)</span><br><span class="line">  console.log([1, 2, -0].includes(+0)) // === true)</span><br><span class="line">  console.log([1, 2, +0].includes(-0)) // === true)</span><br><span class="line">  console.log([‘a‘, ‘b‘, ‘c‘].includes(‘a‘)) // === true)</span><br><span class="line">  console.log([‘a‘, ‘b‘, ‘c‘].includes(‘a‘, 1)) // === false)</span><br></pre></td></tr></table></figure></p><p>  总而言之，includes在一个数组或者列表中检查是否存在一个值，给任何开发人员带来简单性。    </p><h4 id="Exponentiation-Operator-求幂运算"><a href="#Exponentiation-Operator-求幂运算" class="headerlink" title="Exponentiation Operator(求幂运算)"></a>Exponentiation Operator(求幂运算)</h4><p>  求幂运算大多数是做一些数学计算，对于3D，VR，SVG还有数据可视化非常有用。在ES6或者早些版本，不得不创建一个循环，创建一个递归函数或者使用Math.pow,如果忘记了什么是指数,当你有相同数字（基数）自相相乘多次（指数）。例如，7的3次方是7<em>7</em>7  </p><p>  所以在ES6/2015ES，你能使用Math.pow创建一个短的递归箭头函数：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  calculateExponent = <span class="function">(<span class="params">base, exponent</span>) =&gt;</span> base*((--exponent&gt;<span class="number">1</span>)?calculateExponent(base, exponent):base)</span><br><span class="line">  <span class="built_in">console</span>.log(calculateExponent(<span class="number">7</span>,<span class="number">12</span>) === <span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">12</span>)) <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(calculateExponent(<span class="number">2</span>,<span class="number">7</span>) === <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">7</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">现在在ES7 /ES2016，以数学向导的开发者可以使用更短的语法:</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">let a = 7 ** 12</span></span><br><span class="line"><span class="string">let b = 2 ** 7</span></span><br><span class="line"><span class="string">console.log(a === Math.pow(7,12)) // true</span></span><br><span class="line"><span class="string">console.log(b === Math.pow(2,7)) // true</span></span><br></pre></td></tr></table></figure><p>开发者还可以操作结果:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">7</span></span><br><span class="line">a **= <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">b **= <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(a === <span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">12</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b === <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">7</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h1 id="ES8新特性"><a href="#ES8新特性" class="headerlink" title="ES8新特性"></a><a name="gtdasp"></a>ES8新特性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、Object.values/Object.entries</span><br><span class="line">2、String padding(字符串填充)</span><br><span class="line">3、Object.getOwnPropertyDescriptors</span><br><span class="line">4、函数参数列表和调用中的尾逗号（Trailing commas）</span><br><span class="line">5、异步函数（Async Functions）</span><br></pre></td></tr></table></figure><h2 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values/Object.entries"></a><a name="pabclb"></a>Object.values/Object.entries</h2><p>Object.values和 Object.entries是在ES2017规格中，它和Object.keys类似，返回数组类型，其序号和Object.keys序号对应。类似python中的dict.iteritems()。</p><p>Object.values,Object.entries和Object.keys各自项返回是数组，相对应包括key,value或者可枚举特定对象property/attribute<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key, index</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>而使用ES6/ES2015 中for/of稍微好点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Object.values返回对象自身可以迭代属性值（values）为数组类型。我们最好使用Array.prototype.forEach迭代它，结合ES6的箭头函数隐形返回值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.values(obj).forEach(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">console</span>.log(value)) <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure></p><h2 id="String-padding-字符串填充"><a href="#String-padding-字符串填充" class="headerlink" title="String padding(字符串填充)"></a><a name="ppgggy"></a>String padding(字符串填充)</h2><p>String.prototype.padStart 和 String.prototype.padEnd在javascript字符操作是一个不错的体验，帮助避免依赖而外的库<br>padStart()在开始部位填充，返回一个给出长度的字符串，填充物给定字符串，把字符串填充到期望的长度。从字符串的左边开始（至少大部分西方语言），一个经典例子是使用空格创建列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(‘react‘.padStart(<span class="number">10</span>).length)         <span class="comment">// "       react" is 10</span></span><br><span class="line"><span class="built_in">console</span>.log(‘backbone‘.padStart(<span class="number">10</span>).length)         <span class="comment">// "  backbone" is 10</span></span><br></pre></td></tr></table></figure><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a><a name="nkpopc"></a>Object.getOwnPropertyDescriptors</h2><p>Object.getOwnPropertyDescriptors允许创建真实的对象浅副本并创建子类,它通过给开发者描述符来做到这一点.在Object.create(prototype, object)放入描述符后，返回一个真正的浅拷贝<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>或者你可以合并两个对象target和source如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(</span><br><span class="line">target,</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(source)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>两种描述符号类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.数据描述符（Data descriptor）</span><br><span class="line">2.存取器描述符（Accessor descriptor）</span><br></pre></td></tr></table></figure></p><p>存取描述符有必须属性：get 或者set或者get和set两个就是如你所想的getter和setter函数，然后存取描述符还有可选属性configurable和enumerable<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> azatsBooks = &#123;  </span><br><span class="line">books: [<span class="string">'React Quickly'</span>],</span><br><span class="line">get latest () &#123;</span><br><span class="line">  <span class="keyword">let</span> numberOfBooks = <span class="keyword">this</span>.books.length</span><br><span class="line">  <span class="keyword">if</span> (numberOfBooks == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.books[numberOfBooks - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数参数列表和调用中的尾逗号"><a href="#函数参数列表和调用中的尾逗号" class="headerlink" title="函数参数列表和调用中的尾逗号"></a><a name="yl4yvm"></a>函数参数列表和调用中的尾逗号</h2><p>尾逗号在函数定义中只是一个纯粹语法变化，在ES5中，将会非法语法，在函数参数后面应该是没有逗号的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a,</span></span></span><br><span class="line"><span class="function"><span class="params">b,</span></span></span><br><span class="line"><span class="function"><span class="params">c,</span></span></span><br><span class="line"><span class="function"><span class="params">d</span>) </span>&#123; <span class="comment">// NO COMMA!</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'this'</span>)</span><br></pre></td></tr></table></figure></p><p>在ES8中，这种尾逗号是没有问题的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a,</span></span></span><br><span class="line"><span class="function"><span class="params">b,</span></span></span><br><span class="line"><span class="function"><span class="params">c,</span></span></span><br><span class="line"><span class="function"><span class="params">d,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123; <span class="comment">// COMMA? OK!</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'this'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a><a name="5671px"></a>异步函数</h2><p>异步函数（或者async/await）特性操作是Promise最重要的功能，开发者定义一个asyc函数里面不包含或者包含await 基于Promise异步操作<br>在ES6中我们可以使用Promise，Axios库向GraphQL服务器发送一个请求：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.data)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.props.processfetchedData(data) <span class="comment">// Defined somewhere else</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure></p><p>任何一个Promise库都能兼容新的异步函数，我们可以使用同步try/catch做错误处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> fetchData(url) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> data = response.data</span><br><span class="line">  <span class="keyword">this</span>.props.processfetchedData(data)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步函数返回一个Promise，所以我们像下面可以继续执行流程:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> fetchData(query) =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> data = response.data</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fetchData(query).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.props.processfetchedData(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>你可以看到这段代码在(Babel REPL)生效。请注意，这个例子中，Axios库被代替的，是通过模拟来做相同功能，而HTTP请求通过setTimout代替：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> axios = &#123;  <span class="comment">// mocks</span></span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(&#123;<span class="attr">data</span>: x&#125;)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> query = <span class="string">'mangos'</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`/q?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> data = response.data</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fetchData(query).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(data) <span class="comment">// Got data 2s later... Can use data!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>async/await,我们的代码执行异步看起来像执行同步一样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 导出EXCEL文件</title>
    <link href="http://lulustyle.net/2018/12/22/JS%20%E5%AF%BC%E5%87%BAEXCEL%E6%96%87%E4%BB%B6/"/>
    <id>http://lulustyle.net/2018/12/22/JS 导出EXCEL文件/</id>
    <published>2018-12-22T07:02:14.000Z</published>
    <updated>2018-12-27T01:35:19.745Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 业务场景解决方案</span></span></p><hr><blockquote><p>需求：datatable表格，每一行带有checkbox，勾选checkbox导出当前行所有数据，全选则导出所有选中行的数据<br>即实现导出列表选中行数据的功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;download&quot; download=&quot;用户列表&quot;&gt;导出&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function exportFile() &#123;</span><br><span class="line">    var dataArr = [];//定义数组用来保存所勾选的列表当前行数据</span><br><span class="line">    // 定义表头</span><br><span class="line">    var str = `&lt;tr&gt;</span><br><span class="line">        &lt;th&gt;样本名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;问卷编码&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;提交时间&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;`</span><br><span class="line">    // 遍历列表中所购选中的行</span><br><span class="line">    $(&apos;table&apos;).find(&apos;tr.hover-bg&apos;).each(function() &#123;</span><br><span class="line">        var Data = new Object();</span><br><span class="line">        Data.AreaName = $(this).find(&apos;td:eq(1)&apos;).html();</span><br><span class="line">        Data.DataID= $(this).find(&apos;td:eq(2)&apos;).html();</span><br><span class="line">        Data.EntryTime= $(this).find(&apos;td:eq(3)&apos;).html();</span><br><span class="line">        dataArr.push(Data);</span><br><span class="line">    &#125;)</span><br><span class="line">    if($(&apos;table&apos;).find(&apos;tr&apos;).hasClass(&apos;hover-bg&apos;)) &#123;</span><br><span class="line">        //循环遍历，每行加入tr标签，每个单元格加td标签</span><br><span class="line">        for (let i = 0; i &lt; dataArr.length; i++) &#123;</span><br><span class="line">            str += &apos;&lt;tr&gt;&apos;;</span><br><span class="line">            for (let item in dataArr[i]) &#123;</span><br><span class="line">                //增加\t为了不让表格显示科学计数法或者其他格式</span><br><span class="line">                str += `&lt;td&gt;$&#123; dataArr[i][item] + &apos;\t&apos;&#125;&lt;/td&gt;`;</span><br><span class="line">            &#125;</span><br><span class="line">            str += &apos;&lt;/tr&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        var template = `&lt;html xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot;</span><br><span class="line">                          xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot;</span><br><span class="line">                          xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;&gt;</span><br><span class="line">                          &lt;head&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;&lt;x:ExcelWorkbook&gt;&lt;x:ExcelWorksheets&gt;&lt;x:ExcelWorksheet&gt;</span><br><span class="line">                            &lt;x:Name&gt;&apos;录入列表.xls&apos;&lt;/x:Name&gt;</span><br><span class="line">                            &lt;x:WorksheetOptions&gt;&lt;x:DisplayGridlines/&gt;&lt;/x:WorksheetOptions&gt;&lt;/x:ExcelWorksheet&gt;</span><br><span class="line">                            &lt;/x:ExcelWorksheets&gt;&lt;/x:ExcelWorkbook&gt;&lt;/xml&gt;&lt;![endif]--&gt;</span><br><span class="line">                            &lt;/head&gt;&lt;body&gt;&lt;table&gt;$&#123;str&#125;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;`;</span><br><span class="line">                            </span><br><span class="line">        // 实例化一个Blob对象，其构造函数的第一个参数是包含文件内容的数组，第二个参数是包含文件类型属性的对象</span><br><span class="line">        var blob = new Blob([template], &#123;type: &quot;application/vnd.ms-excel&quot;&#125;);</span><br><span class="line">        $(&apos;.download&apos;).attr(&apos;href&apos;, URL.createObjectURL(blob));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理</title>
    <link href="http://lulustyle.net/2018/12/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>http://lulustyle.net/2018/12/22/浏览器渲染原理/</id>
    <published>2018-12-22T07:00:25.000Z</published>
    <updated>2018-12-27T01:35:19.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="igyvfg"></a>参考资源</h1><p><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="noopener">How Browsers Work</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考资源&quot;&gt;&lt;a href=&quot;#参考资源&quot; class=&quot;headerlink&quot; title=&quot;参考资源&quot;&gt;&lt;/a&gt;&lt;a name=&quot;igyvfg&quot;&gt;&lt;/a&gt;参考资源&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://taligarsiel.com/Projects/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Hooks</title>
    <link href="http://lulustyle.net/2018/12/22/React%20Hooks/"/>
    <id>http://lulustyle.net/2018/12/22/React Hooks/</id>
    <published>2018-12-22T06:58:52.000Z</published>
    <updated>2018-12-25T09:24:59.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a><a name="g81spe"></a>前期准备</h1><p><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)">要把 </span></span><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><code>react</code></span></span><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 和 </span></span><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><code>react-dom</code></span></span><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 更新到 </span></span><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><code>16.7.0-alpha</code></span></span><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 及以上，如果配置了 ESLint，记得添加对应的 </span></span><a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">Plugin</a><span data-type="color" style="color:rgb(140, 140, 140)"><span data-type="background" style="background-color:rgb(255, 255, 255)">。</span></span><br>（安装插件能够帮助你<span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">不弄错每个盒子和状态的对应关系，书写的时候 Hooks 需要 </span></span><code>use</code><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 开头且放在顶层作用域，即不可以包裹 </span></span><code>if/switch/when/try</code><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 等）</span></span></p><h2 id="React-Hooks-的本质"><a href="#React-Hooks-的本质" class="headerlink" title="React Hooks 的本质"></a><a name="wz3ueq"></a>React Hooks 的本质</h2><ul><li>Hooks 本质是把<strong>面向生命周期编程</strong>变成了<strong>面向业务逻辑编程</strong>；</li><li>Hooks 使用上是一个逻辑状态盒子，输入输出表示的是一种联系；</li><li>Hooks 是 React 的未来，但还是无法完全替代原始的 Class。</li></ul><p><strong>面向生命周期编程 =》面向业务逻辑编程</strong><br><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545478263952-2b06405b-a0e2-47ad-853e-f0582cdacb42.png" alt="image.png | left | 323x269">    == ===》<img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545478301053-35e838a9-6816-488f-b490-b5b01747870b.png" alt="image.png | left | 175x254"></p><h1 id="业务逻辑复用"><a href="#业务逻辑复用" class="headerlink" title="业务逻辑复用"></a><a name="vhgbay"></a>业务逻辑复用</h1><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">这里说的业务逻辑复用主要是需要跨生命周期的业务逻辑。单单按照组件堆积的形式组织代码虽然也可以达到各种复用的目的，但是会导致组件非常复杂，数据流也会很乱。组件堆积适合 UI 布局，但是不适合逻辑组织。为了解决这些问题，在 React 发展过程中，产生了很多解决方案，</span></span></p><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a><a name="ey0uev"></a>Mixins</h3><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">坏处远远大于带来的好处，因为现在已经不再支持，不多说，可以看看这篇文章：</span></span><a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="noopener">Mixins Considered Harmful</a><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">。</span></span></p><h3 id="Class-Inheritance"><a href="#Class-Inheritance" class="headerlink" title="Class Inheritance"></a><a name="943uvh"></a>Class Inheritance</h3><p><a href="https://reactjs.org/docs/composition-vs-inheritance.html" target="_blank" rel="noopener">官方</a><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 很不推荐此做法</span></span></p><h3 id="High-Order-Components-HOC"><a href="#High-Order-Components-HOC" class="headerlink" title="High-Order Components (HOC)"></a><a name="zgzgks"></a>High-Order Components (HOC)</h3><p><a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener">React 高阶组件</a> 在封装业务组件上简直是屡试不爽，它的实现是把自己作为一个函数，接受一个组件，再返回一个组件，这样它可以统一处理掉一些业务逻辑并达到复用目的。</p><p>比较常见的一个就是 <code>react-redux</code> 里的 <code>connect</code> 函数：</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545481367569-2ef64948-6436-4526-bb95-bbff45b72fc9.png" alt="image.png | left | 747x381"></p><p>但是在调试的时候可以看到会产生“组件嵌套地狱”</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545481384158-4411ad67-a56e-47db-8ce9-73eacb757152.png" alt="image.png | left | 747x314"></p><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a><a name="mhdwna"></a>Render Props</h3><p><a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">Render Props</a> 其实很常见，比如 <a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener">React Context API</a>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeProvider&gt;</span><br><span class="line">        &lt;ThemeContext.Consumer&gt;</span><br><span class="line">          &#123;val =&gt; &lt;div&gt;&#123;val&#125;&lt;/div&gt;&#125;</span><br><span class="line">        &lt;<span class="regexp">/ThemeContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ThemeProvider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的实现思路很简单，把原来该放「组件」的地方，换成了回调，这样当前组件里就可以拿到子组件的状态并使用。</p><p>但是，同样这会产生 Wrapper Hell 问题：</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545481576189-42a61180-56f3-44a3-86d9-bd53c10581c1.png" alt="image.png | left | 557x548"></p><h1 id="状态盒子"><a href="#状态盒子" class="headerlink" title="状态盒子"></a><a name="s820yg"></a>状态盒子</h1><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Hooks 只能在其它 Hooks 的函数或者 React Function 组件里。</span></span></p><p>React 社区一直推崇函数式、纯函数等思想，引入 Hooks 概念后的 <code>Functional Component</code> 变的不再纯了，<code>useXxx</code> 与其说是一条执行语句，不如说是一个<strong>声明</strong>。声明这里放了一个「状态盒子」，盒子有输入和输出，剩下的内部实现就一无所知，重要的是，盒子是有<strong>记忆</strong>的，下次执行到此位置时，它有之前上下文信息。</p><p>类比「代码」和「程序」的区别，前者是死的，后者是活的。表达式 <code>c = a + b</code> 表示把 <code>a</code> 和 <code>b</code> 累加后的值赋值给 <code>c</code>，但是如果写成 <code>c := a + b</code> 就表示 <code>c</code> 的值由 <code>a</code> 和 <code>b</code> 相加得到。看起来表述差不多，但实际上，后者隐藏着一个时间的维度，它表示的是一种<strong>联系</strong>，而不单单是个运算。这在 <a href="https://rxjs-dev.firebaseapp.com/" target="_blank" rel="noopener">RxJS</a> 等库中被大量使用。</p><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">这种声明目前是通过很弱的 </span></span><code>use</code><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 前缀标识的（但是设计上会简洁很多），为了不弄错每个盒子和状态的对应关系，书写的时候 Hooks 需要 </span></span><code>use</code><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 开头且放在顶层作用域，即不可以包裹 </span></span><code>if/switch/when/try</code><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 等。如果你按文章开头引入了那个 ESLint Plugin 就不用担心会弄错了。</span></span></p><h1 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a><a name="1k74gx"></a>Fragment</h1><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Wrapper Hell，我个人觉得使用 </span></span><a href="https://reactjs.org/docs/fragments.html" target="_blank" rel="noopener">Fragment</a><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 也可以基本解决。</span></span></p><h1 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a><a name="pb7gvt"></a>案例讲解</h1><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a><a name="7q35gt"></a>功能需求</h2><p>根据 input 的输入值更改网页的 title 信息</p><h2 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a><a name="1wboil"></a>Class Component</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeTile</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            title = <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleChage(title) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            title</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input value=&#123;<span class="keyword">this</span>.state.title&#125; onChange=&#123;<span class="keyword">this</span>.handleChage(title)&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Hooks-写法"><a href="#Hooks-写法" class="headerlink" title="Hooks 写法"></a><a name="74qmmt"></a>Hooks 写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a><a name="mwcbbt"></a>后记</h1><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">HOC 和 Render Props 还是有存在的必要，一方面是支持 React Class，另一方面，它们不光适用于纯逻辑封装，很多时候也适合逻辑 + 组件的封装场景，虽然此时使用 Hooks 也可以，但是会显得啰嗦点。</span></span></p><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="1bdfmq"></a>参考资源</h1><p><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">官网文档</a><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> </span></span><a href="https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889" target="_blank" rel="noopener">Making Sense of React Hooks</a><br><a href="https://www.yuque.com/es2049/blog" target="_blank" rel="noopener">https://www.yuque.com/es2049/blog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;&lt;a name=&quot;g81spe&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建一个脚手架</title>
    <link href="http://lulustyle.net/2018/12/22/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://lulustyle.net/2018/12/22/搭建一个脚手架/</id>
    <published>2018-12-22T06:35:16.000Z</published>
    <updated>2018-12-27T01:35:19.769Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h1 id="脚手架功能需求"><a href="#脚手架功能需求" class="headerlink" title="脚手架功能需求"></a><a name="9o9vzo"></a>脚手架功能需求</h1><ul><li style="list-style: none"><input type="checkbox"> 代码检测</li><li style="list-style: none"><input type="checkbox"> 文档工具</li><li style="list-style: none"><input type="checkbox"> 规范的项目组织结构</li><li style="list-style: none"><input type="checkbox"> ES 规范与浏览器兼容性不一致</li><li style="list-style: none"><input type="checkbox"> CSS 弱编程能力</li><li style="list-style: none"><input type="checkbox"> 资源定位</li><li style="list-style: none"><input type="checkbox"> 图片压缩|base64 内嵌| CSS Sprites</li><li style="list-style: none"><input type="checkbox"> 模块依赖分析和压缩打包</li><li style="list-style: none"><input type="checkbox"> 自动化工具，提高效率</li><li style="list-style: none"><input type="checkbox"> 数据 mock 服务层封装</li><li style="list-style: none"><input type="checkbox"> 路由配置</li><li style="list-style: none"><input type="checkbox"> react-devtool 配置 </li><li style="list-style: none"><input type="checkbox"> 数据状态管理配置选型（redux|mobix)</li><li style="list-style: none"><input type="checkbox"> 性能提升？(immutable)</li></ul><h1 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a><a name="b1xqvg"></a>推荐工具</h1><h3 id="lerna"><a href="#lerna" class="headerlink" title="lerna"></a><a name="dfg6lk"></a>lerna</h3><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">管理前端 </span></span><span data-type="color" style="color:rgb(36, 41, 46)"><span data-type="background" style="background-color:rgb(255, 255, 255)">multiple packages 项目</span></span><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">的工具</span></span></p><ul><li><a href="https://lernajs.io/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.ayqy.net/blog/lerna%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">lerna 入门指南</a></li><li><a href="https://github.com/pigcan/blog/issues/3" target="_blank" rel="noopener">monorepo 新浪潮 | introduce lerna</a></li></ul><h2 id="文档工具"><a href="#文档工具" class="headerlink" title="文档工具"></a><a name="g35cvl"></a>文档工具</h2><ul><li><a href="https://storybook.js.org/" target="_blank" rel="noopener">storybook</a>：<span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">通过 JS(JSX)</span></span><span data-type="color" style="color:rgb(37, 37, 37)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 文件写 </span></span><em>examples</em></li><li><a href="https://react-styleguidist.js.org/" target="_blank" rel="noopener">React Styleguidist：</a>通过 <span data-type="color" style="color:rgb(37, 37, 37)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Markdown 文件写 </span></span><em>examples</em></li><li><a href="http://docz.site/" target="_blank" rel="noopener">docz</a> - markdown 与 react 的结合，十分方便的工具</li><li><a href="https://github.com/txd-team/docsite" target="_blank" rel="noopener">docsite</a> - 快速搭建静态站点，对国际化支持很好</li></ul><h1 id="推荐-npm-包"><a href="#推荐-npm-包" class="headerlink" title="推荐 npm 包"></a><a name="wldplg"></a>推荐 npm 包</h1><ul><li style="list-style: none"><input type="checkbox"> <a href="https://github.com/joshwcomeau/new-component/blob/master/src/index.js" target="_blank" rel="noopener">new-component</a>：自动初始化React组件所需的初始化代码</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>坑及报错</title>
    <link href="http://lulustyle.net/2018/12/22/%E5%9D%91%E5%8F%8A%E6%8A%A5%E9%94%99/"/>
    <id>http://lulustyle.net/2018/12/22/坑及报错/</id>
    <published>2018-12-22T06:28:36.000Z</published>
    <updated>2018-12-27T01:35:19.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="storybook-3-babel-7-导致出错"><a href="#storybook-3-babel-7-导致出错" class="headerlink" title="storybook 3 + babel 7 导致出错"></a><a name="y5r5bg"></a>storybook 3 + babel 7 导致出错</h3><p>storybook 3 默认使用的是 babel 6<br>如果你出现了这个问题，你可以求助于 <a href="mailto:babel-core@7.0.0-bridge.0" target="_blank" rel="noopener">babel-core@7.0.0-bridge.0</a>，这个库可以做桥接工作</p><h3 id="Can’t-resolve-xxxx"><a href="#Can’t-resolve-xxxx" class="headerlink" title="Can’t resolve xxxx"></a><a name="8xvrnk"></a>Can’t resolve xxxx</h3><p>这个问题往往是模块解析问题，但是可能原因不少，你可以考虑的几个点有：</p><ul><li>babel 的模块配置</li><li>webpack 配置（比如 resolve.modules 这些配置）</li><li>tsconfig.json（如果你用了 ts 的话也请看一下 ts 的模块配置）</li><li>内置模块重复安装，模块版本不一致，将pkg中的依赖模块删除，然后删除整个node_modules重新安装</li><li>路径问题</li></ul><h3 id="myc-components-Not-Found"><a href="#myc-components-Not-Found" class="headerlink" title="@myc/components Not Found"></a><a name="6wc4yh"></a>@myc/components Not Found</h3><p>如果你用 yarn 直接在 storybook 目录下企图安装新依赖会失败<br>因为这个包是我们本地正在开发的，不在 npm 上，你应该使用 lerna 的 bootstrap 命令来安装依赖<br>（lerna 实际上是以链接的形式安装的）</p><h3 id="Failed-propType-Invalid-prop-AAA-of-type-BBB-supplied-to-CCC-expected-DDD-Check-the-render-method-of-EEE"><a href="#Failed-propType-Invalid-prop-AAA-of-type-BBB-supplied-to-CCC-expected-DDD-Check-the-render-method-of-EEE" class="headerlink" title="Failed propType: Invalid prop AAA of type BBB supplied to CCC, expected DDD. Check the render method of EEE."></a><a name="en6txn"></a>Failed propType: Invalid prop AAA of type BBB supplied to CCC, expected DDD. Check the render method of EEE.</h3><p>请确保你传递给组件的参数类型正确。</p><h3 id="Unknown-option-xxx-package-json-presets"><a href="#Unknown-option-xxx-package-json-presets" class="headerlink" title="Unknown option: xxx/package.json.presets"></a><a name="8y49hq"></a>Unknown option: xxx/package.json.presets</h3><p>这里有一篇来自 <a href="https://stackoverflow.com/questions/33685365/unknown-option-babelrc-presets" target="_blank" rel="noopener"> Stack Overflow</a> 的回答可以参考。</p><h3 id="Invariant-Violation-findComponentRoot-…-Unable-to-find-element"><a href="#Invariant-Violation-findComponentRoot-…-Unable-to-find-element" class="headerlink" title="Invariant Violation: findComponentRoot(…): Unable to find element."></a><a name="nbo1sk"></a>Invariant Violation: findComponentRoot(…): Unable to find element.</h3><p>你或许引入了 React 两次。如果你使用 webpack，请将 React &amp; ReactDOM 设置为 external。如果你使用其他工具（browserify 等），请阅读它们的文档并将 React &amp; ReactDOM 设置为 external。</p><h3 id="Warning-defaultValue-is-invalid-for-getFieldDecorator-will-set-value-please-use-option-initialValue-instead"><a href="#Warning-defaultValue-is-invalid-for-getFieldDecorator-will-set-value-please-use-option-initialValue-instead" class="headerlink" title="Warning: defaultValue is invalid for getFieldDecorator will set value, please use option.initialValue instead."></a><a name="iqt0sw"></a>Warning: <code>defaultValue</code> is invalid for <code>getFieldDecorator</code> will set <code>value</code>, please use <code>option.initialValue</code> instead.</h3><p>解决方案：外加加一个div<br><a href="https://blog.csdn.net/qq_31307253/article/details/56482754" target="_blank" rel="noopener">antd中setFieldsValue和defaultVal</a></p><h3 id="react-styleguidist-版本-与-eslint-同时升级以后导致文档demo-import-新特性无法使用"><a href="#react-styleguidist-版本-与-eslint-同时升级以后导致文档demo-import-新特性无法使用" class="headerlink" title="react-styleguidist 版本 与 eslint 同时升级以后导致文档demo import 新特性无法使用"></a><a name="9gg4dk"></a>react-styleguidist 版本 与 eslint 同时升级以后导致文档demo import 新特性无法使用</h3><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545796999884-c2092a11-2915-4c28-9163-28fb58fd35d4.png" alt="image.png | left | 532x74"></p><p>降级后得到解决</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545797929198-fc95beb4-1946-4f08-bfc0-5ae1b3604be8.png" alt="image.png | left | 747x244"></p><h3 id="gulp-less-转换报错"><a href="#gulp-less-转换报错" class="headerlink" title="gulp less() 转换报错"></a><a name="nl7eco"></a>gulp less() 转换报错</h3><h3 id=""><a href="#" class="headerlink" title=""></a><a name="gid6zs"></a><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545829129720-4a01d80c-0bd3-4ec3-876d-73c75f5ae1d5.png" alt="屏幕快照 2018-12-26 下午3.42.37.png | center | 747x106"></h3><p>添加 <code>javascriptEnabled: true</code> 属性</p><h2 id="less-变量会导致样式难以定位的问题"><a href="#less-变量会导致样式难以定位的问题" class="headerlink" title="less 变量会导致样式难以定位的问题"></a><a name="x3bkrx"></a>less 变量会导致样式难以定位的问题</h2><p>最好有 source-map 文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;storybook-3-babel-7-导致出错&quot;&gt;&lt;a href=&quot;#storybook-3-babel-7-导致出错&quot; class=&quot;headerlink&quot; title=&quot;storybook 3 + babel 7 导致出错&quot;&gt;&lt;/a&gt;&lt;a name=&quot;y5r
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前后端分离</title>
    <link href="http://lulustyle.net/2018/12/22/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://lulustyle.net/2018/12/22/前后端分离/</id>
    <published>2018-12-22T01:59:50.000Z</published>
    <updated>2018-12-27T01:35:19.810Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a name="3r0qpz"></a>前言</h1><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">前后端分离为什么出现？</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">本质上是什么？</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">前后端分离运动对 web 应用的架构带来了怎么样的变化？</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">前后端分离怎么分离？</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">为什么是 Node.js? </span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">前后端分离的未来怎样？</span></span></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==∣=2651960501&amp;idx=1&amp;sn=a452bab31c0457063241df237f955332&amp;chksm=bd2d01698a5a887f9dfa5c6966d9e71bf492a040ab2dbe4e469ef38dd8ee5ab00b7c562a88e8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">互联网分层架构，为啥要前后端分离？</a></p><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a><a name="wtuzxm"></a>Why</h1><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">传统的后段服务支撑不了现代化的前端开发。平时工作中用到的工具链、开发框架、规范协议、浏览器等在不断涌现，这些新的技术在给开发环境、开发流程提了更多新需求。Node.js 在这个背景下能够把这些工具串联起来。</span></span></p><h1 id="How"><a href="#How" class="headerlink" title="How"></a><a name="rpqeku"></a>How</h1><h2 id="模板层的分工"><a href="#模板层的分工" class="headerlink" title="模板层的分工"></a><a name="524yga"></a><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">模板层的分工</span></span></h2><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">最早的 Java 开发阶段需要一个包含所有内容的 war 包，整个前端的编排，像 HTML 页面、CSS、JS 很多时候包含在 HTML 页面，也会出现脚本复用、样式复用抽离出来。所以前端开发当时是围绕著名的 velocity 模版。这一层最大的问题是，后端的同学看前端资源像看天书，前端同学看后端模版也像是看天书，融合效率非常低。</span></span></p><h2 id="静态资源独立部署"><a href="#静态资源独立部署" class="headerlink" title="静态资源独立部署"></a><a name="tvbisb"></a><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">静态资源独立部署</span></span></h2><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545444668368-fc6fbb5d-67a6-4ceb-98f1-d0210e5fa6eb.png" alt="image.png | left | 447x375"></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Web 前端体验最大的改进就是副客户端，客户端资源非常庞大，代码不再是直接发布到线上，而是要编译，做预处理，可能还要做 CDN 的加速。整个应用被分割成两部分，后端服务发布之后，前端服务要独立更新，这样就给应用的更新带来了便利。这里存在一个问题是接口的协调，前端的需求变更，数据的要求也会变化，需要后端去协调资源的编排。另外一个问题是测试，前端持有脚本，样式资源，而模版却在应用层，应用层的开发、发布也是很复杂的。</span></span></p><h2 id="独立应用层（BFF）"><a href="#独立应用层（BFF）" class="headerlink" title="独立应用层（BFF）"></a><a name="254nhr"></a><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">独立应用层（BFF）</span></span></h2><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545446899571-268627b3-3977-4e7f-9db0-321d5016829f.png" alt="image.png | left | 455x373"></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Node.js 提供 mock 数据开始，前端代码的预编译，资源编排，这些动作都合并到一个应用里面，前端形成 UI 应用层。在这一层，前端具备了更灵活、强大的能力，在数据编排这一层，Node.js 可以做轻量的粘合，服务端的开发也在往微服务方向发展，提升了开发效率。</span></span></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">后端相关的接口回退到 API，或者云端。</span></span></p><h1 id="BFF-层"><a href="#BFF-层" class="headerlink" title="BFF 层"></a><a name="exn8un"></a>BFF 层</h1><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><strong>业务层</strong></span></span><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">的需求很多，在流程控制、数据转换、数据安全、分析展现等方面需要有大量的组件沉淀。最大的特点是有众多独立的功能模块。</span></span></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">在 </span></span><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><strong>server 层</strong></span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Babeljs 可以做代码转换的事情，</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">Bigpipe 可以优化服务端的内存，可以缩减渲染时间，提升体验优化。</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">在数据流里可以有很多的 filter，给数据链中插入 processor，来定义处理微小的数据。</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">用户在原始的数据到完整的可视化展现不需要再搭建一个产品去支持，只需要搭几个 filter，配几个数据源，拖几个组件就可以完成。</span></span></p><h2 id="定制应用框架"><a href="#定制应用框架" class="headerlink" title="定制应用框架"></a><a name="l16naz"></a><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">定制应用框架</span></span></h2><p>通过“定制应用框架”<span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">解决前端的编译，工程管理，数据 mock 等问题</span></span></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545448520556-a886b66c-dd05-471a-8528-fde5240db11b.png" alt="image.png | left | 345x281"></p><h2 id="微应用分割"><a href="#微应用分割" class="headerlink" title="微应用分割"></a><a name="d5qots"></a><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">微应用分割</span></span></h2><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">把各自独立的模块应用切割成微应用，一个微应用解决一个问题，便于分工和隔离处理。</span></span></p><p>具体做法是微服务拆分，搭建微应用服务，承载大量的小服务，同时也会出现很多域名的问题，很多访问入口。这里做了一些小创新，在入口可以定义端口，sever name，访问 path，当把一个场景分成 10 个应用发布，发布之后再根据不同的路径拼接成一个应用，对体验没有影响。</p><p>除了路由自动化规划之后，对应用的发布做到上下平滑，不会影响流量。前端人员自己打包发布就可以了。</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545453438728-45702fb8-f2ec-4909-8158-1bb9d89c4515.png" alt="image.png | left | 736x217"></p><h2 id="运维工程化"><a href="#运维工程化" class="headerlink" title="运维工程化"></a><a name="berygo"></a><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">运维工程化</span></span></h2><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">当这些应用被分割的很细致之后，随之而来的是如何管理这些小应用。</span></span></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545453583047-a8edd4e3-529d-490e-9cfc-bbdf555ed5b6.png" alt="image.png | left | 413x321"></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">比如有两台机器做互备，把所有小 App 都发布到上面之后，由一个个小颗粒组成一个大应用，看上去很像一个蜂巢，因此命名 honeycomb，这些蜂巢组成一个大蜂窝，完成一个主功能。在应用推进过程中，有些应用压力大，需要把应用集群隔离开，把有不同业务需求场景环境，例如开发环境、预发环境、线上环境隔离开来，不同环境配置的集群资源和机器数量都不一样。随着业务发展，隔离的事情会交给容器去执行。</span></span></p><h1 id="密集计算问题"><a href="#密集计算问题" class="headerlink" title="密集计算问题"></a><a name="iip7pi"></a>密集计算问题</h1><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">密集计算分成两层，</span></span><br>第一层<span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">绿色部分会接收用户请求，</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">第二层浅蓝色会处理用户请求，写很多的 processor，提供大量的进程去提供密集计算。</span></span></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">主要问题在于 CPU 容量是恒定的，当有很多并发请求的时候，如何保证在服务层去很好的分配计算任务。</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">拆成两层之后，保证用户请求不会被 block 掉。</span></span><br><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">如果第一层大量的密集计算，会导致用户的请求或者连接的需求被挡住，接收不到响应，所以要往后堆，做成队列，可扩容的大集群。整个结果在 Java 里就可以理解为 Java 庞大线程的处理过程。</span></span></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545459366584-04df277c-f03c-4967-9c2e-79a8065dd379.png" alt="image.png | left | 747x227"></p><p><span data-type="color" style="color:rgb(74, 74, 74)"><span data-type="background" style="background-color:rgb(255, 255, 255)">社区里在线程库里还有一些尝试，Napa.js 是微软开源的线程库，前端同构的需求可以探索使用 Napa.js 这个工具。</span></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端业务代码工具库</title>
    <link href="http://lulustyle.net/2018/12/22/%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <id>http://lulustyle.net/2018/12/22/前端业务代码工具库/</id>
    <published>2018-12-22T01:47:14.000Z</published>
    <updated>2018-12-25T09:24:59.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="outils"><a href="#outils" class="headerlink" title="outils"></a><a name="hsyhio"></a>outils</h1><p>[</p><p><img src="https://www.npmjs.com/package/outils" alt="npm | left](https://img.shields.io/npm/v/outils.svg &quot;&quot;)"></p><p><img src="https://travis-ci.org/proYang/outils.svg?branch=master" alt="Build Status | left"></p><p>[</p><p><img src="https://coveralls.io/repos/github/proYang/outils/badge.svg?branch=master" alt="Coverage | left"></p><p><img src="https://www.npmjs.com/package/outils" alt="LICENSE MIT | left](https://img.shields.io/npm/l/outils.svg &quot;&quot;)"></p><p>前端业务代码工具库</p><blockquote><p>目的：高效率完成前端业务代码</p></blockquote><p>业务开发过程中，会经常用到<code>日期格式化</code>、<code>url参数转对象</code>、<code>浏览器类型判断</code>、<code>节流函数</code>等常用函数，为避免不同项目多次复制粘贴的麻烦，这里统一封装，并发布到npm，以提高开发效率。如果你也有常用的代码，欢迎为本项目提交pr。</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a><a name="sf29au"></a>安装使用</h2><ol><li>直接下载<code>min</code>目录下的<a href="https://github.com/proYang/outils/blob/master/min/outils.min.js" target="_blank" rel="noopener">outils.min.js</a>使用，支持UMD通用模块规范</li><li>使用npm安装</li></ol><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器:"></a><a name="wh84ao"></a>浏览器:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;outils.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var OS = outils.getOS()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm:"></a><a name="vd6vka"></a>npm:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev outils</span><br></pre></td></tr></table></figure><p>webpack、RequireJS、SeaJS等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 完整引入</span><br><span class="line">const outils = require(&apos;outils&apos;)</span><br><span class="line">const OS = outils.getOS()</span><br></pre></td></tr></table></figure><p><strong>推荐使用方法</strong></p><p>你真的不需要完整引入所有函数，所以只引入需要使用的方法即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 只引入部分方法(&apos;outils/&lt;方法名&gt;&apos;)</span><br><span class="line">const getOS = require(&apos;outils/getOS&apos;)</span><br><span class="line">const OS = getOS()</span><br></pre></td></tr></table></figure></p><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a><a name="y77ozs"></a>API文档</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a><a name="otazcz"></a>Array</h3><h4 id="arrayEqual-判断两个数组是否相等"><a href="#arrayEqual-判断两个数组是否相等" class="headerlink" title="arrayEqual  判断两个数组是否相等"></a><a name="06fglt"></a><a href="https://github.com/proYang/outils/blob/master/src/array/arrayEqual.js" target="_blank" rel="noopener">arrayEqual</a>  判断两个数组是否相等</h4><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a><a name="2bfeuw"></a>Class</h3><h4 id="addClass-为元素添加class"><a href="#addClass-为元素添加class" class="headerlink" title="addClass  为元素添加class"></a><a name="f26svt"></a><a href="https://github.com/proYang/outils/blob/master/src/class/addClass.js" target="_blank" rel="noopener">addClass</a>  为元素添加class</h4><h4 id="hasClass-判断元素是否有某个class"><a href="#hasClass-判断元素是否有某个class" class="headerlink" title="hasClass  判断元素是否有某个class"></a><a name="pbgqlz"></a><a href="https://github.com/proYang/outils/blob/master/src/class/hasClass.js" target="_blank" rel="noopener">hasClass</a>  判断元素是否有某个class</h4><h4 id="removeClass-为元素移除class"><a href="#removeClass-为元素移除class" class="headerlink" title="removeClass  为元素移除class"></a><a name="4speny"></a><a href="https://github.com/proYang/outils/blob/master/src/class/removeClass.js" target="_blank" rel="noopener">removeClass</a>  为元素移除class</h4><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><a name="vnzxvf"></a>Cookie</h3><h4 id="getCookie-根据name读取Cookie"><a href="#getCookie-根据name读取Cookie" class="headerlink" title="getCookie  根据name读取Cookie"></a><a name="zcv8eo"></a><a href="https://github.com/proYang/outils/blob/master/src/cookie/getCookie.js" target="_blank" rel="noopener">getCookie</a>  根据name读取Cookie</h4><h4 id="removeCookie-根据name删除Cookie"><a href="#removeCookie-根据name删除Cookie" class="headerlink" title="removeCookie  根据name删除Cookie"></a><a name="nr6xin"></a><a href="https://github.com/proYang/outils/blob/master/src/cookie/removeCookie.js" target="_blank" rel="noopener">removeCookie</a>  根据name删除Cookie</h4><h4 id="setCookie-添加Cookie"><a href="#setCookie-添加Cookie" class="headerlink" title="setCookie  添加Cookie"></a><a name="twvvgn"></a><a href="https://github.com/proYang/outils/blob/master/src/cookie/setCookie.js" target="_blank" rel="noopener">setCookie</a>  添加Cookie</h4><h3 id="Device"><a href="#Device" class="headerlink" title="Device"></a><a name="q21dgh"></a>Device</h3><h4 id="getExplore-获取浏览器类型和版本号"><a href="#getExplore-获取浏览器类型和版本号" class="headerlink" title="getExplore  获取浏览器类型和版本号"></a><a name="eqptxq"></a><a href="https://github.com/proYang/outils/blob/master/src/device/getExplore.js" target="_blank" rel="noopener">getExplore</a>  获取浏览器类型和版本号</h4><h4 id="getOS-获取操作系统类型"><a href="#getOS-获取操作系统类型" class="headerlink" title="getOS  获取操作系统类型"></a><a name="fvr1fg"></a><a href="https://github.com/proYang/outils/blob/master/src/device/getOS.js" target="_blank" rel="noopener">getOS</a>  获取操作系统类型</h4><h3 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a><a name="zymrgy"></a>Dom</h3><h4 id="getScrollTop-获取滚动条距顶部的距离"><a href="#getScrollTop-获取滚动条距顶部的距离" class="headerlink" title="getScrollTop  获取滚动条距顶部的距离"></a><a name="n3tweo"></a><a href="https://github.com/proYang/outils/blob/master/src/dom/getScrollTop.js" target="_blank" rel="noopener">getScrollTop</a>  获取滚动条距顶部的距离</h4><h4 id="offset-获取一个元素的距离文档-document-的位置，类似jQ中的offset"><a href="#offset-获取一个元素的距离文档-document-的位置，类似jQ中的offset" class="headerlink" title="offset  获取一个元素的距离文档(document)的位置，类似jQ中的offset()"></a><a name="1yzxpe"></a><a href="https://github.com/proYang/outils/blob/master/src/dom/offset.js" target="_blank" rel="noopener">offset</a>  获取一个元素的距离文档(document)的位置，类似jQ中的offset()</h4><h4 id="scrollTo-在-duration-时间内，滚动条平滑滚动到-to-指定位置"><a href="#scrollTo-在-duration-时间内，滚动条平滑滚动到-to-指定位置" class="headerlink" title="scrollTo  在\${duration}时间内，滚动条平滑滚动到\${to}指定位置"></a><a name="s09snc"></a><a href="https://github.com/proYang/outils/blob/master/src/dom/scrollTo.js" target="_blank" rel="noopener">scrollTo</a>  在\${duration}时间内，滚动条平滑滚动到\${to}指定位置</h4><h4 id="setScrollTop-设置滚动条距顶部的距离"><a href="#setScrollTop-设置滚动条距顶部的距离" class="headerlink" title="setScrollTop  设置滚动条距顶部的距离"></a><a name="7k23pp"></a><a href="https://github.com/proYang/outils/blob/master/src/dom/setScrollTop.js" target="_blank" rel="noopener">setScrollTop</a>  设置滚动条距顶部的距离</h4><h4 id="windowResize-H5软键盘缩回、弹起回调"><a href="#windowResize-H5软键盘缩回、弹起回调" class="headerlink" title="windowResize  H5软键盘缩回、弹起回调"></a><a name="9707bu"></a><a href="https://github.com/proYang/outils/blob/master/src/dom/windowResize.js" target="_blank" rel="noopener">windowResize</a>  H5软键盘缩回、弹起回调</h4><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a><a name="3vy6fk"></a>Function</h3><h4 id="debounce-函数防抖"><a href="#debounce-函数防抖" class="headerlink" title="debounce  函数防抖"></a><a name="gicwvz"></a><a href="https://github.com/proYang/outils/blob/master/src/function/debounce.js" target="_blank" rel="noopener">debounce</a>  函数防抖</h4><h4 id="throttle-函数节流"><a href="#throttle-函数节流" class="headerlink" title="throttle  函数节流"></a><a name="v1clei"></a><a href="https://github.com/proYang/outils/blob/master/src/function/throttle.js" target="_blank" rel="noopener">throttle</a>  函数节流</h4><h3 id="Keycode"><a href="#Keycode" class="headerlink" title="Keycode"></a><a name="gnhpni"></a>Keycode</h3><h4 id="getKeyName-根据keycode获得键名"><a href="#getKeyName-根据keycode获得键名" class="headerlink" title="getKeyName  根据keycode获得键名"></a><a name="2zkxsc"></a><a href="https://github.com/proYang/outils/blob/master/src/keycode/getKeyName.js" target="_blank" rel="noopener">getKeyName</a>  根据keycode获得键名</h4><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a><a name="a6zzqa"></a>Object</h3><h4 id="deepClone-深拷贝，支持常见类型"><a href="#deepClone-深拷贝，支持常见类型" class="headerlink" title="deepClone  深拷贝，支持常见类型"></a><a name="xfs1fn"></a><a href="https://github.com/proYang/outils/blob/master/src/object/deepClone.js" target="_blank" rel="noopener">deepClone</a>  深拷贝，支持常见类型</h4><h4 id="isEmptyObject-判断Object是否为空"><a href="#isEmptyObject-判断Object是否为空" class="headerlink" title="isEmptyObject  判断Object是否为空"></a><a name="notmko"></a><a href="https://github.com/proYang/outils/blob/master/src/object/isEmptyObject.js" target="_blank" rel="noopener">isEmptyObject</a>  判断Object是否为空</h4><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a><a name="a31wqn"></a>Random</h3><h4 id="randomColor-随机生成颜色"><a href="#randomColor-随机生成颜色" class="headerlink" title="randomColor   随机生成颜色"></a><a name="frr0qi"></a><a href="https://github.com/proYang/outils/blob/master/src/random/randomColor.js" target="_blank" rel="noopener">randomColor</a>   随机生成颜色</h4><h4 id="randomNum-生成指定范围随机数"><a href="#randomNum-生成指定范围随机数" class="headerlink" title="randomNum  生成指定范围随机数"></a><a name="obpmlo"></a><a href="https://github.com/proYang/outils/blob/master/src/random/randomNum.js" target="_blank" rel="noopener">randomNum</a>  生成指定范围随机数</h4><h3 id="Regexp"><a href="#Regexp" class="headerlink" title="Regexp"></a><a name="i92gwh"></a>Regexp</h3><h4 id="isEmail-判断是否为邮箱地址"><a href="#isEmail-判断是否为邮箱地址" class="headerlink" title="isEmail  判断是否为邮箱地址"></a><a name="alsddt"></a><a href="https://github.com/proYang/outils/blob/master/src/regexp/isEmail.js" target="_blank" rel="noopener">isEmail</a>  判断是否为邮箱地址</h4><h4 id="isIdCard-判断是否为身份证号"><a href="#isIdCard-判断是否为身份证号" class="headerlink" title="isIdCard  判断是否为身份证号"></a><a name="gq37vg"></a><a href="https://github.com/proYang/outils/blob/master/src/regexp/isIdCard.js" target="_blank" rel="noopener">isIdCard</a>  判断是否为身份证号</h4><h4 id="isPhoneNum-判断是否为手机号"><a href="#isPhoneNum-判断是否为手机号" class="headerlink" title="isPhoneNum  判断是否为手机号"></a><a name="r4evcu"></a><a href="https://github.com/proYang/outils/blob/master/src/regexp/isPhoneNum.js" target="_blank" rel="noopener">isPhoneNum</a>  判断是否为手机号</h4><h4 id="isUrl-判断是否为URL地址"><a href="#isUrl-判断是否为URL地址" class="headerlink" title="isUrl  判断是否为URL地址"></a><a name="hoxigo"></a><a href="https://github.com/proYang/outils/blob/master/src/regexp/isUrl.js" target="_blank" rel="noopener">isUrl</a>  判断是否为URL地址</h4><h3 id="String"><a href="#String" class="headerlink" title="String"></a><a name="4wl5eo"></a>String</h3><h4 id="digitUppercase-现金额转大写"><a href="#digitUppercase-现金额转大写" class="headerlink" title="digitUppercase  现金额转大写"></a><a name="43argx"></a><a href="https://github.com/proYang/outils/blob/master/src/string/digitUppercase.js" target="_blank" rel="noopener">digitUppercase</a>  现金额转大写</h4><h3 id="Support"><a href="#Support" class="headerlink" title="Support"></a><a name="27ydty"></a>Support</h3><h4 id="isSupportWebP-判断浏览器是否支持webP格式图片"><a href="#isSupportWebP-判断浏览器是否支持webP格式图片" class="headerlink" title="isSupportWebP  判断浏览器是否支持webP格式图片"></a><a name="lmq2uo"></a><a href="https://github.com/proYang/outils/blob/master/src/support/isSupportWebP.js" target="_blank" rel="noopener">isSupportWebP</a>  判断浏览器是否支持webP格式图片</h4><h4 id=""><a href="#" class="headerlink" title=""></a><a name="d6y9du"></a></h4><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a><a name="fbb7ca"></a>Time</h3><h4 id="formatPassTime-格式化-startTime-距现在的已过时间"><a href="#formatPassTime-格式化-startTime-距现在的已过时间" class="headerlink" title="formatPassTime  格式化\${startTime}距现在的已过时间"></a><a name="mchvdy"></a><a href="https://github.com/proYang/outils/blob/master/src/time/formatPassTime.js" target="_blank" rel="noopener">formatPassTime</a>  格式化\${startTime}距现在的已过时间</h4><h4 id="formatRemainTime-格式化现在距-endTime-的剩余时间"><a href="#formatRemainTime-格式化现在距-endTime-的剩余时间" class="headerlink" title="formatRemainTime  格式化现在距\${endTime}的剩余时间"></a><a name="rmo5nc"></a><a href="https://github.com/proYang/outils/blob/master/src/time/formatRemainTime.js" target="_blank" rel="noopener">formatRemainTime</a>  格式化现在距\${endTime}的剩余时间</h4><h3 id="Url"><a href="#Url" class="headerlink" title="Url"></a><a name="5sx1ve"></a>Url</h3><h4 id="parseQueryString-url参数转对象"><a href="#parseQueryString-url参数转对象" class="headerlink" title="parseQueryString  url参数转对象"></a><a name="l2nakz"></a><a href="https://github.com/proYang/outils/blob/master/src/url/parseQueryString.js" target="_blank" rel="noopener">parseQueryString</a>  url参数转对象</h4><h4 id="stringfyQueryString-对象序列化"><a href="#stringfyQueryString-对象序列化" class="headerlink" title="stringfyQueryString  对象序列化"></a><a name="1985tz"></a><a href="https://github.com/proYang/outils/blob/master/src/url/stringfyQueryString.js" target="_blank" rel="noopener">stringfyQueryString</a>  对象序列化</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;outils&quot;&gt;&lt;a href=&quot;#outils&quot; class=&quot;headerlink&quot; title=&quot;outils&quot;&gt;&lt;/a&gt;&lt;a name=&quot;hsyhio&quot;&gt;&lt;/a&gt;outils&lt;/h1&gt;&lt;p&gt;[&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.np
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端工程师必备技能图谱</title>
    <link href="http://lulustyle.net/2018/12/21/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1/"/>
    <id>http://lulustyle.net/2018/12/21/前端工程师必备技能图谱/</id>
    <published>2018-12-21T12:47:27.000Z</published>
    <updated>2018-12-27T01:35:19.813Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 底层原理及基础</span></span></p><hr><p><img src="https://cdn.nlark.com/yuque/0/2018/jpeg/84728/1545396465644-e341222c-1908-4962-8fcd-73762e2d8527.jpeg" alt="前端工程师必备技能图谱.jpg | center | 747x926"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何管理好10万行代码的前端单页面应用</title>
    <link href="http://lulustyle.net/2018/12/21/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%A5%BD10%E4%B8%87%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>http://lulustyle.net/2018/12/21/如何管理好10万行代码的前端单页面应用/</id>
    <published>2018-12-21T12:41:56.000Z</published>
    <updated>2018-12-27T01:35:19.816Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [Hexo]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: service</span></span></p><hr><h2 id="ToB产品特点"><a href="#ToB产品特点" class="headerlink" title="ToB产品特点"></a><a name="bghehy"></a>ToB产品特点</h2><ul><li>业务复杂度高、业务理解门槛高；</li><li>前端代码量巨大</li></ul><h2 id="架构方案"><a href="#架构方案" class="headerlink" title="架构方案"></a><a name="dwbzqa"></a>架构方案</h2><p>架构的目的是管理复杂度，将复杂问题分而治之、有效管理</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545396334512-3ff6e40c-40b2-4056-9da7-6ea0480283fc.png" alt="业务逻辑架构.png | center | 747x474"></p><ul><li>通过路由切割“页面级”粒度的功能模块</li><li>同一“页面”内的模块再划分<ul><li>纵向：通过业务功能（可根据视图模块判断）划分</li><li>横向：通过Model-View-Controller三种不同职能划分</li></ul></li><li>合并同类项：细分粒度，将可复用模块或组件抽离到公共区域<ul><li>数据模型：<ul><li>Domain Model 领域模型：详见ORM层</li><li>App State Modal 应用状态模型：详见应用状态模型</li></ul></li><li>UI组件：<ul><li>Container Component： 详见容器型组件</li><li>Presentational Component：详见展示型组件</li></ul></li><li>公共服务：<ul><li>所有的HTTP请求放在一起统一管理</li><li>日志服务、本地存储服务、错误监控、Mock服务等统一存放在公共服务层；</li></ul></li></ul></li><li>跨模块通信</li></ul><h2 id="合并同类项"><a href="#合并同类项" class="headerlink" title="合并同类项"></a><a name="o398vf"></a>合并同类项</h2><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545396392278-44ace169-1fa7-42b8-a095-8602db1fdcc6.png" alt="合并同类项.png | center | 747x385"></p><h3 id="ORM层（Domain-Model-Layer）"><a href="#ORM层（Domain-Model-Layer）" class="headerlink" title="ORM层（Domain Model Layer）"></a><a name="1bx2ys"></a>ORM层（Domain Model Layer）</h3><p>持久化到数据库或localStorage中，属于可跨模块复用的公共业务数据<br>如：Users 用户信息 | Datasets 数据集信息 | Reports 报表信息</p><p>抽离该公共层的好处：</p><ul><li>跨模块数据同步问题不复存在：<br>  例如：之前Users对象在A和B两个业务模块中单独存储，A模块变更Users对象后，需将Users变更同步到B模块中，如不同步，A、B模块在界面上呈现的User信息不一致，下沉到领域模型层统一管理后，问题不复存在；</li><li>除领域模型复用外，还可复用领域模型相关的CRUD Reducer：<br>  例如：之前Users对象对应的Create Read Update Delete方法可能在A和B两个业务模块各维护一套，下沉到领域模型层统一管理后，减少了代码重复问题；</li><li>自然承担了部分跨模块通信职责：<br>  之前数据同步相关的跨模块通信代码没有了存在的必要性；</li></ul><h3 id="应用状态模型"><a href="#应用状态模型" class="headerlink" title="应用状态模型"></a><a name="pqc8gt"></a>应用状态模型</h3><p>应用状态模型是与视图相关的状态数据：这些数据与具体的视图模块或业务功能强相关，建议存放在业务模块的Model中。<br>如：</p><ul><li>当前页面选中了列表的第n行 currentSelectedRow: someId</li><li>窗口是否处于打开状态 isModalShow: false</li><li>某种视图元素是否在拖拽中 isDragging: true</li></ul><h3 id="容器型组件"><a href="#容器型组件" class="headerlink" title="容器型组件"></a><a name="k2g0cr"></a>容器型组件</h3><p>容器型组件是与store直连的组件，为展示型组件或其它容器组件提供数据和行为，尽量避免在其中做一些界面渲染相关的事情。</p><h3 id="展示型组件"><a href="#展示型组件" class="headerlink" title="展示型组件"></a><a name="3rwokl"></a>展示型组件</h3><p>展示型组件独立于应用的其它部分内容，不关心数据的加载和变更，保持职责单一，仅做视图呈现和最基本交互行为，通过props接收数据和回调函数输出结果，保证接收的数据为组件数据依赖的最小集。</p><p>如果展示型组件粒度切分能很好的遵循高内聚低耦合和职责单一原则的话，可以沉淀出很多可复用的通用业务组件。</p><h2 id="跨模块通信"><a href="#跨模块通信" class="headerlink" title="跨模块通信"></a><a name="qi0rrb"></a>跨模块通信</h2><p>模块粒度逐渐细化，会带来更多的跨模块通信诉求，为避免模块间相互耦合、确保架构长期干净可维护，建议将跨模块通信的逻辑代码放在父模块中，或者在一个叫做Mediator层中单独维护</p><ul><li>不允许在一个模块内部直接调用其他模块的Dispatch方法（写操作、变更其他模块的state）</li><li>不允许在一个模块内部直接读取其他模块的state方法（读操作）</li></ul><h2 id="数据流管理"><a href="#数据流管理" class="headerlink" title="数据流管理"></a><a name="4sogkf"></a>数据流管理</h2><p>纯函数：入参相同的情况下，返回值恒等<br>非纯函数：函数中如果包含 Math.random，new Date(), 异步请求等内容，且影响到最终结果的返回，即为非纯函数</p><p>监听Store变更刷新视图的功能是由react-redux完成的：</p><ul><li style="list-style: none"><input type="checkbox"> <code>&lt;Provider&gt;</code> 组件通过context属性向后代<code>&lt;connect&gt;</code>组件提供（provide）store对象；</li><li style="list-style: none"><input type="checkbox"> <code>&lt;connect&gt;</code> 是一个高阶组件，作用是将store与view层组件连接起来（这里重复提一句，redux官方将<code>&lt;connect&gt;</code>直接连接的组件定义为container component），<code>&lt;connect&gt;</code>向开发者开放了几个回调函数钩子（mapStateToProps, mapDispatchToProps…）用于自定义注入 container component 的 props 的姿势；</li><li style="list-style: none"><input type="checkbox"> react-redux 监听 redux store 的变更，store 改变后通知每一个 connect 组件刷新自己和后代组件，为了减少不必要的刷新提升性能，connect 实现了 shouldComponentUpdate 方法，如果 props 不变的话，不刷新 connect 包裹的 container component；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [Hex
      
    
    </summary>
    
      <category term="业务场景解决方案" scheme="http://lulustyle.net/categories/service/"/>
    
    
      <category term="组件" scheme="http://lulustyle.net/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 中 publicPath 详解</title>
    <link href="http://lulustyle.net/2018/12/21/Webpack%20%E4%B8%AD%20publicPath%20%E8%AF%A6%E8%A7%A3/"/>
    <id>http://lulustyle.net/2018/12/21/Webpack 中 publicPath 详解/</id>
    <published>2018-12-21T12:39:18.000Z</published>
    <updated>2018-12-27T01:35:19.817Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h2 id="output"><a href="#output" class="headerlink" title="output"></a><a name="9v9aem"></a>output</h2><h3 id="output-path"><a href="#output-path" class="headerlink" title="output.path"></a><a name="1kd7an"></a>output.path</h3><ul><li>默认值：process.cwd()</li><li>只是指示输出的目录，对应一个<strong>绝对路径</strong></li><li><code>output: {path: path.resolve(__dirname, &#39;../dist&#39;),}</code></li></ul><h3 id="output-publicPath"><a href="#output-publicPath" class="headerlink" title="output.publicPath"></a><a name="b9acef"></a>output.publicPath</h3><ul><li>默认值：空字符串</li><li>帮助你为项目中的所有资源指定一个基础路径，它被称为公共路径(<code>publicPath</code>)</li><li>所有资源的基础路径: 项目中引用css，js，img等资源时候的一个基础路径,要配合具体资源中指定的路径使用</li><li><code>静态资源最终访问路径 =</code>output.publicPath<code>+ 资源loader或插件等配置路径</code></li><li>静态资源最终访问路径: 在使用<code>html-webpack-plugin</code>打包后得到的html中可以看到</li><li>相对路径: 相对于<code>build</code>之后的<code>index.html</code>(如果设置<code>publicPath: &#39;./dist/&#39;</code>，则打包后js的引用路径为<code>./dist/build.js</code>)</li><li>将<code>publicPath</code>设置成/,则打包后访问路径为<code>localhost:8080/dist/main.js</code>，本地无法访问</li><li>一般情况下publicPath应该以’/‘结尾，而其他loader或插件的配置不要以’/‘开头</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">output.publicPath = <span class="string">'/dist/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// image</span></span><br><span class="line">options: &#123;</span><br><span class="line"> name: <span class="string">'img/[name].[ext]?[hash]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终图片的访问路径为</span></span><br><span class="line">output.publicPath + <span class="string">'img/[name].[ext]?[hash]'</span> = <span class="string">'/dist/img/[name].[ext]?[hash]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js output.filename</span></span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'[name].js'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终js的访问路径为</span></span><br><span class="line">output.publicPath + <span class="string">'[name].js'</span> = <span class="string">'/dist/[name].js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// extract-text-webpack-plugin css</span></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">filename: <span class="string">'style.[chunkhash].css'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 最终css的访问路径为</span></span><br><span class="line">output.publicPath + <span class="string">'style.[chunkhash].css'</span> = <span class="string">'/dist/style.[chunkhash].css'</span></span><br></pre></td></tr></table></figure><h2 id="webpack-dev-server中的publicPath"><a href="#webpack-dev-server中的publicPath" class="headerlink" title="webpack-dev-server中的publicPath"></a><a name="a8a6ok"></a>webpack-dev-server中的publicPath</h2><ul><li>在开发阶段，我们借用devServer启动一个开发服务器进行开发，这里也会配置一个publicPath</li><li>webpack-dev-server中的publicPath路径下的打包文件可以在浏览器中访问。而静态资源仍然使用output.publicPath</li><li>webpack-dev-server打包的内容是放在内存中的，这些打包后的资源对外的的根目录就是publicPath</li><li>通过访问 <code>http://localhost:8080/webpack-dev-server</code>可以得到devServer启动后的资源访问路径，点击静态资源可以看到静态资源的访问路径为 <code>http://localhost:8080${publicPath}index.html</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 假设devServer的publicPath为</span><br><span class="line">const publicPath = &apos;/dist/&apos;</span><br><span class="line">// 则启动devServer后index.html的位置为</span><br><span class="line">const htmlPath = `$&#123;pablicPath&#125;index.html`</span><br><span class="line">// 包的位置</span><br><span class="line">cosnt mainJsPath = `$&#123;pablicPath&#125;main.js`</span><br></pre></td></tr></table></figure><p>以上可以直接通过<a href="http://lcoalhost:8080/dist/main.js访问到" target="_blank" rel="noopener">http://lcoalhost:8080/dist/main.js访问到</a></p><h2 id="html-webpack-plugin中的会受到路径影响的属性"><a href="#html-webpack-plugin中的会受到路径影响的属性" class="headerlink" title="html-webpack-plugin中的会受到路径影响的属性"></a><a name="opi3so"></a>html-webpack-plugin中的会受到路径影响的属性</h2><h3 id="template"><a href="#template" class="headerlink" title="template"></a><a name="6dzicw"></a>template</h3><ul><li>作用：用于定义模版文件的路径</li><li>源码：<code>this.options.template = this.getFullTemplatePath(this.options.template, compiler.context);</code></li><li>因此template只有定义在<strong>webpack的context</strong>下才会被识别，<code>webpack context</code>的默认值为<code>process.cwd()</code>，即运行 node 命令时所在的文件夹的绝对路径</li></ul><h3 id="filename"><a href="#filename" class="headerlink" title="filename"></a><a name="i691ou"></a>filename</h3><ul><li>作用：输出的HTML文件名，默认为index.html，可以直接配置带有子目录</li><li>源码：<code>this.options.filename = path.relative(compiler.options.output.path, filename);</code></li><li>所以filename的路径是相对于output.path的，而在webpack-dev-server中，则是相对于webpack-dev-server配置的publicPath。</li><li>如果webpack-dev-server的publicPath和output.publicPath不一致，在使用html-webpack-plugin可能会导致引用静态资源失败，因为在devServer中仍然以output.publicPath引用静态资源，和webpack-dev-server的提供的资源访问路径不一致，从而无法正常访问。</li><li>有一种情况除外，就是output.publicPath是相对路径，这时候可以访问本地资源</li><li>所以一般情况下都要保证devServer中的publicPath与output.publicPath保持一致。</li></ul><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a><a name="6kumgb"></a>路径</h2><h3 id="斜杠"><a href="#斜杠" class="headerlink" title="斜杠"></a><a name="uce7bk"></a>斜杠</h3><p>配置中<code>/</code>代表url根路径：（例如<a href="http://localhost:8080/dist/js/test.js中的http://localhost:8080/）" target="_blank" rel="noopener">http://localhost:8080/dist/js/test.js中的http://localhost:8080/）</a></p><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a><a name="6dr5ox"></a>devServer</h3><ul><li>devServer.contentBase 告诉服务器从哪里提供内容。只有在你想要提供静态文件时才需要。</li><li>devServer.publicPath 将用于确定应该从哪里提供 bundle，并且此选项优先。</li></ul><h3 id="node中的路径"><a href="#node中的路径" class="headerlink" title="node中的路径"></a><a name="6x3fto"></a>node中的路径</h3><p>文件结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">    -lib/</span><br><span class="line">        -common.js</span><br><span class="line">    -model</span><br><span class="line">        -task.js</span><br><span class="line">        -test.js</span><br></pre></td></tr></table></figure></p><p>task.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(__dirname); <span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(__filename);</span><br><span class="line"><span class="built_in">console</span>.log(process.cwd());</span><br><span class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">'./'</span>));</span><br></pre></td></tr></table></figure><p>在 model 目录下运行 node task.js 得到的输出是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/guo/Sites/learn/app/model</span><br><span class="line">/Users/guo/Sites/learn/app/model/task.js</span><br><span class="line">/Users/guo/Sites/learn/app/model</span><br><span class="line">/Users/guo/Sites/learn/app/model</span><br></pre></td></tr></table></figure><p>在 app 目录下运行 node model/task.js，得到的输出是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/guo/Sites/learn/app/model</span><br><span class="line">/Users/guo/Sites/learn/app/model/task.js</span><br><span class="line">/Users/guo/Sites/learn/app</span><br><span class="line">/Users/guo/Sites/learn/app</span><br></pre></td></tr></table></figure><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a><a name="bgzlen"></a>绝对路径</h4><ul><li><code>__dirname</code>: 总是返回被执行的 js 所在文件夹的绝对路径</li><li><code>__filename</code>: 总是返回被执行的 js 的绝对路径</li><li><code>process.cwd()</code>: 总是返回运行 node 命令时所在的文件夹的绝对路径</li></ul><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a><a name="bitcom"></a>相对路径</h4><ul><li>./ : 在 require() 中使用是跟 <code>__dirname</code> 的效果相同，不会因为启动脚本的目录不一样而改变，在其他情况下跟 process.cwd() 效果相同，是相对于启动脚本所在目录的路径。</li><li>../</li></ul><p>require的路径必须是相对于当前执行文件的,只有在 require() 时才使用相对路径(./, ../) 的写法，其他地方一律使用绝对路径，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 当前目录下</span><br><span class="line">path.dirname(__filename) + <span class="string">'/test.js'</span>;</span><br><span class="line">// 相邻目录下</span><br><span class="line">path.resolve(__dirname, <span class="string">'../lib/common.js'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自己写 cli 提高工作效率</title>
    <link href="http://lulustyle.net/2018/12/21/%E8%87%AA%E5%B7%B1%E5%86%99%20cli%20%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    <id>http://lulustyle.net/2018/12/21/自己写 cli 提高工作效率/</id>
    <published>2018-12-21T07:06:44.000Z</published>
    <updated>2018-12-27T01:35:19.819Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h1 id="cli-工具需要满足的需求"><a href="#cli-工具需要满足的需求" class="headerlink" title="cli 工具需要满足的需求"></a><a name="x8c4hn"></a>cli 工具需要满足的需求</h1><ol><li>获得用户的输入，并且根据相应的输入，可以定制编程相应执行逻辑</li><li>模板代码有两种实现思路，一是采用代码生成，二是分离静态资源模板</li><li>使用包管理工具</li></ol><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a><a name="i59odo"></a>项目需求</h1><ul><li>自动创建组件需要的目录</li><li>自动添加模版代码</li><li>添加组件 js 和 css 代码</li></ul><h1 id="推荐包"><a href="#推荐包" class="headerlink" title="推荐包"></a><a name="08hbkv"></a>推荐包</h1><h3 id="commander"><a href="#commander" class="headerlink" title="commander"></a><a name="0vguqi"></a>commander</h3><p><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander.js</a></p><p>commander是目前很成熟的Node命令行交互接口实现工具，使用该工具可以很便捷很快速地实现第一点需求</p><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git-clone"></a><a name="r4r6ur"></a>git-clone</h3><p>git-clone是一个很轻量的Node编写的git clone封装，可以很便捷很快速地从github上克隆执行项目模板。也就是说，我们将项目模板静态存储在github上，每当执行cli命令时，将其下载，这样我们就很轻松地得到了项目代码模板。另外，当需要改变项目模板代码时，只需要修改github上的项目代码就可以，cli工具无需修改</p><h3 id="shelljs"><a href="#shelljs" class="headerlink" title="shelljs"></a><a name="m4d1gg"></a>shelljs</h3><p>shelljs同样是一个很轻量的Node编写的系统命令封装，可以很便捷很快速地在Node代码中使用系统命令。在本例中，因为从github上下载的项目代码会带有.git文件，需要使用rm命令将其删除</p><h3 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a><a name="yhikdr"></a>chalk</h3><p>用于高亮终端打印出来的信息</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a><a name="4t2xcu"></a>request</h3><p>发送http请求的工具</p><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a><a name="2up2uq"></a>初始化项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir rc-new</span><br><span class="line"><span class="built_in">cd</span> rc-new</span><br><span class="line">npm init -y</span><br><span class="line">yarn add react</span><br></pre></td></tr></table></figure><h1 id="创建模板文件"><a href="#创建模板文件" class="headerlink" title="创建模板文件"></a><a name="axtyzg"></a>创建模板文件</h1><p>React 新建组件的方式有三种：</p><ul><li>类组件：class.jsx</li><li>函数组件: functional.jsx</li><li>纯组件: pure-class.jsx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir src </span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">mkdir template</span><br><span class="line"><span class="built_in">cd</span> template</span><br><span class="line">touch class.jsx functional.jsx pure-class.jsx</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// COMPONENT_NAME 是占位符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">COMPONENT_NAME</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default COMPONENT_NAME;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> COMPONENT_NAME = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default COMPONENT_NAME;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">COMPONENT_NAME</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default COMPONENT_NAME;</span></span><br></pre></td></tr></table></figure><h1 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a><a name="648wpm"></a>命令行工具</h1><p>1、package.json 设置入口文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"bin": &#123;</span><br><span class="line">   "rc-new": "./src/index.js"</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><p>2、在 bin/index.js 顶部声明此文件需要调用 Node.js 执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!usr/bin/env/ node</span></span><br></pre></td></tr></table></figure></p><p>3、命令行交互模块 commander.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add chalk commander prettier</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br></pre></td></tr></table></figure><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a><a name="du0wsr"></a>执行</h1><p>打开命令行工具，进入当前开发文件夹,输入命令bin/index.js，即可以输出“my first cli”</p><p>我们如何像发布后一样，直接输node-cli命令就可以调用我们的主文件呢？</p><p>在开发目录执行<code>sudo npm link</code>将模块链接到全局，如想去掉 link，执行<code>sudo npm unlink</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack To V4 from V3</title>
    <link href="http://lulustyle.net/2018/12/19/webpack%20To%20V4%20from%20V3/"/>
    <id>http://lulustyle.net/2018/12/19/webpack To V4 from V3/</id>
    <published>2018-12-19T10:11:47.000Z</published>
    <updated>2018-12-27T01:35:19.821Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a name="t57ggz"></a>Node.js</h1><p>Node.js &gt;= V6</p><h1 id="Cli"><a href="#Cli" class="headerlink" title="Cli"></a><a name="i3eehd"></a>Cli</h1><p>webpack-cli 需要单独安装</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a><a name="h0ento"></a>插件</h1><p>许多插件需要更新到最新的可兼容版本</p><h1 id="mode"><a href="#mode" class="headerlink" title="mode"></a><a name="ye1ukm"></a>mode</h1><p>新特性用来区分环境<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  mode: 'production',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者通过命令行Cli命令：<code>--mode production</code><span data-type="color" style="color:rgb(43, 58, 66)">/</span><code>--mode development</code></p><h1 id="已移除-分离的插件"><a href="#已移除-分离的插件" class="headerlink" title="已移除|分离的插件"></a><a name="qy1gsk"></a>已移除|分离的插件</h1><h2 id="prod-模式移除的插件"><a href="#prod-模式移除的插件" class="headerlink" title="prod 模式移除的插件"></a><a name="arkyyv"></a>prod 模式移除的插件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">-    new NoEmitOnErrorsPlugin(),</span><br><span class="line">-    new ModuleConcatenationPlugin(),</span><br><span class="line">-    new DefinePlugin(&#123; "process.env.NODE_ENV": JSON.stringify("production") &#125;)</span><br><span class="line">-    new UglifyJsPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dev-模式移除的插件"><a href="#dev-模式移除的插件" class="headerlink" title="dev 模式移除的插件"></a><a name="d95ntr"></a>dev 模式移除的插件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">-    new NamedModulesPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="已经分离的插件"><a href="#已经分离的插件" class="headerlink" title="已经分离的插件"></a><a name="blu5zr"></a>已经分离的插件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">-    new NoErrorsPlugin(),</span><br><span class="line">-    new NewWatchingPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再见-CommonsChunkPlugin"><a href="#再见-CommonsChunkPlugin" class="headerlink" title="再见 CommonsChunkPlugin"></a><a name="kinwao"></a>再见 CommonsChunkPlugin</h2><p>提取公共代码 webpack4.0 不再使用CommonsChunkPlugin，取而代之的是内置的 <a href="https://webpack.js.org/configuration/optimization/#optimization-splitchunks" target="_blank" rel="noopener">optimization.splitChunks</a> ，默认的配置或许可以完全满足你的需求</p><blockquote><p>1、commonchunk配置项被彻底去掉，之前需要通过配置两次 new webpack.optimize.CommonsChunkPlugin 来分别获取 vendor 和 manifest 的通用chunk方式已经做了整合，<strong> 直接在optimization中配置 runtimeChunk 和 splitChunks 即可 </strong>，提取功能也更为强大<br>2、runtimeChunk 可以配置成 true，single 或者对象，用自动计算当前构建的一些基础chunk信息，类似之前版本中的 manifest 信息获取方式。<br>3、webpack.optimize.UglifyJsPlugin 现在也不需要了，只需要使用 optimization.minimize 为 true 就行，production mode下面自动为 true，当然如果想使用第三方的压缩插件也可以在 optimization.minimizer 的数组列表中进行配置</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: 'async',</span><br><span class="line">      minSize: 30000,</span><br><span class="line">      maxSize: 0,</span><br><span class="line">      minChunks: 1,</span><br><span class="line">      maxAsyncRequests: 5,</span><br><span class="line">      maxInitialRequests: 3,</span><br><span class="line">      automaticNameDelimiter: '~',</span><br><span class="line">      name: true,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: /[\\/]node_modules[\\/]/,</span><br><span class="line">          priority: -10</span><br><span class="line">        &#125;,</span><br><span class="line">        default: &#123;</span><br><span class="line">          minChunks: 2,</span><br><span class="line">          priority: -20,</span><br><span class="line">          reuseExistingChunk: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="再见-extract-text-webpack-plugin"><a href="#再见-extract-text-webpack-plugin" class="headerlink" title="再见 extract-text-webpack-plugin"></a><a name="tps9ok"></a>再见 extract-text-webpack-plugin</h3><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">提取 JS 中的 CSS 代码到单独的文件中 </span></span>webpack4.0 不再使用 extract-text-webpack-plugin，取而代之的是<a href="https://webpack.js.org/plugins/mini-css-extract-plugin/" target="_blank" rel="noopener">mini-css-extract-plugin</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> devMode = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      <span class="comment">// Options similar to the same options in webpackOptions.output</span></span><br><span class="line">      <span class="comment">// both options are optional</span></span><br><span class="line">      filename: devMode ? <span class="string">'[name].css'</span> : <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">      chunkFilename: devMode ? <span class="string">'[id].css'</span> : <span class="string">'[id].[hash].css'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(le|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          devMode ? <span class="string">'style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'postcss-loader'</span>,</span><br><span class="line">          <span class="string">'less-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">"uglifyjs-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        parallel: <span class="literal">true</span>, <span class="comment">// 多线程</span></span><br><span class="line">        sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"[name].css"</span>,</span><br><span class="line">      chunkFilename: <span class="string">"[id].css"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sa|sc|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">           MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'postcss-loader'</span>,</span><br><span class="line">          <span class="string">'less-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import-and-CommonJS"><a href="#import-and-CommonJS" class="headerlink" title="import() and CommonJS"></a><a name="kua8ab"></a>import() and CommonJS</h2><p>当通过 <span data-type="color" style="color:rgb(43, 58, 66)"><span data-type="background" style="background-color:rgba(70, 94, 105, 0.05)">import()  </span></span>导入 <strong>non-esm.js 的结果时，现在你需要通过 </strong><span data-type="color" style="color:rgb(43, 58, 66)"><span data-type="background" style="background-color:rgba(70, 94, 105, 0.05)">default  属性来获取 module.exports 的值</span></span></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># non-esm.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  sayHello: () =&gt; &#123;</span><br><span class="line">    console.log('hello world');</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># example.jsc</span><br><span class="line">function sayHello() &#123;</span><br><span class="line">  import('./non-esm.js').then(module =&gt; &#123;</span><br><span class="line">    module.default.sayHello();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="json-and-loaders"><a href="#json-and-loaders" class="headerlink" title="json and loaders"></a><a name="e87vwv"></a>json and loaders</h2><p>当用自定义的loader来转换 <span data-type="color" style="color:rgb(43, 58, 66)"><span data-type="background" style="background-color:rgba(70, 94, 105, 0.05)">.json </span></span>文件时，需要添加 <span data-type="background" style="background-color:#FADB14">module.rules.</span><span data-type="color" style="color:rgb(43, 58, 66)"><span data-type="background" style="background-color:#FADB14">type</span></span><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /config\.json$/,</span><br><span class="line">      loader: 'special-loader',</span><br><span class="line">+     type: 'javascript/auto',</span><br><span class="line">      options: &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果使用 <span data-type="color" style="color:rgb(43, 58, 66)"><span data-type="background" style="background-color:rgba(70, 94, 105, 0.05)">json-loader </span></span> ，可以移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">-     test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">-     loader: <span class="string">'json-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="module-loaders"><a href="#module-loaders" class="headerlink" title="module.loaders"></a><a name="4z4hww"></a>module.loaders</h2><p><span data-type="color" style="color:rgb(43, 58, 66)"><span data-type="background" style="background-color:rgba(70, 94, 105, 0.05)">module.loaders </span></span> 已移除，被 <a href="https://webpack.js.org/configuration/module/#rule" target="_blank" rel="noopener">module.rules</a> 取代</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="pm5xls"></a>参考资源</h2><p>更多插件请见 <a href="https://webpack.js.org/plugins/" target="_blank" rel="noopener">https://webpack.js.org/plugins/</a></p><h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a><a name="9m4tlh"></a>报错信息</h1><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545214674490-15097e94-3a47-4611-8315-9b26dbcdb3f1.png" alt="image.png | left | 747x102"></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545214733586-4b5facf3-65ca-429c-89a3-ccdf47c3f77f.png" alt="image.png | left | 747x230"></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545354544744-b4ebd051-4508-490a-beca-d69eb2fb186f.png" alt="image.png | left | 747x273"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VScode 插件工具集，不求全但求好</title>
    <link href="http://lulustyle.net/2018/12/18/VScode%20%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7%E9%9B%86%EF%BC%8C%E4%B8%8D%E6%B1%82%E5%85%A8%E4%BD%86%E6%B1%82%E5%A5%BD/"/>
    <id>http://lulustyle.net/2018/12/18/VScode 插件工具集，不求全但求好/</id>
    <published>2018-12-18T07:36:06.000Z</published>
    <updated>2018-12-27T01:35:19.822Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">更多插件可以到官网自行探索</a></p><p>根据调查发现，VScode 和 sublime 是前端开发者比较喜欢的 IDE 。“工欲善其事，必先利其器”，我是一个爱折腾的工具控，刚开始用 VScode 的时候，装了一堆的插件，导致只要开启 VScode 再接上大屏，我的 Mac 就会强烈的反抗，风扇一直呼啸，😳😳….后来就开启卸载模式，开始一直卸，最终保留一些小而美，使用率高的插件，整理一份以便不备之需。</p><p>而对于一个团队而言，大家用同一套快捷键，同一个IDE，同一套插件，那么结对编程将会是一件特别幸福的事情。和帅哥哥一起编程还是可以学到很多东西的，嘻嘻～～</p><h2 id=""><a href="#" class="headerlink" title=""></a><a name="fdq5wt"></a></h2><h2 id="一、代码快捷键"><a href="#一、代码快捷键" class="headerlink" title="一、代码快捷键"></a><a name="fdq5wt"></a>一、代码快捷键</h2><p>在 VScode 的首页可以设置通用快捷键，因为平常用sublime比较多，所以干脆合并成一套。</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-40a907bac6659ad1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image | left"></p><h2 id="二、代码提示"><a href="#二、代码提示" class="headerlink" title="二、代码提示"></a><a name="fgtrni"></a>二、代码提示</h2><h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a><a name="ubgshx"></a>Path Intellisense</h3><p>自动路径补全</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-bb654863cc5c4b22?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="Document-this"><a href="#Document-this" class="headerlink" title="Document this"></a><a name="r2f9dh"></a>Document this</h3><p>js 的注释模板 （注意：新版的 vscode 已经原生支持,在 function 上输入 /** tab ）</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-0ab5bfc937d0c007?imageMogr2/auto-orient/strip" alt="image | left"></p><h2 id="三、代码格式"><a href="#三、代码格式" class="headerlink" title="三、代码格式"></a><a name="13kgce"></a>三、代码格式</h2><h3 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a><a name="gqwayo"></a>ESlint</h3><p>代码规范，对不符合要求的代码或者有语法错误的JS代码进行提示，可以自定制提示规则</p><h3 id="HTMLHint"><a href="#HTMLHint" class="headerlink" title="HTMLHint"></a><a name="bgyqfz"></a>HTMLHint</h3><p>html代码检测</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-4e55e0669de282da?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image | left"></p><h3 id="beautify"><a href="#beautify" class="headerlink" title="beautify"></a><a name="vmaien"></a>beautify</h3><p>格式化代码的工具</p><h2 id="四、代码可视化改善"><a href="#四、代码可视化改善" class="headerlink" title="四、代码可视化改善"></a><a name="f8eoyv"></a>四、代码可视化改善</h2><h3 id="colorize"><a href="#colorize" class="headerlink" title="colorize"></a><a name="th4acu"></a>colorize</h3><p>可视化颜色哦，做组件涉及很多不同的主题，个人还是蛮稀饭的</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-3ea2845035230329?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="RegExp-Preview-and-Editor"><a href="#RegExp-Preview-and-Editor" class="headerlink" title="RegExp Preview and Editor"></a><a name="dpstqc"></a>RegExp Preview and Editor</h3><p>这个就厉害了.可以完美的展示你写的正则,图形化给你看你写正则的形成</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-44d4a16ffdb80acf?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="Better-Comments"><a href="#Better-Comments" class="headerlink" title="Better Comments"></a><a name="5ck9mr"></a>Better Comments</h3><p>最好用的注释区域高亮,对于TODO这些支持也很好</p><h3 id="BreadCrumb-in-StatusBar"><a href="#BreadCrumb-in-StatusBar" class="headerlink" title="BreadCrumb in StatusBar"></a><a name="prxbfk"></a>BreadCrumb in StatusBar</h3><p><img src="https://upload-images.jianshu.io/upload_images/5383939-0e76ffb466881bf8?imageMogr2/auto-orient/strip" alt="image | left"></p><hr><p>华丽丽的分割线，以下插件根据框架语言选择，用什么装什么，不用就不要装了，浪费内存</p><h2 id="五、React-插件"><a href="#五、React-插件" class="headerlink" title="五、React 插件"></a><a name="3o8qew"></a>五、React 插件</h2><h3 id="ES7-React-Redux-GraphQL-React-Native-snippets"><a href="#ES7-React-Redux-GraphQL-React-Native-snippets" class="headerlink" title="ES7 React/Redux/GraphQL/React-Native snippets"></a><a name="csi3bk"></a>ES7 React/Redux/GraphQL/React-Native snippets</h3><p>涵盖的代码片段贼丰富，React 相关代码提示有这个就够了</p><h3 id="Useful-React-Snippets"><a href="#Useful-React-Snippets" class="headerlink" title="Useful React Snippets"></a><a name="4c9itr"></a>Useful React Snippets</h3><p>当然如果你只用React,那用这个代码提示吧，管够了</p><h3 id="CSS-Blocks"><a href="#CSS-Blocks" class="headerlink" title="CSS Blocks"></a><a name="w22ykc"></a>CSS Blocks</h3><p>支持 css 模块化的智能提示，跳转，墙裂推荐</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-86773b25f36401b9?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="styled-components-snippets"><a href="#styled-components-snippets" class="headerlink" title="styled-components-snippets"></a><a name="zrkptg"></a>styled-components-snippets</h3><p>styled-components 的代码片段</p><h2 id="六、Vue-插件"><a href="#六、Vue-插件" class="headerlink" title="六、Vue 插件"></a><a name="l54eud"></a>六、Vue 插件</h2><h3 id="vetur"><a href="#vetur" class="headerlink" title="vetur"></a><a name="wp3prr"></a>vetur</h3><p>语法高亮、智能感知、Emmet 等</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-c327888e2e4f4035?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image | left"></p><h3 id="VueHelper"><a href="#VueHelper" class="headerlink" title="VueHelper"></a><a name="1ntxut"></a>VueHelper</h3><p>snippet 代码片段</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-0edc302df5b0c10d?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="Vue-VSCode-Snippets"><a href="#Vue-VSCode-Snippets" class="headerlink" title="Vue VSCode Snippets"></a><a name="0go3ai"></a>Vue VSCode Snippets</h3><p>很全面的vue代码片段</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-db0aa01a0b5489b3?imageMogr2/auto-orient/strip" alt="image | left"></p><h2 id="七、Node"><a href="#七、Node" class="headerlink" title="七、Node"></a><a name="dr5wcd"></a>七、Node</h2><h3 id="eggjs"><a href="#eggjs" class="headerlink" title="eggjs"></a><a name="bwz8it"></a>eggjs</h3><p>蛋框的相关帮助插件,代码片段,智能提示等</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-17f24db5acef42e8?imageMogr2/auto-orient/strip" alt="image | left"></p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-b044554eaa227b16?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="egg-jump-definition"><a href="#egg-jump-definition" class="headerlink" title="egg-jump-definition"></a><a name="s2zhhi"></a>egg-jump-definition</h3><p>蛋框的函数跳转：Cmd+4</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-b257bcccbab6fd5d?imageMogr2/auto-orient/strip" alt="image | left"></p><h2 id="八、微信小程序"><a href="#八、微信小程序" class="headerlink" title="八、微信小程序"></a><a name="u9fveh"></a>八、微信小程序</h2><h3 id="mpvue-snippets"><a href="#mpvue-snippets" class="headerlink" title="mpvue snippets"></a><a name="31orbv"></a>mpvue snippets</h3><p>mpvue的一些代码片段,以及部分原生小程序的代码提示</p><h3 id="minapp"><a href="#minapp" class="headerlink" title="minapp"></a><a name="3n0rzq"></a>minapp</h3><p>用VS Code写小程序必备的插件,里面有众多实用的特性集成</p><h2 id="九、Markdown-插件"><a href="#九、Markdown-插件" class="headerlink" title="九、Markdown 插件"></a><a name="zpgdfq"></a>九、Markdown 插件</h2><h3 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a><a name="tgtswt"></a>Markdown All in One</h3><p>Markdown 的提示插件用这一个足以，集成了语法快捷键、Math、预览等，很实用</p><h3 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a><a name="dlsvkl"></a>markdownlint</h3><p>对 markdown 的语法格式规范进行代码提示</p><h2 id="十、代码审查"><a href="#十、代码审查" class="headerlink" title="十、代码审查"></a><a name="epfvur"></a>十、代码审查</h2><h3 id="CodeMetrics"><a href="#CodeMetrics" class="headerlink" title="CodeMetrics"></a><a name="50smcl"></a>CodeMetrics</h3><p>可以计算TS/JS内代码的复杂度(比如函数这些),这些与代码质量和性能是挂钩的</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-5512115fb73e220e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image | left"></p><h3 id="Import-Cost"><a href="#Import-Cost" class="headerlink" title="Import Cost"></a><a name="xyydzw"></a>Import Cost</h3><p>就是你import一个东西的时候,可以计算改引入模块的大小!</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-0d7510d3db09073f?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="Git-Lens"><a href="#Git-Lens" class="headerlink" title="Git Lens"></a><a name="n0ggxp"></a>Git Lens</h3><p>暂时没有发现比这个看git记录更为详细了</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-ce6714eec2662f83?imageMogr2/auto-orient/strip" alt="image | left"></p><h2 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a><a name="o8gmbd"></a>十一、其他</h2><p>下面的插件可有可无，如有相应功能的需求，却也是非常棒的插件</p><h3 id="fileheader"><a href="#fileheader" class="headerlink" title="fileheader"></a><a name="ra3nao"></a>fileheader</h3><p>顶部注释模板，可定义作者、时间等信息，并会自动更新最后修改时间</p><blockquote><p>ctrl+alt+i</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5383939-083ab547acb32459?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="Paste-JSON-as-Code"><a href="#Paste-JSON-as-Code" class="headerlink" title="Paste JSON as Code"></a><a name="gisbma"></a>Paste JSON as Code</h3><p>JSON 格式转换成其他的语言格式</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-0e8a6a469c19f477?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="Node-js-Modules-Intellisense"><a href="#Node-js-Modules-Intellisense" class="headerlink" title="Node.js Modules Intellisense"></a><a name="on2qni"></a>Node.js Modules Intellisense</h3><p>对于 node_module 的智能提示</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-bc7b3e8f8f6eef9e?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="npm-import-package-version"><a href="#npm-import-package-version" class="headerlink" title="npm-import-package-version"></a><a name="vw64mm"></a>npm-import-package-version</h3><p>显示导入的 npm 包的版本信息</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-8471585bd666ef67?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="File-Tree-View"><a href="#File-Tree-View" class="headerlink" title="File Tree View"></a><a name="ftwhbr"></a>File Tree View</h3><p>提供几个常见编程语言的函数或状态的树集合展示,可以快速点击跳转!!</p><h3 id="NPM-Scripts"><a href="#NPM-Scripts" class="headerlink" title="NPM-Scripts"></a><a name="rhtuke"></a>NPM-Scripts</h3><p>在侧边栏可视化执行 npm 命令(项目内的package.json),  小巧实用</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-c36064e8349bb1fd?imageMogr2/auto-orient/strip" alt="image | left"></p><h3 id="emojisense"><a href="#emojisense" class="headerlink" title=":emojisense:"></a><a name="6o0gaf"></a>:emojisense:</h3><p><img src="https://upload-images.jianshu.io/upload_images/5383939-6a72b88473d23b7c?imageMogr2/auto-orient/strip" alt="image | left"></p><h2 id="十二、代码片段"><a href="#十二、代码片段" class="headerlink" title="十二、代码片段"></a><a name="0bzrhc"></a>十二、代码片段</h2><p>两种方式定义代码片段</p><p>菜单栏-&gt;文件-&gt;首选项-&gt;用户代码片段</p><p><img src="https://upload-images.jianshu.io/upload_images/5383939-9517e03b59ffa72f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image | left"></p><p><span data-type="background" style="background-color:#FADB14">ctrl+shift + p =&gt; snippet</span></p><ul><li><p>toRem: 只是一个单纯的描述</p></li><li><p>prefix: 是触发snippet的简写</p></li><li><p>body: 是展开的代码片段</p></li><li><p>\$1,\$2：表示占位符，用于用户展开代码片段所需要替换的，也可以写成\${1:label}键值对的方式</p></li><li><p>description: 用户你在输出snippet之前，方便自己识别的注释，而不用强行记忆那些简写的</p><blockquote></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;更多插件可以到官网自行探索&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据调查发现，VScode 和 sublime 是前端
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>package.json 的解读</title>
    <link href="http://lulustyle.net/2018/12/17/package.json%20%E7%9A%84%E8%A7%A3%E8%AF%BB/"/>
    <id>http://lulustyle.net/2018/12/17/package.json 的解读/</id>
    <published>2018-12-17T07:09:31.000Z</published>
    <updated>2018-12-27T01:35:19.824Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h1 id="官方字段"><a href="#官方字段" class="headerlink" title="官方字段"></a><a name="e438um"></a>官方字段</h1><h2 id="json-和-JS-对象的区别"><a href="#json-和-JS-对象的区别" class="headerlink" title="json 和 JS 对象的区别"></a><a name="lpfreb"></a>json 和 JS 对象的区别</h2><p>package.json，顾名思义，它是一个json文件，而不能写入JS对象。<br>所以我们首先要搞懂的是JSON和JS对象的区别：</p><div class="bi-table"><br>  <table><br>    <colgroup><br>      <col width="auto"><br>      <col width="auto"><br>      <col width="auto"><br>    </colgroup><br>    <tbody><br>      <tr><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">区别</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">Json</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">Javascript对象</div><br>        </td><br>      </tr><br>      <tr><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">含义</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">仅仅是一种数据格式</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">表示类的实例</div><br>        </td><br>      </tr><br>      <tr><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">传输</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">可以跨平台数据传输，速度快</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">不能传输</div><br>        </td><br>      </tr><br>      <tr><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">表现</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">1、键值对方式，键必须加双引号 2、值不能是方法函数，不能是undefined|NaN<br>          </div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">1、键值对方式，键不加引号 2、值可以是函数、对象、字符串、数字、boolean等<br>          </div><br>        </td><br>      </tr><br>      <tr><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">相互转换</div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">Json转化为JS对象： 1、JSON.parse(jsonstring); 2、json=eval(“(“+jsonstring+”)”)<br>          </div><br>        </td><br>        <td rowspan="1" colspan="1"><br>          <div data-type="p">JS对象转换为JSON: JSON.stringify(json)<br>          </div><br>        </td><br>      </tr><br>    </tbody><br>  </table><br></div><p>【注意】 在JSON中属性名一定要加上双引号</p><h2 id="name-字段"><a href="#name-字段" class="headerlink" title="name 字段"></a><a name="57agkw"></a>name 字段</h2><p><strong>name字段的限制</strong></p><ul><li>name字段必须小于214字符（这个没什么好记的～）</li><li>name字段不能包含有“.”符号和下划线（这个要记一下哦～）</li><li>name字段不能包含有大写字母（这个要记一下哦～）</li><li>name字段不能含有非URL安全的字符，因为它将当发布的时候，它将作为你的包的相关信息被写入URL中<br>  那么，有哪些算是非URL安全的字符呢？咱们看表说话：</li></ul><p><img src="./book/assets/url_safecode.png" alt="image | left"></p><h2 id="version-字段"><a href="#version-字段" class="headerlink" title="version 字段"></a><a name="1t9sbg"></a>version 字段</h2><h3 id="npm对version定义的规则要求"><a href="#npm对version定义的规则要求" class="headerlink" title="npm对version定义的规则要求"></a><a name="d31agy"></a>npm对version定义的规则要求</h3><p>对于”version”:”x.y.z”<br>1.修复bug,小改动，增加z<br>2.增加了新特性，但仍能向后兼容，增加y<br>3.有很大的改动，无法向后兼容,增加x</p><p>例如：我原本的项目是1.0.0版本的话<br>若是1中情况，变为1.0.1<br>若是2中情况，变为1.1.0<br>若是3中情况，变为2.0.0</p><h3 id="npm-有自己的检验version的模块——node-semver"><a href="#npm-有自己的检验version的模块——node-semver" class="headerlink" title="npm 有自己的检验version的模块——node-semver"></a><a name="0gwprg"></a>npm 有自己的检验version的模块——node-semver</h3><p>npm有自己的一套检验version正确性的模块，它叫做 node-semver，是一开始就跟随着npm一起被打包安装的。当然了，你也可以通过自己安装去在自己的项目中使用它。<br>使用的例子像这样：<br>先npm install –save semver<br>然后:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> semver = <span class="built_in">require</span>(<span class="string">'semver'</span>)</span><br><span class="line">semver.valid(<span class="string">'1.2.3'</span>) <span class="comment">// '1.2.3'</span></span><br><span class="line">semver.valid(<span class="string">'a.b.c'</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h2 id="keywords-和-description-字段"><a href="#keywords-和-description-字段" class="headerlink" title="keywords 和 description 字段"></a><a name="5t56gy"></a>keywords 和 description 字段</h2><h3 id="字段要求："><a href="#字段要求：" class="headerlink" title="字段要求："></a><a name="hrwsrt"></a>字段要求：</h3><p>description：字符串<br>keywords：字符串数组</p><p>简单地说，这两个东东是npm搜索系统中的搜索条件，所以。如果你试图发布的是一个开源插件，那么这两个字段你应该重视</p><h2 id="license-字段"><a href="#license-字段" class="headerlink" title="license 字段"></a><a name="nq9ywd"></a>license 字段</h2><p>这是你指定的项目的许可证，它告诉他人他们是否有权利使用你的包，以及，在使用你的包的时候他们应该受到怎样的限制</p><p>字段要求：<br>单个license：直接写入名称</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"license"</span> : <span class="string">"BSD-3-Clause"</span> &#125;</span><br></pre></td></tr></table></figure><p>多个license：在一对圆括号内写入license名称，且在多个license内用AND等连接</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"license"</span> : <span class="string">"(ISC AND GPL-3.0)"</span> &#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/spdx" target="_blank" rel="noopener">SPDX license表达式的语法规则 2.0版本</a></p><h2 id="author-字段"><a href="#author-字段" class="headerlink" title="author 字段"></a><a name="6wgflv"></a>author 字段</h2><p>要求：一个字符串或是一个对象。<br>如果是一个对象，该对象包含三个属性：<br>name属性(必填)<br>email属性（选填）<br>URL属性（选填）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"name"</span> : <span class="string">"Barney Rubble"</span></span><br><span class="line">, <span class="attr">"email"</span> : <span class="string">"b@rubble.com"</span></span><br><span class="line">, <span class="attr">"url"</span> : <span class="string">"http://barnyrubble.tumblr.com/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-字段"><a href="#main-字段" class="headerlink" title="main 字段"></a><a name="oxo5aa"></a>main 字段</h2><p>这个是你项目的入口文件。简而言之，当别人安装了你发布的模块时，require你的模块的时候取得的就是你main字段规定的入口文件的输出。</p><p>例如你写入了 { “main”:”XXX.js”}，而他人通过npm install ‘你的模块名称’ . 安装了你的模块后，他通过 var X = require(‘你的模块名称’)取得的就是你在XXX.js的输出</p><h2 id="script-字段"><a href="#script-字段" class="headerlink" title="script 字段"></a><a name="0gg4no"></a>script 字段</h2><p>写进scripts的命令(command),可以通过npm run 或者npm  运行对应的shell指令，例如：{“scripts”: { “start”: “node main.js”} } 可以让你在终端输入npm start的时候，等同于运行了node main.js</p><h3 id="什么时候要加“run”-什么时候可以不用加“run”呢？"><a href="#什么时候要加“run”-什么时候可以不用加“run”呢？" class="headerlink" title="什么时候要加“run”,什么时候可以不用加“run”呢？"></a><a name="o7vnng"></a>什么时候要加“run”,什么时候可以不用加“run”呢？</h3><p>一个让我们可能有些困扰的问题是，通过<code>script</code>字段内的<code>npm命令</code>运行脚本时，有时候要加<code>“run”</code>，有时候又不要加<code>&quot;run&quot;</code>,即有时候是可以直接用<code>npm &lt;command&gt;</code>；而有时候又要用<code>npm run &lt;command&gt;</code> 才能运行脚本，这该如何区分呢？</p><p>首先要提一下的是，<code>run</code>的原名是<code>run-script</code>，是一段脚本，而<code>run</code>是它的一个别名（<code>alias</code>）</p><p>1.当<code>run[-script]</code>被 <code>test, start, restart, and stop</code>这四个自带的命令所使用时，它可以被省略（或者说不需要加<code>“run”</code>就可以直接调用），所以我们平时最常输入的<code>npm start</code>实际上相当于<code>npm run start</code>，只不过是为了方便省略了<code>run</code>而已</p><p>原文：<code>run[-script] is used by the test, start, restart, and stop commands, but can be called directly</code></p><p>2.当你在<code>package.json</code>的<code>script</code>字段中定义的是除了1中的4个命令外的命令的时候，你就不能省略<code>“run”</code>了<br>例如你定义</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "XXX.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>的时候，你运行XXX.js就只能通过npm run build去运行了</p><h3 id="npm-为script字段中的脚本路径都加上了node-moudles-bin前缀"><a href="#npm-为script字段中的脚本路径都加上了node-moudles-bin前缀" class="headerlink" title="npm 为script字段中的脚本路径都加上了node_moudles/.bin前缀"></a><a name="i703qp"></a>npm 为script字段中的脚本路径都加上了node_moudles/.bin前缀</h3><p>npm为script字段中的脚本路径都加上了node_moudles/.bin前缀，这意味着：你在试图运行本地安装的依赖在 node_modules/.bin 中的脚本的时候，可以省略node_modules/.bin这个前缀。例如：<br>我刚npm install webpack了，而在我的项目下的node_modules目录的.bin子目录下：就多了一个叫做webpack的脚本</p><p>本来运行这个脚本的命令应该是：node_modules/.bin webpack<br>但由于npm已经自动帮我们加了node_modules/.bin前缀了，所以我们可以直接写成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;"start": "webpack"&#125;</span><br></pre></td></tr></table></figure><p>而不用写成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;"start": "node_modules/.bin webpack"&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文：npm run adds node_modules/.bin to the PATH provided to scripts. Any binaries provided by locally-installed dependencies can be used without the node_modules/.bin prefix</p></blockquote><blockquote><p>npm start是有默认值的，默认为：node server.js</p></blockquote><h2 id="better-npm-run-的安装与betterScript字段的使用"><a href="#better-npm-run-的安装与betterScript字段的使用" class="headerlink" title="better-npm-run 的安装与betterScript字段的使用"></a><a name="fhxxci"></a>better-npm-run 的安装与betterScript字段的使用</h2><p>这个是package.json文档介绍里所没有的，但这里我想特别讲一下：</p><p>先通过npm install better-npm-run安装好包，然后你就可以在你的package.json里面使用一个新的字段—— “betterScripts”字段</p><p>故名思意，它和”scripts”字段很像，那么两者间有什么联系呢？咱还是用代码说话吧，它可以把</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "test": "NODE_ENV=production karma start"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "better-npm-run test"</span><br><span class="line">&#125;,</span><br><span class="line">"betterScripts": &#123;</span><br><span class="line">    "test": &#123;</span><br><span class="line">        "command": "karma start",</span><br><span class="line">        "env": &#123;</span><br><span class="line">            "NODE_ENV": "test"</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单地说，就是当运行”scripts”字段中的命令的时候，它会进一步去运行 “betterScripts”中对应的命令，并通过”env”对象控制运行时的环境变量，如NODE_ENV。</p><p>好处是让你的代码的可读性更强一些</p><p>另外提一下NODE_ENV的作用：<br>用来设置环境变量（默认值为development）。<br>通过检查这个值可以分别对开发环境和生产环境下做不同的处理</p><p>例如在服务端代码中通过检查是否是开发环境（development）决定是否启动代码热重载功能</p><p>（热重载只是为了在开发环境【developmen】提高生产效率用，在生产环境【production】没用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line"><span class="comment">// 省略诸多内容</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler, &#123;</span><br><span class="line">    path: <span class="string">'/__webpack_hmr'</span></span><br><span class="line">&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dependencies-字段和-devDependencies-字段"><a href="#dependencies-字段和-devDependencies-字段" class="headerlink" title="dependencies 字段和 devDependencies 字段"></a><a name="54ahbt"></a>dependencies 字段和 devDependencies 字段</h2><p>dependencies字段和devDependencies字段分别代表生产环境依赖和开发环境依赖</p><p>与两个字段相关的npm install的命令<br>npm install 模块 –save 安装好后写入package.json的dependencies中（生产环境依赖）<br>npm install 模块 –save-dev 安装好后写入package.json的devDepencies中（开发环境依赖）</p><p><strong>怎么区分到底安装包的时候放在dependencies中还是devDepencies中呢？</strong></p><p>很简单<br>1.一般你去github或者npm社区里面相关包的介绍后面都会带有–save 或者–save-dev 的参数的，这时候把命令直接复制过来运行就OK了，不用管那么多</p><p>2.如果没有1中的介绍，那么请思考，这个包到底是纯粹为了开发方便使用呢？还是要放到上线后APP的代码中呢？前者则为devDepencies，后者则为dependencies</p><p>【注意】：在团队协作中，一个常见的情景是他人从github上clone你的项目，然后通过npm install安装必要的依赖，（刚从github上clone下来是没有node_modules的，需要安装）那么根据什么信息安装依赖呢？就是你的package.json中的dependencies和devDepencies。所以，在本地安装的同时，将依赖包的信息（要求的名称和版本）写入package.json中是很重要的！</p><h2 id="prepublishOnly-字段"><a href="#prepublishOnly-字段" class="headerlink" title="prepublishOnly 字段"></a><a name="7xa0oi"></a>prepublishOnly 字段</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"prepublishOnly": "npm run build"</span><br></pre></td></tr></table></figure><p><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">这样每次执行</span></span><code>npm publish</code><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">前都会先执行</span></span><code>npm run build</code></p><h2 id="peerDependencies-字段"><a href="#peerDependencies-字段" class="headerlink" title="peerDependencies 字段"></a><a name="b7imam"></a>peerDependencies 字段</h2><p>同版本依赖</p><h1 id="非官方字段"><a href="#非官方字段" class="headerlink" title="非官方字段"></a><a name="b7mugf"></a>非官方字段</h1><h2 id="yarn-相关字段"><a href="#yarn-相关字段" class="headerlink" title="yarn 相关字段"></a><a name="7g2dis"></a>yarn 相关字段</h2><p><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a> : 类似 npm 的依赖管理工具，但 yarn 缓存了每个下载过的包，所以再次使用时无需重复下载，同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a><a name="urd0tl"></a>flat</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"flat"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的包只允许给定依赖的一个版本，你想强制和命令行上 <span data-type="background" style="background-color:#FADB14">yarn install –flat </span>相同的行为，把这个值设为<span data-type="background" style="background-color:#FADB14"> true</span>。</p><p>详细参考 <a href="https://yarnpkg.com/zh-Hans/docs/package-json#toc-flat" target="_blank" rel="noopener">yarn - flat</a><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">.</span></span>.</p><h3 id="resolutions"><a href="#resolutions" class="headerlink" title="resolutions"></a><a name="20npgi"></a>resolutions</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"resolutions"</span>: &#123;</span><br><span class="line">        <span class="attr">"transitive-package-1"</span>: <span class="string">"0.0.29"</span>,</span><br><span class="line">        <span class="attr">"transitive-package-2"</span>: <span class="string">"file:./local-forks/transitive-package-2"</span>,</span><br><span class="line">        <span class="attr">"dependencies-package-1/transitive-package-3"</span>: <span class="string">"^2.1.1"</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许你覆盖特定嵌套依赖项的版本。有关完整规范，请参见<a href="https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md" target="_blank" rel="noopener">选择性版本解析 RFC</a>。</p><p>详细参考 <a href="https://yarnpkg.com/zh-Hans/docs/package-json#toc-resolutions" target="_blank" rel="noopener">yarn - resolutions</a>.</p><h2 id="unpkg-相关字段"><a href="#unpkg-相关字段" class="headerlink" title="unpkg 相关字段"></a><a name="qsrgbn"></a>unpkg 相关字段</h2><p><a href="https://github.com/unpkg/unpkg.com" target="_blank" rel="noopener">unpkg</a>: 让 npm 上所有的文件都开启 cdn 服务。</p><p>unpkg</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># jquery</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"unpkg"</span>: <span class="string">"dist/jquery.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下，访问 jquery 的发布文件通过 <a href="https://unpkg.com/jquery@3.3.1/dist/jquery.js%EF%BC%8C%E5%BD%93%E4%BD%A0%E4%BD%BF%E7%94%A8%E7%9C%81%E7%95%A5%E7%9A%84" target="_blank" rel="noopener">https://unpkg.com/jquery@3.3.1/dist/jquery.js，当你使用省略的</a> url <a href="https://unpkg.com/jquery" target="_blank" rel="noopener">https://unpkg.com/jquery</a> 时，便会按照如下的方式获取文件：</p><p>[latestVersion] 指最新版本号，pkg 指 package.json</p><ul><li>定义了 unpkg 属性时</li></ul><p><a href="https://unpkg.com/jquery@%5BlatestVersion%5D/%5Bpkg.unpkg%5D" target="_blank" rel="noopener">https://unpkg.com/jquery@[latestVersion]/[pkg.unpkg]</a></p><ul><li>未定义 unpkg 属性时，将回退到 main 属性</li></ul><p><a href="https://unpkg.com/jquery@%5BlatestVersion%5D/%5Bpkg.main%5D" target="_blank" rel="noopener">https://unpkg.com/jquery@[latestVersion]/[pkg.main]</a><br>详细参考 <a href="https://unpkg.com" target="_blank" rel="noopener">https://unpkg.com</a>.</p><h3 id="TypeScript-相关字段"><a href="#TypeScript-相关字段" class="headerlink" title="TypeScript 相关字段"></a><a name="3695ng"></a>TypeScript 相关字段</h3><p>TypeScript: JavaScript 的超集<br>types, typings<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"./lib/main.js"</span>,</span><br><span class="line">    <span class="attr">"types"</span>: <span class="string">"./lib/main.d.ts"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就像 main 字段一样，定义一个针对 TypeScript 的入口文件。</p><p>详细参考 TypeScript documentation.</p><h3 id="browserslist-相关字段"><a href="#browserslist-相关字段" class="headerlink" title="browserslist 相关字段"></a><a name="ye8iac"></a>browserslist 相关字段</h3><p>browserslist: 设置项目的浏览器兼容情况。<br>browserslist</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"browserslist"</span>: [</span><br><span class="line"><span class="string">"&gt; 1%"</span>,</span><br><span class="line"><span class="string">"last 2 versions"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持的工具：</p><p>Autoprefixer<br>Babel<br>postcss-preset-env<br>eslint-plugin-compat<br>stylelint-no-unsupported-browser-features<br>postcss-normalize<br>详细参考 browserslist.</p><h3 id="发行打包相关字段"><a href="#发行打包相关字段" class="headerlink" title="发行打包相关字段"></a><a name="whz6lg"></a>发行打包相关字段</h3><p>点击 Setting up multi-platform npm packages 查看相关介绍。</p><h4 id="module"><a href="#module" class="headerlink" title="module"></a><a name="mnamrg"></a>module</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"main"</span>: <span class="string">"./lib/main.js"</span>,</span><br><span class="line"><span class="attr">"module"</span>: <span class="string">"./lib/main.m.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像 main 字段一样，定义一个针对 es6 模块及语法的入口文件。<br>构建工具在构建项目的时候，如果发现了这个字段，会首先使用这个字段指向的文件，如果未定义，则回退到 main 字段指向的文件。</p><p>支持的工具：</p><p>rollup<br>webpack<br>详细参考 rollup - pkg.module.</p><h4 id="browser"><a href="#browser" class="headerlink" title="browser"></a><a name="5breni"></a>browser</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;main&quot;: &quot;./lib/main.js&quot;,</span><br><span class="line">    &quot;browser&quot;: &quot;./lib/main.b.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定该模块供浏览器使用的入口文件。<br>如果这个字段未定义，则回退到 main 字段指向的文件。</p><p>支持的工具：</p><p>rollup<br>webpack<br>browserify<br>详细参考 babel-plugin-module-resolver.</p><h4 id="esnext"><a href="#esnext" class="headerlink" title="esnext"></a><a name="zrogwv"></a>esnext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">&quot;esnext&quot;: &quot;main-esnext.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a><a name="a0k0ck"></a></h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="attr">"esnext"</span>: &#123;</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"main-esnext.js"</span>,</span><br><span class="line">    <span class="attr">"browser"</span>: <span class="string">"browser-specific-main-esnext.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 es 模块化规范，stage 4 特性的源代码。<br>详细参考 Transpiling dependencies with Babel, Delivering untranspiled source code via npm.</p><h4 id="es2015"><a href="#es2015" class="headerlink" title="es2015"></a><a name="am3pii"></a>es2015</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="attr">"es2015"</span>: <span class="string">"main-es2015.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Angular 定义的未转码的 es6 源码。<br>详细参考 <a href="https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#</a>.</p><p>esm<br>详细参考 adjusted proposal: ES module “esm”: true package.json flag.</p><h3 id="react-native-相关字段"><a href="#react-native-相关字段" class="headerlink" title="react-native 相关字段"></a><a name="b246cd"></a>react-native 相关字段</h3><p>react-native: 使用 react 组件技术写原生APP。</p><h4 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a><a name="64uakc"></a>react-native</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"./lib/main.js"</span>,</span><br><span class="line">    <span class="attr">"react-native"</span>: <span class="string">"./lib/main.react-native.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定该模块供 react-native 使用的入口文件。<br>如果这个字段未定义，则回退到 main 字段指向的文件。</p><p>源代码查看.</p><h3 id="webpack-相关字段"><a href="#webpack-相关字段" class="headerlink" title="webpack 相关字段"></a><a name="564axp"></a>webpack 相关字段</h3><h4 id="sideEffects"><a href="#sideEffects" class="headerlink" title="sideEffects"></a><a name="4y9mgs"></a>sideEffects</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"sideEffects"</span>: <span class="literal">true</span>|<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明该模块是否包含 sideEffects（副作用），从而可以为 tree-shaking 提供更大的优化空间。<br>详细参考 sideEffects example, proposal for marking functions as pure, eslint-plugin-tree-shaking.</p><h3 id="microbundle-相关字段"><a href="#microbundle-相关字段" class="headerlink" title="microbundle 相关字段"></a><a name="o47yaz"></a>microbundle 相关字段</h3><p>microbundle: 基于 rollup 零配置快速打包工具。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a><a name="fhklgb"></a>source</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "source"： "src/index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源文件入口文件。</p><p>详细参考 Specifying builds in package.json.</p><h4 id="umd-main"><a href="#umd-main" class="headerlink" title="umd:main"></a><a name="u7pxuy"></a>umd:main</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "umd:main"： "dist/main.umd.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>umd 模式 bundle 文件。<br>详细参考 Specifying builds in package.json.</p><h3 id="parcel-相关字段"><a href="#parcel-相关字段" class="headerlink" title="parcel 相关字段"></a><a name="u1l8gz"></a>parcel 相关字段</h3><p>parcel: 零配置打包工具。</p><h4 id="source-1"><a href="#source-1" class="headerlink" title="source"></a><a name="rlq8fb"></a>source</h4><p>查看 parcel-bundler/parcel#1652.</p><h3 id="babel-相关字段"><a href="#babel-相关字段" class="headerlink" title="babel 相关字段"></a><a name="35meyo"></a>babel 相关字段</h3><p>babel: es6 -&gt; es5 转码器。</p><h4 id="babel"><a href="#babel" class="headerlink" title="babel"></a><a name="20pork"></a>babel</h4><p>配置 babel。</p><h3 id="eslint-相关字段"><a href="#eslint-相关字段" class="headerlink" title="eslint 相关字段"></a><a name="mfygqs"></a>eslint 相关字段</h3><p>eslint: js 代码检查与优化。</p><h4 id="eslintConfig"><a href="#eslintConfig" class="headerlink" title="eslintConfig"></a><a name="kce7en"></a>eslintConfig</h4><p>配置 eslint。</p><h3 id="jest-相关字段"><a href="#jest-相关字段" class="headerlink" title="jest 相关字段"></a><a name="pk7gyw"></a>jest 相关字段</h3><p>jest: js 测试库。</p><h4 id="jest"><a href="#jest" class="headerlink" title="jest"></a><a name="riftrg"></a>jest</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"jest"</span>: &#123;</span><br><span class="line">        <span class="attr">"verbose"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 jest。<br>详细参考 jest docs.</p><h3 id="stylelint-相关字段"><a href="#stylelint-相关字段" class="headerlink" title="stylelint 相关字段"></a><a name="egpgug"></a>stylelint 相关字段</h3><p>stylelint: style 代码检查与优化。</p><p>stylelint<br>配置 stylelint。</p><p>详细参考 New configuration loader.</p><h3 id="ava-相关字段"><a href="#ava-相关字段" class="headerlink" title="ava 相关字段"></a><a name="xyregs"></a>ava 相关字段</h3><p>ava: js 测试库。</p><h4 id="ava"><a href="#ava" class="headerlink" title="ava"></a><a name="zhmvin"></a>ava</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"ava"</span>: &#123;</span><br><span class="line">        <span class="attr">"require"</span>: [ <span class="string">"@std/esm"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 ava。<br>详细参考 ava configuration.</p><h2 id="nyc-相关字段"><a href="#nyc-相关字段" class="headerlink" title="nyc 相关字段"></a><a name="g0c1qs"></a>nyc 相关字段</h2><p>nyc: istanbul.js 命令行。</p><h4 id="nyc"><a href="#nyc" class="headerlink" title="nyc"></a><a name="8usxxg"></a>nyc</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"nyc"</span>: &#123;</span><br><span class="line">    <span class="attr">"extension"</span>: [<span class="string">".js"</span>, <span class="string">".mjs"</span>],</span><br><span class="line">    <span class="attr">"require"</span>: [<span class="string">"@std/esm"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 nyc。<br>详细参考 nyc docs.</p><h3 id="CommonJS-保留字段"><a href="#CommonJS-保留字段" class="headerlink" title="CommonJS 保留字段"></a><a name="gpgstu"></a>CommonJS 保留字段</h3><p>保留字段: build, default, email, external, files, imports, maintainer, paths, platform, require, summary, test, using, downloads, uid.</p><p>不可用字段: id, type, 以 _ 和 \$ 开头的字段。</p><h3 id="Standard-JS-相关字段"><a href="#Standard-JS-相关字段" class="headerlink" title="Standard JS 相关字段"></a><a name="zfqxzx"></a>Standard JS 相关字段</h3><p>Standard JS: js 代码检查与优化。</p><h4 id="standard"><a href="#standard" class="headerlink" title="standard"></a><a name="coslfu"></a>standard</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"standard"</span>: &#123;</span><br><span class="line">    <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">    <span class="attr">"ignore"</span>: [</span><br><span class="line">        <span class="string">"**/out/"</span>,</span><br><span class="line">        <span class="string">"/lib/select2/"</span>,</span><br><span class="line">        <span class="string">"/lib/ckeditor/"</span>,</span><br><span class="line">        <span class="string">"tmp.js"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 standard.<br>详细参考 <a href="https://standardjs.com/" target="_blank" rel="noopener">https://standardjs.com/</a>.</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a name="g6y6oo"></a>其他</h3><p>style<br>声明当前模块包含 style 部分，并指定入口文件。</p><p>支持的工具：</p><p>parcelify<br>npm-less<br>rework-npm<br>npm-css<br>详细参考 Package.json “style” Attribute, istf-spec.</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a><a name="5b4czw"></a>less</h4><p>与 style 一样，但是是 less 文件。</p><p>支持的工具：</p><p>npm-less</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a><a name="3l8zck"></a>更多</h3><p>参考 <a href="https://github.com/stereobooster/package.json" target="_blank" rel="noopener">package.json fields explained</a></p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="4ylufx"></a>参考资源</h2><p><a href="https://segmentfault.com/a/1190000016365409#articleHeader39" target="_blank" rel="noopener">package.json 非官方字段集合</a><br>官方字段文档：<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">https://docs.npmjs.com/files/package.json</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dbox 内部开源组件背后的故事</title>
    <link href="http://lulustyle.net/2018/12/13/Dbox%20%E5%86%85%E9%83%A8%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://lulustyle.net/2018/12/13/Dbox 内部开源组件背后的故事/</id>
    <published>2018-12-13T07:22:56.000Z</published>
    <updated>2018-12-27T01:35:19.826Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/attachments/yuque/0/2018/pdf/84728/1545800735504-7911b7d2-ee91-4d91-971f-7465017e7bdc.pdf" title="size:428586" target="_blank" rel="noopener">download: 前端技术选型会 - IF-RCM ☎.pdf</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a name="n9b0dy"></a>前言</h1><h2 id="已有组件-OR-自造组件？？？"><a href="#已有组件-OR-自造组件？？？" class="headerlink" title="已有组件 OR 自造组件？？？"></a><a name="aib0uh"></a><strong>已有组件</strong> OR <strong>自造组件？？？</strong></h2><p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">基础和灵活 VS 定制化和效率</span></span><br><a id="more"></a></p><ul><li style="list-style: none"><input type="checkbox" checked> 垂直行业领域专业性组件</li><li style="list-style: none"><input type="checkbox" checked> 强主题风格组件</li><li style="list-style: none"><input type="checkbox" checked> 强交互组件</li><li style="list-style: none"><input type="checkbox" checked> 甚至是同款组件，不同配置</li></ul><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 组件 -&gt; 通用组件 -&gt; 通用组件库 </span><br><span class="line">&gt;               |-&gt; 业务组件 -&gt; 业务组件库 -&gt; 行业柱(n) -&gt; 组件平台 -&gt; 物料市场</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="自造组件我们得到了什么"><a href="#自造组件我们得到了什么" class="headerlink" title="自造组件我们得到了什么"></a><a name="a7vnyc"></a>自造组件我们得到了什么</h2><ul><li style="list-style: none"><input type="checkbox" checked> 规范 =》 体系<ul><li>产品功能迭代</li><li>技术变更(UI 设计层可以不变)</li><li>人事变动、人才流失</li><li>沟通(跨部门的共通语言)</li><li>客户需求多样性</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 效能</li><li style="list-style: none"><input type="checkbox" checked> 团队成长</li><li style="list-style: none"><input type="checkbox" checked> 走出去的可能</li></ul><h2 id="什么样的产品需要组件赋能"><a href="#什么样的产品需要组件赋能" class="headerlink" title="什么样的产品需要组件赋能"></a><a name="zb1drb"></a>什么样的产品需要组件赋能</h2><ul><li style="list-style: none"><input type="checkbox"> 量极大功能复杂</li><li style="list-style: none"><input type="checkbox"> 产品项目变动频繁，并发很多</li><li style="list-style: none"><input type="checkbox"> 产品间往往有较高的关联性</li><li style="list-style: none"><input type="checkbox"> 产品间存在共性</li><li style="list-style: none"><input type="checkbox"> 使用者具备很强的专业性</li><li style="list-style: none"><input type="checkbox"> 开放的趋势</li></ul><h1 id="设计体系"><a href="#设计体系" class="headerlink" title="设计体系"></a><a name="gwhgde"></a>设计体系</h1><h2 id="组件纬度"><a href="#组件纬度" class="headerlink" title="组件纬度"></a><a name="rhh2bz"></a>组件纬度</h2><ul><li style="list-style: none"><input type="checkbox" checked> <em>Atoms原子</em>。 为网页构成的基本元素。例如按钮，也可以为抽象的概念，例如字体、色调等。</li><li style="list-style: none"><input type="checkbox"> <em>Molecules分子</em>。 由原子构成的简单UI组件。例如，表单标签，搜索框和按钮共同打造了一个搜索表单分子。</li><li style="list-style: none"><input type="checkbox"> <em>Organisms组织</em>。 由原子及分子组成的相对复杂的UI构成物。</li><li style="list-style: none"><input type="checkbox"> <em>Templates模版</em>。 将以上元素进行排版，显示设计的底层内容结构。</li><li style="list-style: none"><input type="checkbox"> <em>Pages页面</em>。 将实际内容（图片、文章等）套件在特定模板，页面是模板的具体实例</li></ul><h2 id="统一的视觉风格和交互规范"><a href="#统一的视觉风格和交互规范" class="headerlink" title="统一的视觉风格和交互规范"></a><a name="xc7nli"></a>统一的视觉风格和交互规范</h2><p><code>X</code><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)"> </span></span>组件在 <code>A</code><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)"> </span></span>业务场景是一个交互，在 <code>B</code><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)"> </span></span>业务场景是另一个 UI 风格，这样就无法对 <code>X</code><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)"> </span></span>进行抽象，极大的增加了组件的构建成本。所以，设计组件之初，首先需要抽象和约定一套统一的视觉风格和交互规范。</p><h2 id="足够的可扩展性"><a href="#足够的可扩展性" class="headerlink" title="足够的可扩展性"></a><a name="zxbxqm"></a>足够的可扩展性</h2><p>组件在落地到实际项目中时，有各种不同的需求，默认的定制化并不能适用于任何的场景，只有具备良好拓展性的组件才能应用到不同的业务线，以“不变应万变”</p><h2 id="一定的可控性"><a href="#一定的可控性" class="headerlink" title="一定的可控性"></a><a name="fde1kh"></a>一定的可控性</h2><p>组件封装有一定的不确定性，更多时候是在做几个方面的权衡，并且在业务不断变化中，可能还会面临一些调整和重构。将不确定性控制在一定范围内。</p><h2 id="组件适用性检验"><a href="#组件适用性检验" class="headerlink" title="组件适用性检验"></a><a name="mekgeg"></a>组件适用性检验</h2><p>源于业务，归于业务。确保产出可以快速的在实际场景中得到验证，快速试错。</p><ul><li style="list-style: none"><input type="checkbox"> 通过开源的方式获取更多的反馈</li><li style="list-style: none"><input type="checkbox"> 通过内部项目落地迭代组件API</li></ul><h2 id="产出物"><a href="#产出物" class="headerlink" title="产出物"></a><a name="47kamy"></a>产出物</h2><ul><li style="list-style: none"><input type="checkbox" checked> 产品和技术结合最为紧密的部分</li><li style="list-style: none"><input type="checkbox" checked> 最为稳定及复用程度最高的部分</li><li style="list-style: none"><input type="checkbox" checked> 一份文档多人使用</li><li style="list-style: none"><input type="checkbox" checked> 开发者说明</li><li style="list-style: none"><input type="checkbox"> 设计体系规范</li><li style="list-style: none"><input type="checkbox"> 代码片段、工具函数</li><li style="list-style: none"><input type="checkbox"> 培训文档</li><li style="list-style: none"><input type="checkbox"> 社区化：灵活的沟通机制</li></ul><h1 id="前端体系"><a href="#前端体系" class="headerlink" title="前端体系"></a><a name="1grtsx"></a>前端体系</h1><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a><a name="un7yvu"></a>代码规范</h2><ul><li><a href="https://www.yuque.com/dbox/dbox-components" target="_blank" rel="noopener">开发者说明</a></li><li>代码 review</li><li>工具检验<blockquote><p>集成了 eslint、stylelint、git hook 的前端代码检查工具。</p><ul><li style="list-style: none"><input type="checkbox" checked> 初始化 eslint/stylelint 配置文件</li><li style="list-style: none"><input type="checkbox" checked> 安装 eslint/stylelint 及其依赖到当前项目的 node_modules 里</li><li style="list-style: none"><input type="checkbox"> 挂载 git 钩子，在提交代码时进行强制校验</li></ul></blockquote></li></ul><h2 id="组件设计思路"><a href="#组件设计思路" class="headerlink" title="组件设计思路"></a><a name="7af4mp"></a>组件设计思路</h2><p>在UI层面视觉上的组件是一种产品形式，界限是“视觉可分”，但是在代码层面，也会存在“逻辑可分”，所以开发者开开发前应对业务场景进行分析，把控代码层的组件粒度。</p><h3 id="什么情况下需要抽离组件"><a href="#什么情况下需要抽离组件" class="headerlink" title="什么情况下需要抽离组件"></a><a name="ddg2ra"></a>什么情况下需要抽离组件</h3><blockquote><p>不能狭隘地认为只是为了复用（包括对于模块化的理解），认为只有一个地方用就没必要抽取封装为组件</p></blockquote><ul><li style="list-style: none"><input type="checkbox"> 组件化是对实现的<code>__分层__</code>，是更有效地代码组合方式</li><li style="list-style: none"><input type="checkbox"> 组件化是对资源的重组和优化，从而使项目<code>__资源管理__</code>更合理</li><li style="list-style: none"><input type="checkbox"> 组件化有利于<code>__单元测试__</code></li><li style="list-style: none"><input type="checkbox"> 组件化对<code>__重构__</code>较友好</li></ul><h3 id="组件封装原则"><a href="#组件封装原则" class="headerlink" title="组件封装原则"></a><a name="v2lenq"></a>组件封装原则</h3><h4 id="高复用性-少组件-大组件"><a href="#高复用性-少组件-大组件" class="headerlink" title="高复用性 + 少组件 + 大组件"></a><a name="nn8ntr"></a>高复用性 + 少组件 + 大组件</h4><ul><li style="list-style: none"><input type="checkbox"> <strong>高复用性</strong>：对项目中所有Web页面的结构有清晰的把握，能准确提取样式或功能雷同的模块并将其封装成组件</li><li style="list-style: none"><input type="checkbox"> <strong>少组件</strong>：当深层次的成员无需组件化时，可直接将外层的父元素组件化以减少组件的数量，该原则是基于开发效率考虑的</li><li style="list-style: none"><input type="checkbox"> <strong>大组件</strong>：应更多的将零散组件拼装成更大的组件，可以简化组件的调用，提升团队开发效率</li></ul><h4 id="容器组件-展示组件"><a href="#容器组件-展示组件" class="headerlink" title="容器组件 + 展示组件"></a><a name="cx7hwn"></a>容器组件 + 展示组件</h4><ul><li style="list-style: none"><input type="checkbox"> <strong>容器组件</strong>：处理数据、逻辑（数据格式化）；对接后端API，格式改变则改变该组件</li><li style="list-style: none"><input type="checkbox"> <strong>展示组件</strong>：处理样式；对接视觉设计及用户体验，这些组件不关注自己何时何处被渲染</li></ul><h4 id="Functional-Components"><a href="#Functional-Components" class="headerlink" title="Functional Components"></a><a name="z110km"></a>Functional Components</h4><p>应该最大限度的编写和使用 Functional Components : 无状态、无方法、纯组件</p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a><a name="tchrfr"></a>数据模型</h4><p>原则：对数据切分时，props的优先级要高于state，尽可能保证组件的无状态化，简化组件的交互逻辑</p><ul><li style="list-style: none"><input type="checkbox"> 共享数据（固定数据）：props对象（单向流动性|显示传递性|只读性） &amp;&amp;  store</li><li style="list-style: none"><input type="checkbox"> 私有数据（动态数据）：state对象</li></ul><h3 id="需要反复琢磨的问题"><a href="#需要反复琢磨的问题" class="headerlink" title="需要反复琢磨的问题"></a><a name="gxqdug"></a>需要反复琢磨的问题</h3><p><strong>Q1：这个组件可否（有必要）再分？</strong></p><blockquote><p>组件划分的依据通常是 业务逻辑 功能，要考虑各组件之间的关系是否明确（如组件树方式管理组件间依赖关系，兄弟组件不可见），以及组件的可复用度。<br>划分粒度的大小需要根据实际情况权衡，太小会提升维护成本，太大又不够灵活和高复用性。</p></blockquote><p>每一个组件都应该有其独特的划分目的的，有的是为了复用实现，有的是为了封装复杂度清晰业务实现。</p><p><strong>Q2：这个组件的依赖是否可再缩减？</strong></p><blockquote><p>缩减组件依赖可以提高组件的可复用度，常用的方法是IoC（依赖注入），对外弱类型依赖。</p></blockquote><p><strong>Q3：这个组件是否对其它组件造成侵入？</strong></p><blockquote><p>一个组件的封装性不够，或者自身越界操作，就可能对自身之外造成了侵入，这种情况应该尽量避免，确保组件的生命周期能够对其影响进行有效的管理（如destroy后不留痕迹）。<br>较常见的一种情况是：组件运行时对window对象添加resize监听事件以实现组件响应视窗尺寸变化事件，这种需求的更好替代方案是：组件提供刷新方法，由父组件实现调用（最终由根组件统一处理）。</p></blockquote><blockquote><p>次优的方案是，当组件destroy前清理恢复。</p></blockquote><blockquote><p>一个组件不应对其它兄弟组件造成直接影响。</p></blockquote><p><strong>Q4：这个组件可否复用于其它类似场景中？</strong></p><blockquote><p>需要考虑需要适用的不同场景，在组件接口设计时进行必要的兼容</p></blockquote><p><strong>Q5：这个组件当别人用时，会怎么想？</strong></p><blockquote><p>接口设计符合规范和大众习惯，尽量让别人用起来简单易上手，易上手是指更符合直觉。<br>假如业务需要不需要这个功能，是否方便清除？</p></blockquote><blockquote><p>各组件之间以组合的关系互相配合，也是对功能需求的模块化抽象，当需求变化时可以将实现以模块粒度进行调整。</p></blockquote><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a><a name="ipacdl"></a>开发流程</h2><ul><li><a href="https://www.npmjs.com/package/new-component" target="_blank" rel="noopener">组件初始化</a>: <span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)">自动创建组件需要的目录和模版代码</span></span></li><li>组件 Coding</li><li>组件 Demo</li><li>组件文档</li><li>组件测试<ul><li style="list-style: none"><input type="checkbox" checked> 开发者自测 UI 及 API</li><li style="list-style: none"><input type="checkbox" checked> 开发者互测API</li><li style="list-style: none"><input type="checkbox" checked> UI 人肉测试</li><li style="list-style: none"><input type="checkbox"> 开发者单元测试</li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><a name="41ussg"></a></h2><h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a><a name="f5kgmq"></a>测试流程</h2><h3 id="开发者自测-UI-及-API"><a href="#开发者自测-UI-及-API" class="headerlink" title="开发者自测 UI 及 API"></a><a name="o74eas"></a>开发者自测 UI 及 API</h3><p>开发者根据UI设计稿开发完成后，自己根据UI要求及文档分场景根据文档生产工具的 playground 完成自测。</p><p>⚠️极端数据测试</p><ul><li style="list-style: none"><input type="checkbox"> 数据为空时</li><li style="list-style: none"><input type="checkbox"> 数据接口调用错误时</li><li style="list-style: none"><input type="checkbox"> 请求参数极端情况<ul><li>数据特别小时</li><li>数据特别大时</li><li>为null，NaN，undefine</li></ul></li></ul><h3 id="开发者互测-API"><a href="#开发者互测-API" class="headerlink" title="开发者互测 API"></a><a name="6l8inu"></a>开发者互测 API</h3><p>开发者团队内部通过结对编程的方式完成组件的API互测。</p><h3 id="开发者单元测试"><a href="#开发者单元测试" class="headerlink" title="开发者单元测试"></a><a name="4aiwhw"></a>开发者单元测试</h3><p> React 生态圈会推荐使用 jest + enzyme 配套工具</p><ul><li><a href="https://facebook.github.io/jest/docs/en/getting-started.html" target="_blank" rel="noopener">Jest</a>是 Facebook 开发的一个测试框架，它集成了测试执行器、断言库、spy、mock、snapshot和测试覆盖率报告等功能。React 项目本身也是使用 Jest 进行单测的，因此它们俩的契合度相当高。但是使用 jest 做 UI 测试有局限性，只能测试基本的 dom 结构 和 样式，一些逻辑交互无法测到，只能覆盖大部分的情况。</li><li><a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme</a>是由 airbnb 开发的 React 单测工具。它扩展了 React 的 TestUtils 并通过支持类似 jQuery 的 find 语法可以很方便的对 render出来的结果做各种断言。</li></ul><h3 id="UI-人肉测试"><a href="#UI-人肉测试" class="headerlink" title="UI 人肉测试"></a><a name="r61sml"></a>UI 人肉测试</h3><p>开发团队测试流程全部走完后，提交到UI设计者测试流程，完成组件UI层面场景、视觉、交互的评审。</p><h2 id="发包流程"><a href="#发包流程" class="headerlink" title="发包流程"></a><a name="pwivcz"></a>发包流程</h2><p><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)">组件发包只有拥有发包权限的人才能操作，Dbox 是以</span></span><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)"><strong>组件库</strong></span></span><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)">为单位发包的，</span></span>使用命令 <code>yarn publish</code><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)"> </span></span>发包，在发包之前会跑组件测试，只有测试通过以后才能发包。</p><h2 id="维护流程"><a href="#维护流程" class="headerlink" title="维护流程"></a><a name="q2e4py"></a>维护流程</h2><p>组件日常维护占整个组件库生命周期的很大一部分，组件库做起来了以后，组件功能后续会不断迭代，也许是 bug fix，也可能是 new feature。</p><ul><li style="list-style: none"><input type="checkbox"> PR / issue 的处理：<a href="https://www.yuque.com/dbox/dbox-components/xukr4p" target="_blank" rel="noopener">PR规范</a></li><li style="list-style: none"><input type="checkbox"> 发包</li><li style="list-style: none"><input type="checkbox"> 管理 changelog</li></ul><h2 id="项目落地"><a href="#项目落地" class="headerlink" title="项目落地"></a><a name="3d5gld"></a>项目落地</h2><ul><li style="list-style: none"><input type="checkbox" checked> UI组件</li><li style="list-style: none"><input type="checkbox" checked> 脚手架</li><li style="list-style: none"><input type="checkbox" checked> 使用文档</li><li style="list-style: none"><input type="checkbox" checked> 项目官网及社区</li><li style="list-style: none"><input type="checkbox"> 命令行</li><li style="list-style: none"><input type="checkbox"> 接口数据 mock 工具</li><li style="list-style: none"><input type="checkbox"> 构建工具栈</li><li style="list-style: none"><input type="checkbox"> 业务组件: 在业务组件库中，不必那么灵活，支持业务需要的属性配置即可。可以封装业务相关的代码进去，而不用担心影响其他业务线，更高的封装程度和业务属性会让该业务线的开发体验和效率提升一个量级</li><li style="list-style: none"><input type="checkbox"> 数据上报</li><li style="list-style: none"><input type="checkbox"> 监控体系(错误监控、性能监控、业务监控、服务监控)</li><li style="list-style: none"><input type="checkbox"> 持续集成: 部署流程和部署平台</li><li style="list-style: none"><input type="checkbox"> 自动化测试</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545396640317-84818fee-ac3a-43c6-a217-f0e7105ca90c.png" alt="前端开发体系及其系统构成.png | center | 747x375"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><a name="wf1kdd"></a>后记</h2><p><span data-type="color" style="color:rgb(89, 91, 102)"><span data-type="background" style="background-color:rgb(250, 250, 250)">组件化这条路上，我们还有很多事情要做</span></span></p><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="w8vcur"></a>参考资源</h1><ul><li><a href="https://www.uisdc.com/use-sketch-libraries-build-design-systems" target="_blank" rel="noopener">教你用Sketch Libraries构建组件库/设计体系 - 优设-UISDC</a></li><li><a href="https://zhuanlan.zhihu.com/p/24207409" target="_blank" rel="noopener">重新设计 React 组件库</a></li><li><a href="http://sangka-z.com/react-in-patterns-cn/chapter-11/" target="_blank" rel="noopener">http://sangka-z.com/react-in-patterns-cn/chapter-11/</a></li><li><a href="https://blog.csdn.net/liangklfang/article/details/74025364" target="_blank" rel="noopener">https://blog.csdn.net/liangklfang/article/details/74025364</a></li><li><a href="https://github.com/penouc/blog/issues/7" target="_blank" rel="noopener">https://github.com/penouc/blog/issues/7</a></li><li>React 组件设计模式基础 <a href="https://juejin.im/post/5a73d6435188257a6a789d0d" target="_blank" rel="noopener">https://juejin.im/post/5a73d6435188257a6a789d0d</a></li><li>谈谈 Vue 业务组件 <a href="https://juejin.im/entry/5a97b8bc518825555b2e1845" target="_blank" rel="noopener">https://juejin.im/entry/5a97b8bc518825555b2e1845</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.yuque.com/attachments/yuque/0/2018/pdf/84728/1545800735504-7911b7d2-ee91-4d91-971f-7465017e7bdc.pdf&quot; title=&quot;size:428586&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;download: 前端技术选型会 - IF-RCM ☎.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;a name=&quot;n9b0dy&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;已有组件-OR-自造组件？？？&quot;&gt;&lt;a href=&quot;#已有组件-OR-自造组件？？？&quot; class=&quot;headerlink&quot; title=&quot;已有组件 OR 自造组件？？？&quot;&gt;&lt;/a&gt;&lt;a name=&quot;aib0uh&quot;&gt;&lt;/a&gt;&lt;strong&gt;已有组件&lt;/strong&gt; OR &lt;strong&gt;自造组件？？？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;基础和灵活 VS 定制化和效率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
    
    </summary>
    
      <category term="业务场景解决方案" scheme="http://lulustyle.net/categories/service/"/>
    
    
      <category term="components" scheme="http://lulustyle.net/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>大屏业务场景解决方案</title>
    <link href="http://lulustyle.net/2018/12/13/%E5%A4%A7%E5%B1%8F%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://lulustyle.net/2018/12/13/大屏业务场景解决方案/</id>
    <published>2018-12-13T04:36:21.000Z</published>
    <updated>2018-12-27T01:35:19.827Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 业务场景解决方案</span></span></p><hr><p>无论是在科幻电影还是在真实世界里，可视化大屏都是非常常见的一种表现手法。<br>之前在市局看到了大屏是由多个屏幕组成，看起来有两层楼那么高。</p><p><strong>技术栈：echarts + css3 + vw + vh + rem</strong><br><strong>因为运用了大量css3 新特性，所以建议使用 google浏览器，投大屏。</strong></p><h2 id="可视化大屏的特性"><a href="#可视化大屏的特性" class="headerlink" title="可视化大屏的特性"></a><a name="0g4ltz"></a>可视化大屏的特性</h2><p>可视化大屏，归根到底还是运用的可视化技术，只不过展现的屏幕比起笔记本和显示器大了很多。相比于传统的桌面级可视化运用，大屏可视化的特性有:</p><ol><li><strong>屏幕巨大</strong>，用户通常离屏幕比较远，文字表达出来的信息需要足够清楚，通常要在字体和颜色上做文章。</li><li><strong>弱化交互</strong>，基于键盘和鼠标的交互方式很少，更多时候系统自己做出响应，而不是让人工介入。</li><li>视觉冲击力强，设计一般都是以深色为底色，一来科技感十足，二来可以配合突出的主体动画和强设计感的元素。</li><li><strong>场景化</strong>，一块大屏通常用来展示一类场景，场景主要由图表构成，后台管理系统那套表单通常不会出现在大屏。</li><li><strong>动画</strong>更重要了，用动画表现出来的数据，通常是大屏项目中最迷人的地方。说动画是大屏项目的灵魂也不为过。</li></ol><h2 id="大屏的自动布局和宽高自适应"><a href="#大屏的自动布局和宽高自适应" class="headerlink" title="大屏的自动布局和宽高自适应"></a><a name="or9yan"></a>大屏的自动布局和宽高自适应</h2><p>可视化大屏的布局部分也是一个重要的部分。<br>在我们的项目中，准备使用纯css3的vw、vh实现自适应。</p><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a><a name="hyk3oo"></a>视口</h3><p>在CSS标准文档中，视口viewport被称为初始包含块。这个初始包含块是所有CSS百分比宽度推算的根源，它给CSS布局限制了一个最大宽度。</p><ul><li>桌面端：视口的宽度和浏览器窗口的宽度一致</li><li>移动端 ：视口分为布局视口(layout viewport)、视觉视口(visual viewport)和理想视口(ideal viewport)</li><li>可视化大屏属于桌面</li></ul><h3 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a><a name="k00uas"></a>视口单位</h3><p>根据CSS3规范，视口单位主要包括4个：</p><ol><li>vw : 1vw 等于视口宽度的1%</li><li>vh : 1vh 等于视口高度的1%</li><li>vmin : 选取 vw 和 vh 中最小的那个</li><li>vmax : 选取 vw 和 vh 中最大的那个视口单位区别于%单位，视口单位是依赖于视口的尺寸，根据视口尺寸的百分比来定义的；而%单位则是依赖于元素的祖先元素。用视口单位度量，视口宽度为100vw，高度为100vh，相当于将宽高分别分成了100份。利用视口单位适配页面</li><li>vw、vh是基于视口的布局方案</li><li>rem布局-解决字体适配（rem布局原理：根据CSS的媒体查询功能，更改html根字体大小，实现字体大小随屏幕尺寸变化。）</li><li>使用vw+vh+rem的布局之外，可以再加上elementUI的栅格布局，可以满足需求。</li></ol><h2 id="协作"><a href="#协作" class="headerlink" title="协作"></a><a name="4fcovw"></a>协作</h2><ul><li>选择一种尺寸作为设计和开发基准</li><li>定义一套适配规则，自动适配剩下的两种尺寸(其实不仅这两种，你懂的)</li><li>特殊适配效果给出设计效果</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545464220019-b50f6bcc-4b19-495a-8584-7c0db3e3711d.png" alt="WX20181222-153640@2x.png | center | 747x442"></p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="0f7vzi"></a>参考资源</h2><p><a href="[https://material.io/devices/](https://material.io/devices/">终端设备参数</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack 前端工程化</title>
    <link href="http://lulustyle.net/2018/12/12/webpack%20%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>http://lulustyle.net/2018/12/12/webpack 前端工程化/</id>
    <published>2018-12-12T13:37:03.000Z</published>
    <updated>2018-12-27T01:35:19.828Z</updated>
    
    <content type="html"><![CDATA[<p><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">tags: [组件]</span></span><br><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">categories: 前端工程化</span></span></p><hr><h1 id="一、webpack-常用-Loader"><a href="#一、webpack-常用-Loader" class="headerlink" title="一、webpack 常用 Loader"></a><a name="43svgi"></a>一、webpack 常用 Loader</h1><h3 id="1、加载文件"><a href="#1、加载文件" class="headerlink" title="1、加载文件"></a><a name="加载文件"></a>1、加载文件</h3><ul><li><a href="https://github.com/webpack-contrib/raw-loader" target="_blank" rel="noopener">raw-loader</a>：把文本文件的内容加载到代码中去，在 <a href="../3实战/3-20加载SVG.html">3-20加载SVG</a> 中有介绍。</li><li><a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader</a>：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件，在 <a href="../3实战/3-19加载图片.html">3-19加载图片</a>、<a href="../3实战/3-20加载SVG.html">3-20加载 SVG</a>、<a href="../4优化/4-9CDN加速.html">4-9 CDN 加速</a> 中有介绍。</li><li><a href="https://github.com/webpack-contrib/url-loader" target="_blank" rel="noopener">url-loader</a>：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去，在 <a href="../3实战/3-19加载图片.html">3-19加载图片</a>、<a href="../3实战/3-20加载SVG.html">3-20加载 SVG</a> 中有介绍。</li><li><a href="https://github.com/webpack-contrib/source-map-loader" target="_blank" rel="noopener">source-map-loader</a>：加载额外的 Source Map 文件，以方便断点调试，在 <a href="../3实战/3-21加载SourceMap.html">3-21加载 Source Map</a> 中有介绍。</li><li><a href="https://github.com/webpack-contrib/svg-inline-loader" target="_blank" rel="noopener">svg-inline-loader</a>：把压缩后的 SVG 内容注入到代码中，在 <a href="../3实战/3-20加载SVG.html">3-20加载 SVG</a> 中有介绍。</li><li><a href="https://github.com/webpack-contrib/node-loader" target="_blank" rel="noopener">node-loader</a>：加载 Node.js 原生模块 <code>.node</code> 文件。</li><li><a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">image-loader</a>：加载并且压缩图片文件。</li><li><a href="https://github.com/webpack-contrib/json-loader" target="_blank" rel="noopener">json-loader</a>：加载 JSON 文件。</li><li><a href="https://github.com/okonet/yaml-loader" target="_blank" rel="noopener">yaml-loader</a>：加载 YAML 文件。</li></ul><h3 id="2、编译模版"><a href="#2、编译模版" class="headerlink" title="2、编译模版"></a><a name="编译模版"></a>2、编译模版</h3><ul><li><a href="https://github.com/pugjs/pug-loader" target="_blank" rel="noopener">pug-loader</a>：把 Pug 模版转换成 JavaScript 函数返回。</li><li><a href="https://github.com/pcardune/handlebars-loader" target="_blank" rel="noopener">handlebars-loader</a>：把 Handlebars 模版编译成函数返回。</li><li><a href="https://github.com/okonet/ejs-loader" target="_blank" rel="noopener">ejs-loader</a>：把 EJS 模版编译成函数返回。</li><li><a href="https://github.com/AlexanderPavlenko/haml-loader" target="_blank" rel="noopener">haml-loader</a>：把 HAML 代码转换成 HTML。</li><li><a href="https://github.com/peerigon/markdown-loader" target="_blank" rel="noopener">markdown-loader</a>：把 Markdown 文件转换成 HTML。</li></ul><h3 id="3、转换脚本语言"><a href="#3、转换脚本语言" class="headerlink" title="3、转换脚本语言"></a><a name="转换脚本语言"></a>3、转换脚本语言</h3><ul><li><a href="https://github.com/babel/babel-loader" target="_blank" rel="noopener">babel-loader</a>：把 ES6 转换成 ES5，在<a href="../3实战/3-1使用ES6语言.html">3-1使用 ES6 语言</a>中有介绍。</li><li><a href="https://github.com/TypeStrong/ts-loader" target="_blank" rel="noopener">ts-loader</a>：把 TypeScript 转换成 JavaScript，在<a href="../3实战/3-2使用TypeScript语言.html">3-2使用 TypeScript 语言</a>中有遇到。</li><li><a href="https://github.com/s-panferov/awesome-typescript-loader" target="_blank" rel="noopener">awesome-typescript-loader</a>：把 TypeScript 转换成 JavaScript，性能要比 ts-loader 好。</li><li><a href="https://github.com/webpack-contrib/coffee-loader" target="_blank" rel="noopener">coffee-loader</a>：把 CoffeeScript 转换成 JavaScript。</li></ul><h3 id="4、转换样式文件"><a href="#4、转换样式文件" class="headerlink" title="4、转换样式文件"></a><a name="转换样式文件"></a>4、转换样式文件</h3><ul><li><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener">css-loader</a>：加载 CSS，支持模块化、压缩、文件导入等特性。</li><li><a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="noopener">style-loader</a>：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li><li><a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener">sass-loader</a>：把 SCSS/SASS 代码转换成 CSS，在<a href="../3实战/3-4使用SCSS语言.html">3-4使用 SCSS 语言</a>中有介绍。</li><li><a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">postcss-loader</a>：扩展 CSS 语法，使用下一代 CSS，在<a href="../3实战/3-5使用PostCSS.html">3-5使用 PostCSS</a>中有介绍。</li><li><a href="https://github.com/webpack-contrib/less-loader" target="_blank" rel="noopener">less-loader</a>：把 Less 代码转换成 CSS 代码。</li><li><a href="https://github.com/shama/stylus-loader" target="_blank" rel="noopener">stylus-loader</a>：把 Stylus 代码转换成 CSS 代码。</li></ul><h3 id="5、检查代码"><a href="#5、检查代码" class="headerlink" title="5、检查代码"></a><a name="检查代码"></a>5、检查代码</h3><ul><li><a href="https://github.com/MoOx/eslint-loader" target="_blank" rel="noopener">eslint-loader</a>：通过 ESLint 检查 JavaScript 代码，在 <a href="../3实战/3-16检查代码.html">3-16检查代码</a>中有介绍。</li><li><a href="https://github.com/wbuchwalter/tslint-loader" target="_blank" rel="noopener">tslint-loader</a>：通过 TSLint 检查 TypeScript 代码。</li><li><a href="https://github.com/webpack-contrib/mocha-loader" target="_blank" rel="noopener">mocha-loader</a>：加载 Mocha 测试用例代码。</li><li><a href="https://github.com/webpack-contrib/coverjs-loader" target="_blank" rel="noopener">coverjs-loader</a>：计算测试覆盖率。</li></ul><h3 id="6、其它"><a href="#6、其它" class="headerlink" title="6、其它"></a><a name="其它"></a>6、其它</h3><ul><li><a href="https://github.com/vuejs/vue-loader" target="_blank" rel="noopener">vue-loader</a>：加载 Vue.js 单文件组件，在<a href="../3实战/3-7使用Vue框架.html">3-7使用 Vue 框架</a>中有介绍。</li><li><a href="https://github.com/webpack-contrib/i18n-loader" target="_blank" rel="noopener">i18n-loader</a>：加载多语言版本，支持国际化。</li><li><a href="https://github.com/cherrry/ignore-loader" target="_blank" rel="noopener">ignore-loader</a>：忽略掉部分文件，在<a href="../3实战/3-11构建同构应用.html">3-11构建同构应用</a>中有介绍。</li><li><a href="https://github.com/gwuhaolin/ui-component-loader" target="_blank" rel="noopener">ui-component-loader</a>：按需加载 UI 组件库，例如在使用 antd UI 组件库时，不会因为只用到了 Button 组件而打包进所有的组件。</li></ul><h1 id="二、webpack-常用-Plugin"><a href="#二、webpack-常用-Plugin" class="headerlink" title="二、webpack 常用 Plugin"></a><a name="zwgarl"></a>二、webpack 常用 Plugin</h1><h2 id="1、修改行为"><a href="#1、修改行为" class="headerlink" title="1、修改行为"></a><a name="mxfcye"></a>1、修改行为</h2><h3 id="define-plugin"><a href="#define-plugin" class="headerlink" title="define-plugin"></a><a name="nyr7ri"></a>define-plugin</h3><p><a href="https://webpack.js.org/plugins/define-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/define-plugin/</a><br>定义环境变量</p><h3 id="context-replacement-plugin"><a href="#context-replacement-plugin" class="headerlink" title="context-replacement-plugin"></a><a name="wasuqf"></a>context-replacement-plugin</h3><p><a href="https://webpack.js.org/plugins/context-replacement-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/context-replacement-plugin/</a><br>修改 require 语句在寻找文件时的默认行为</p><h3 id="ignore-plugin"><a href="#ignore-plugin" class="headerlink" title="ignore-plugin"></a><a name="kpv2wv"></a>ignore-plugin</h3><p><a href="https://webpack.js.org/plugins/ignore-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/ignore-plugin/</a><br>用于忽略部分文件</p><h2 id="2、优化"><a href="#2、优化" class="headerlink" title="2、优化"></a><a name="yq9all"></a>2、优化</h2><h3 id="commons-chunk-plugin-V4-0移除，SplitChunksPlugin取代"><a href="#commons-chunk-plugin-V4-0移除，SplitChunksPlugin取代" class="headerlink" title="commons-chunk-plugin(V4.0移除，SplitChunksPlugin取代)"></a><a name="rcscud"></a>commons-chunk-plugin(V4.0移除，SplitChunksPlugin取代)</h3><p><a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/commons-chunk-plugin/</a><br>提取公共代码,避免webpack生成重复引入的模块代码，引入模块代码只生成一遍。<br>注意该插件和DLL的功能不一样</p><h4 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a><a name="f6igao"></a>提取公共代码</h4><p>对于多页面应用而言，提取公共代码：</p><ul><li>减少网络传输流量，降低服务器成本</li><li>虽然用户第一次打开网站的速度得不到优化，但之后访问其他页面的速度将大大提高</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1545641166012-ecf65ab6-34b6-4ba2-9c4a-37f229ef44ba.png" alt="WechatIMG459.png | center | 654x462"></p><h3 id="extract-text-webpack-plugin-V4-0移除，mini-css-extract-plugin取代"><a href="#extract-text-webpack-plugin-V4-0移除，mini-css-extract-plugin取代" class="headerlink" title="extract-text-webpack-plugin(V4.0移除，mini-css-extract-plugin取代)"></a><a name="tps9ok"></a>extract-text-webpack-plugin(V4.0移除，mini-css-extract-plugin取代)</h3><p><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="noopener">https://github.com/webpack-contrib/extract-text-webpack-plugin</a><br>提取 JS 中的 CSS 代码到单独的文件中</p><h3 id="prepack-webpack-plugin"><a href="#prepack-webpack-plugin" class="headerlink" title="prepack-webpack-plugin"></a><a name="lu96zg"></a>prepack-webpack-plugin</h3><p><a href="https://github.com/gajus/prepack-webpack-plugin" target="_blank" rel="noopener">https://github.com/gajus/prepack-webpack-plugin</a><br>通过 Facebook 的 Prepack 优化输出的 JS 代码的性能：编译代码时提前将计算结果放到编译后的代码中，而不是在代码运行时才去求值</p><ul><li>通过 Babel 将 JS 源码解析成 AST，以更细粒度分析源码</li><li>实现了一个 JS 解释器，用于执行源码。借助这个解释器，prepack 才能理解源码具体是如何执行的，并将执行过程中的结果返回到输出中</li><li>不能识别 DOM API 和 部分 Node.js API</li><li>代码在优化后性能可能更差</li><li>代码在优化后，文件的尺寸可能大大增加</li><li><span data-type="background" style="background-color:#FADB14">现在用于线上环境还为时过早</span><h3 id="uglifyjs-webpack-plugin"><a href="#uglifyjs-webpack-plugin" class="headerlink" title="uglifyjs-webpack-plugin"></a><a name="yhkufg"></a>uglifyjs-webpack-plugin</h3><a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin" target="_blank" rel="noopener">https://github.com/webpack-contrib/uglifyjs-webpack-plugin</a><br>通过 UglifyJS 压缩 ES6 代码；V4.0 实例不放到 Plugin 中了，放到 optimization.minimizer 中去了<br>参数：</li><li><ul><li>sourceMap: 默认不生成</li></ul></li><li>beautify：是否输出可读性较强的代码，即保留空格和制表符。默认true</li><li>comments: 是否保留代码中的注释。默认 true</li><li>compress.warning: 是否在 uglifyJS 删除没用的代码时输出警告信息。默认 true</li><li>drop_console: 是否删除代码中的所有 console 语句。默认 false</li><li>collapse_vars: 是否内嵌已定义但是只用到一次的变量。默认true。</li><li>reduce_vars: 是否提取出现了多次但是没有定义成变量去引用的静态值</li></ul><h3 id="webpack-parallel-uglify-plugin"><a href="#webpack-parallel-uglify-plugin" class="headerlink" title="webpack-parallel-uglify-plugin"></a><a name="1hnnwe"></a>webpack-parallel-uglify-plugin</h3><p><a href="https://github.com/gdborton/webpack-parallel-uglify-plugin" target="_blank" rel="noopener">https://github.com/gdborton/webpack-parallel-uglify-plugin</a><br>多线程执行 UglifyJS 代码压缩，提升构建的速度，在生产环境使用<br>使用时即不实用  UglifyJS ，直接用 ParalleUglifyPlugin，但是变成了并行执行</p><p>参数：</p><ul><li>test: 用正则匹配哪些文件需要被压缩，默认为/.js\$/</li><li>include: 用正则命中需要被压缩的文件，默认为[]</li><li>exclude: 用正则命中不需要被压缩的文件，默认为[]</li><li>cacheDir: 用于配置缓存存放的目录路径，缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回。默认不缓存</li><li>workerCount: 开启几个子进程去并发执行压缩。默认为当前运行的 CPU 核数 -1</li><li>sourceMap: 会导致压缩过程变慢</li><li>uglifyJS: 传递给 uglifyJS 的参数</li><li><span data-type="background" style="background-color:#FADB14">uglifyES</span>: 传递给 uglifyES 的参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> DefinePlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/DefinePlugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ParalleUglifyPlugin = <span class="built_in">require</span>(<span class="string">'webpack-parallel-uglify-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 使用 ParalleUglifyPlugin 并行压缩输出的 JS 代码</span></span><br><span class="line">        <span class="keyword">new</span> ParalleUglifyPlugin(&#123;</span><br><span class="line">            <span class="comment">// 传递给 UglifyJS 的参数</span></span><br><span class="line">            uglifyJS: &#123;</span><br><span class="line">                output: &#123;</span><br><span class="line">                    <span class="comment">// 最紧凑的输出</span></span><br><span class="line">                    beautify: <span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">// 删除所有注释</span></span><br><span class="line">                    comments: <span class="literal">false</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                compress: &#123;</span><br><span class="line">                    <span class="comment">// 在UglifyJS 删除没有用到的代码时不输出警告</span></span><br><span class="line">                    warnings: <span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">// 删除所有的console语句，可以兼容IE浏览器</span></span><br><span class="line">                    drop_console: <span class="literal">true</span>,</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="imagemin-webpack-plugin"><a href="#imagemin-webpack-plugin" class="headerlink" title="imagemin-webpack-plugin"></a><a name="3tgfwy"></a>imagemin-webpack-plugin</h3><p><a href="https://www.npmjs.com/package/imagemin-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/imagemin-webpack-plugin</a><br>压缩图片文件</p><h3 id="webpack-spritesmith"><a href="#webpack-spritesmith" class="headerlink" title="webpack-spritesmith"></a><a name="ceygle"></a>webpack-spritesmith</h3><p><a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">https://www.npmjs.com/package/webpack-spritesmith</a><br>制作雪碧图</p><h3 id="ModuleConcatenationPlugin"><a href="#ModuleConcatenationPlugin" class="headerlink" title="ModuleConcatenationPlugin"></a><a name="9tzofu"></a>ModuleConcatenationPlugin</h3><p><a href="https://webpack.js.org/plugins/module-concatenation-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/module-concatenation-plugin/</a><br>开启 WebpackScopeHoisting 功能</p><h3 id="dll-plugin"><a href="#dll-plugin" class="headerlink" title="dll-plugin"></a><a name="2kh7yk"></a>dll-plugin</h3><p><a href="https://webpack.js.org/plugins/dll-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/dll-plugin/</a><br>借助 DLL 的思想大幅度提升构建速度<br>DLL：动态链接库，在一个动态链接库中可以包含为其他模块调用的函数和数据</p><ul><li>将网页依赖的基础模块抽离出来，打包到一个个单独的动态链接库中。在一个动态链接库中可以包含多个模块</li><li>当需要导入的模块存在于某个动态链接库中时，这个模块不能被再次打包，而是去动态链接库中获取</li><li><p>页面依赖的所有动态链接库都需要被加载<br>包含大量复用模块的动态链接库只需被编译一次，在之后的构建过程中被动态链接库包含的模块将不会重新编译，而是直接使用动态链接库中的代码。只要不升级这些模块的版本，动态链接库就不用重新编译</p></li><li><p><span data-type="background" style="background-color:#FADB14"><strong>.dll：</strong></span> 包含了大量模块的代码，这些模块被存放在一个数组里，用数组的索引号作为ID，并且通过 <span data-type="color" style="color:#F5222D"><span data-type="background" style="background-color:#FADB14">_dll_react</span></span><span data-type="background" style="background-color:#FADB14"> </span> 变量将自己暴露在全局中，即可以通过 <span data-type="background" style="background-color:#FADB14">window._dll_react</span> 访问到其中包含的模块</p></li><li><strong><span data-type="background" style="background-color:#FADB14">manifest.json</span></strong>: 用于描述在动态链接库文件中包含哪些模块，以及每个模块的路径和 ID<h4 id="DllReferencePlugin"><a href="#DllReferencePlugin" class="headerlink" title="DllReferencePlugin"></a><a name="6bg5eo"></a>DllReferencePlugin</h4></li><li>用于在主要的配置文件中引入 DllPlugin 插件打包好的动态链接库文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 这里的路径要和 webpack.dll.config.js 里面的对应。</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">           <span class="comment">// 需要和webpack.dll.config.js中配置的context保持一致，用来指导webpack匹配manifest中库的路径</span></span><br><span class="line">          context: __dirname,</span><br><span class="line">          <span class="comment">// 用来引入webpack.dll.config.js中输出的manifest文件</span></span><br><span class="line">          manifest: path.resolve(__dirname, <span class="string">'./dist/dll/vendors-manifest.json'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a><a name="k7hemx"></a>DllPlugin</h4><ul><li>用于打包出一个个单独的动态链接库文件<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      new webpack.DllPlugin(&#123;</span><br><span class="line">           // manifest文件的输出路径,[name]的部分由entry的名字替换</span><br><span class="line">           path: path.join(__dirname, 'dist/dll/[name]-manifest.json'),</span><br><span class="line">           // 这里必须匹配上面的output.library中的值,dll暴露的对象名    </span><br><span class="line">           name: library,</span><br><span class="line">           // 解析包路径的上下文，这个要跟配置的dll user一致</span><br><span class="line">           context: __dirname</span><br><span class="line">      &#125;),</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hot-module-replacement-plugin"><a href="#hot-module-replacement-plugin" class="headerlink" title="hot-module-replacement-plugin"></a><a name="yd95mp"></a>hot-module-replacement-plugin</h3><p><a href="https://webpack.js.org/plugins/hot-module-replacement-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/hot-module-replacement-plugin/</a><br>开启模块热替换功能</p><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a><a name="gvnnlh"></a>其他插件</h2><h3 id="serviceworker-webpack-plugin"><a href="#serviceworker-webpack-plugin" class="headerlink" title="serviceworker-webpack-plugin"></a><a name="f8bbgi"></a>serviceworker-webpack-plugin</h3><p><a href="https://github.com/oliviertassinari/serviceworker-webpack-plugin" target="_blank" rel="noopener">https://github.com/oliviertassinari/serviceworker-webpack-plugin</a><br>为网页应用增加离线缓存功能</p><h3 id="stylelint-webpack-plugin"><a href="#stylelint-webpack-plugin" class="headerlink" title="stylelint-webpack-plugin"></a><a name="ndvrkw"></a>stylelint-webpack-plugin</h3><p><a href="https://github.com/JaKXz/stylelint-webpack-plugin" target="_blank" rel="noopener">https://github.com/JaKXz/stylelint-webpack-plugin</a><br>将stylelint集成到项目中</p><h3 id="i18n-webpack-plugin"><a href="#i18n-webpack-plugin" class="headerlink" title="i18n-webpack-plugin"></a><a name="hf4qfe"></a>i18n-webpack-plugin</h3><p><a href="https://github.com/webpack-contrib/i18n-webpack-plugin" target="_blank" rel="noopener">https://github.com/webpack-contrib/i18n-webpack-plugin</a><br>使网页支持国际化</p><h3 id="provide-plugin"><a href="#provide-plugin" class="headerlink" title="provide-plugin"></a><a name="vtffkm"></a>provide-plugin</h3><p><a href="https://webpack.js.org/plugins/provide-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/provide-plugin/</a><br>从环境中提供的全局变量中加载模块，而不用导入对应的文件</p><h3 id="web-webpack-plugin"><a href="#web-webpack-plugin" class="headerlink" title="web-webpack-plugin"></a><a name="cpcapa"></a>web-webpack-plugin</h3><p><a href="https://github.com/gwuhaolin/web-webpack-plugin" target="_blank" rel="noopener">https://github.com/gwuhaolin/web-webpack-plugin</a><br>可方便地为单页应用输出HTML，比 html-webpack-plugin 好用</p><h1 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a><a name="siidsa"></a>三、优化</h1><h2 id="缩小文件搜索范围"><a href="#缩小文件搜索范围" class="headerlink" title="缩小文件搜索范围"></a><a name="d1lwqt"></a>缩小文件搜索范围</h2><h3 id="Loader-配置"><a href="#Loader-配置" class="headerlink" title="Loader 配置"></a><a name="apg4bo"></a>Loader 配置</h3><ul><li>test</li><li>use</li><li>include</li><li>exclude</li><li>cacheDirectory: babel 支持缓存转换出的结果<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.(jsx|js)$/,</span><br><span class="line">            use: 'babel-loader?cacheDirectory',</span><br><span class="line">            exclude: path.resolve(__dirname, 'node_modules')</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="resolve-modules-配置"><a href="#resolve-modules-配置" class="headerlink" title="resolve.modules 配置"></a><a name="xdpsgo"></a>resolve.modules 配置</h3><p>配置Webpack去哪些目录下找第三方模块,默认是[‘node_modules’], 通过配置绝对路径减少搜索步骤</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        modules: [path.resolve(__dirname, 'node_modules')]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resolve-mainFields-配置"><a href="#resolve-mainFields-配置" class="headerlink" title="resolve.mainFields 配置"></a><a name="7wx6zm"></a>resolve.mainFields 配置</h3><p>用于配置第三方模块使用哪个入口文件；可用于不同的运行环境下使用不同的代码，例如在浏览器中通过原生的fetch 或者 XMLHttpRequest 实现，在 Node.js 中通过 http 模块实现</p><p>resolve.mainFields 的默认值和当前的 target 配置有关系</p><ul><li>当 target 为 web 或者 webworker 时，值是[“browser”, “module”, “main”]</li><li>当 target 为其他情况时，值是 [“module”, “main”]</li></ul><p>由于大多数第三方模块都采用 main 字段去描述入口文件的位置，所以可以通过配置 mainFields 字段为 main 值，减少搜索步骤，但是注意只要有一个模块出错，都可能会造成构建出的代码无法正常运行<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        mainFields: ['main'],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="resolve-alias-配置"><a href="#resolve-alias-配置" class="headerlink" title="resolve.alias 配置"></a><a name="34gsdo"></a>resolve.alias 配置</h3><ul><li>通过配置alias 使得不同环境引用不同的代码，如react-native-web 的使用</li><li>由于webpack 默认会从第三方模块中的 package.json 中的指定入口文件递归解析和处理依赖文件，一般情况下该入口文件会定义成包含检查和警告的未被压缩的代码，但是直接使用单独、完整的min.js文件可以跳过耗时的递归解析操作<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            'react': path.resolve(__dirname, './node_modules/react/dist/react.min.js')</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="resolve-extensions-配置"><a href="#resolve-extensions-配置" class="headerlink" title="resolve.extensions 配置"></a><a name="6910iw"></a>resolve.extensions 配置</h3><ul><li>后缀尝试列表要尽可能小，不要将项目中不可能存在的情况写到后缀尝试列表中</li><li>频率出现最高的文件后缀要优先放在最前面，以做到尽快退出寻找过程</li><li>在源码中写导入语句时，要尽可能带上后缀，从而可以避免寻找过程</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: ['js'],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="module-noParse-配置"><a href="#module-noParse-配置" class="headerlink" title="module.noParse 配置"></a><a name="soludl"></a>module.noParse 配置</h3><p>让 webpack 忽略对部分没采用模块化的文件的递归处理，如jQuery| react.min.js<br>注意被忽略掉的文件里不应该包含 import | require | define 等模块化的语句，不然会导致在构建出的代码包含无法在浏览器环境下执行的模块化语句<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        noParse: [/react\.min\.js$/],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HappyPack"><a href="#HappyPack" class="headerlink" title="HappyPack"></a><a name="ukbgzd"></a>HappyPack</h2><p>将任务分解给多个子进程去并发执行，子进程处理完后再将结果发送给主进程。由于 JS 是单线程模型，所以要发挥多核 CPU 的功能，就只能通过多进程实现，而无法通过多线程实现。</p><h3 id="接入-webpack"><a href="#接入-webpack" class="headerlink" title="接入 webpack"></a><a name="cxgpkr"></a>接入 webpack</h3><ul><li>在 <strong>Loader</strong> 配置中，对所有文件的处理都交给 <strong>happypack/loader</strong>, 使用紧跟其后的 <strong>querystring</strong> <span data-type="background" style="background-color:#FADB14">?id=babel</span> 去告诉 happypack/loader 选择哪个 HappyPack 实例处理文件</li><li>在 <strong>Plugin </strong>中新增了 HappyPack 实例，用于告诉 happypack/loader 如何处理 .js 和 .css 文件。选项中的 id 属性的值和上面 <strong>querystring</strong> 中的 <span data-type="background" style="background-color:#FADB14">?id=babel</span> 对应<ul><li><strong>id</strong>: </li><li><strong>loaders</strong>: 和原本Loader 配置中的一样</li><li><strong>threads</strong>: 代表开启几个子进程去处理这一类型的文件，默认是 3 个，必须是整数</li><li><strong>verbose</strong>: 是否允许 HappyPack 输出日志，默认是 true</li><li><strong>threadPool</strong>: 代表共享进程池，即多个 HappyPack 实例都使用同一个共享进程池中的子进程去处理任务，以防止资源占用过多。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D happypack</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=babel'</span>], <span class="comment">// 将对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例</span></span><br><span class="line">        exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=css'</span>],</span><br><span class="line">        exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|svg|jpg|gif|webp|ico)$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=file'</span>],</span><br><span class="line">        exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=url'</span>],</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'assets/fonts'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        id: <span class="string">'babel'</span>,</span><br><span class="line">        loaders: [<span class="string">'babel-loader?cacheDirectory'</span>],</span><br><span class="line">        threadPool: happyThreadPool,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        id: <span class="string">'css'</span>,</span><br><span class="line">        loaders: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">        threadPool: happyThreadPool,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        id: <span class="string">'file'</span>,</span><br><span class="line">        loaders: [<span class="string">'file-loader'</span>],</span><br><span class="line">        threadPool: happyThreadPool,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        id: <span class="string">'url'</span>,</span><br><span class="line">        loaders: [<span class="string">'url-loader'</span>],</span><br><span class="line">        threadPool: happyThreadPool, <span class="comment">// 使用共享进程池中的子进程去处理任务</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="优化文件监听"><a href="#优化文件监听" class="headerlink" title="优化文件监听"></a><a name="mm8wnp"></a>优化文件监听</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --watch</span><br></pre></td></tr></table></figure><p>webpack-dev-server 默认开启文件监听<br>在开启监听模式时，默认会监听配置的 Entry 文件和所有 Entry 递归依赖的文件，包括 node_modules 下的第三方模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">        ignored: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用这种方法优化后，消耗的内存和 CPU 将会大大减少</p><ul><li>watchOptions.aggregateTimeout 越大性能越好，能降低重新构建的频率</li><li>watchOptions.poll 越小越好，降低检查的频率<br>同时注意这两个优化会导致监听模式反应和灵敏度降低</li></ul><h2 id="优化自动刷新"><a href="#优化自动刷新" class="headerlink" title="优化自动刷新"></a><a name="fwi0fd"></a>优化自动刷新</h2><p>自动刷新：</p><ul><li style="list-style: none"><input type="checkbox"> 借助浏览器扩展去通过浏览器提供的接口刷新，如 WebStorm IDE 的 LiveEdit 功能</li><li style="list-style: none"><input type="checkbox" checked> 向要开发的网页中注入代理客户端代码，通过代理客户端去刷新整个页面</li><li style="list-style: none"><input type="checkbox" checked> 将要开发的网页装进一个 iframe 中，通过 刷新 iframe 去看到最新效果 </li></ul><p>devServer.inline : 用来控制是否向 Chunk 中注入代理客户端，默认注入。优化即关闭，从而只注入一个代理客户端，而非粗暴地为每个 chunk 都注入。</p><ul><li>入口网址会变成 <a href="http://localhost:8080/webpack-dev-server" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server</a></li><li>bundle.js 中不再包含代理客户端的代码</li></ul><h2 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a><a name="22zfch"></a>模块热替换</h2><p>devServer 默认不开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server --hot</span><br></pre></td></tr></table></figure><p>热替换性能问题和自动刷新一样主要是因为需要监听文件的变化和注入客户端：忽略 node_modules</p><h3 id="Update-module-优化"><a href="#Update-module-优化" class="headerlink" title="Update module 优化"></a><a name="fh72ay"></a>Update module 优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NamedModulesPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/NamedModulesPlugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 显示出被替换模块的名称</span></span><br><span class="line">        <span class="keyword">new</span> NamedModulesPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压缩-CSS"><a href="#压缩-CSS" class="headerlink" title="压缩 CSS"></a><a name="8uycon"></a>压缩 CSS</h2><p>css-loader 内置了 cssnano，只需开启 css-loader 的 minimize 选项<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: [<span class="string">'css-loader?minimize'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a><a name="08r2rp"></a>CDN 加速</h2><p>内容分发网络：通过将资源部署到世界各地，使用户在访问时按照仅仅原则从离其最近的服务器获取资源，来加快资源的获取速度。通过优化物理链路层传输过程中的光速有限、丢包等问题来提升网速。</p><ul><li>针对 <strong>HTML 文件：</strong>不开启缓存，将 HTML 放到自己的服务器上，而不是 CDN 服务器上，同时关闭自己服务器上的缓存。自己的服务器只提供 HTML 文件和数据接口</li><li>针对静态的<strong> JS 、CSS、图片等文</strong>件：开启 CDN 和缓存，上传到 CDN 服务上，同时为每个文件名带上由文件内容算出的 Hash 值。</li><li>更改 HTML 中引入静态文件的资源引入地址为CDN 服务的 URL 地址</li><li>“//cdn.com/id/app_a6976b6d.css” 这样的 URL 省略了 http：或者 http：前缀，这样做在访问这些资源时会自动根据当前 HTML 的 URL 采用了什么模式去决定是采用 HTTP 还是 HTTPS 模式</li><li>浏览器规则：在同一时刻针对同一个域名资源的并行请求有限制(大概4个左右)，则会导致资源的加载被阻塞。可以将这些静态资源分散到不同的 CDN 服务上</li><li>用多个域名后会带来一个新问题：增加域名解析时间，对于是否采用多域名分散资源，需要根据自己的需求去衡量得失</li></ul><h3 id="webpack-实现-CDN-的接入"><a href="#webpack-实现-CDN-的接入" class="headerlink" title="webpack 实现 CDN 的接入"></a><a name="osfkdh"></a>webpack 实现 CDN 的接入</h3><ul><li>静态资源导入 URL 需要变成指向 CDN 服务的绝对路径的 URL，而不是相对于 HTML 文件的 URL</li><li>静态资源的文件名需要带上由文件内容算出来的 Hash 值，以防止被缓存</li><li><p>将不同类型的资源放到不同域名的 CDN 服务上，以防止资源的并行加载被阻塞</p></li><li><p>在 output.publicPath 中设置 JS 的地址</p></li><li>在 css-loader.publicPath 中设置被 CSS 导入的资源的地址</li><li>在 WebPlugin.stylePublicPath 中设置 CSS 文件的地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const HappyPack = require(&apos;happypack&apos;);</span><br><span class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;[name]_[chunkhash:8].js&apos;, // 为输出的 JS 加上 Hash 值</span><br><span class="line">    path: path.resolve(__dirname, &apos;./dist&apos;),</span><br><span class="line">    publicPath: &apos;//js.cdn.com/id/&apos;, // 指定存放 JS 文件的 CDN 目录 URL</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(jsx|js)$/,</span><br><span class="line">        use: [&apos;happypack/loader?id=babel&apos;], // 将对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例</span><br><span class="line">        exclude: path.resolve(__dirname, &apos;node_modules&apos;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(css|less)$/,</span><br><span class="line">        use: [&apos;happypack/loader?id=css&apos;],</span><br><span class="line">        exclude: path.resolve(__dirname, &apos;node_modules&apos;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|svg|jpg|gif|webp|ico)$/,</span><br><span class="line">        use: [&apos;happypack/loader?id=file&apos;],</span><br><span class="line">        exclude: path.resolve(__dirname, &apos;node_modules&apos;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</span><br><span class="line">        use: [&apos;happypack/loader?id=url&apos;],</span><br><span class="line">        include: path.resolve(__dirname, &apos;assets/fonts&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    plugins: [</span><br><span class="line">      new HappyPack(&#123;</span><br><span class="line">        id: &apos;babel&apos;,</span><br><span class="line">        loaders: [&apos;babel-loader?cacheDirectory&apos;]</span><br><span class="line">      &#125;),</span><br><span class="line">      new HappyPack(&#123;</span><br><span class="line">        id: &apos;css&apos;,</span><br><span class="line">        loaders: [&apos;style-loader&apos;, &apos;css-loader?minimizer&apos;, &apos;less-loader&apos;]</span><br><span class="line">      &#125;),</span><br><span class="line">      new HappyPack(&#123;</span><br><span class="line">        id: &apos;file&apos;,</span><br><span class="line">        loaders: [&apos;file-loader?name=[name]_[hash:8].[ext]&apos;] // 为输出的图片名加上 Hash 值</span><br><span class="line">      &#125;),</span><br><span class="line">      new HappyPack(&#123;</span><br><span class="line">        id: &apos;url&apos;,</span><br><span class="line">        loaders: [&apos;url-loader&apos;]</span><br><span class="line">      &#125;),</span><br><span class="line">      new ExtractTextPlugin(&#123;</span><br><span class="line">        filename: &apos;[name]_[contenthash:8].css&apos;, // 为输出的 CSS 文件名加上 Hash 值</span><br><span class="line">        publicPath: &apos;//img.cdn.com/id/&apos;, // 指定存放 CSS 中导入的资源(例如图片)的 CDN 目录 URL</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a><a name="6u0szz"></a>Tree Shaking</h2><p> 剔除 JS 中用不上的死代码，依赖静态的 ES6 模块化语法，如果采用了 ES5 则 webpack 无法分析出可以剔除哪些代码</p><h3 id="接入-Tree-Shaking"><a href="#接入-Tree-Shaking" class="headerlink" title="接入 Tree Shaking"></a><a name="bwdflg"></a>接入 Tree Shaking</h3><ul><li>需要配置 Babel 以让其保留 ES6 模块化语句<br>.babelrc<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"env"</span>, &#123;</span><br><span class="line">    <span class="string">"modules"</span>: <span class="literal">false</span> <span class="comment">// 关闭 Babel 的模块转换功能，保留原本的ES6模块化语法</span></span><br><span class="line">    &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>大部分 NPM 库都会提供两份代码，一份用 CommonJS 模块化语法，一份用 ES6 模块化语法，并在 package.json  中分别指出这两份代码的入口：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "main": "lib/index.js", // 指明采用 CommonJS 模块化的代码入口</span><br><span class="line">    "jsnext:main": "es/index.js" // 指明采用 ES6 模块化的代码入口,社区约定</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置 webpack 的文件寻找规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        // 针对 NPM 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件</span><br><span class="line">        mainFields: [&apos;jsnext:main&apos;, &apos;browser&apos;, &apos;main&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id=""><a href="#" class="headerlink" title=""></a><a name="yifhal"></a></h2><h2 id="Scope-Hoisting"><a href="#Scope-Hoisting" class="headerlink" title="Scope Hoisting"></a><a name="69torp"></a>Scope Hoisting</h2><blockquote><p>分析模块之间的依赖关系，尽可能将被打散的模块合并到一个函数中，但前提是不能造成代码冗余。因此只有那些被引用了一次的模块才能被合并</p><ul><li>代码体积更小，因为函数申明语句会产生大量的代码</li><li>代码在运行时因为创建的函数作用域变少了，所以内存开销也变小了</li><li>对于非 ES6 模块化语法的代码，会自动降级处理，可以在启动时加上 <span data-type="background" style="background-color:#FADB14">–display-optimization-bailout</span> 在控制台输出降级日志</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ModuleConcatnationPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/ModuleConcatnationPlugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        mainFields: [<span class="string">'jsnext:main'</span>, <span class="string">'browser'</span>, <span class="string">'main'</span>] <span class="comment">// Scope Hoisting 依赖 ES6 模块化语法</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ModuleConcatnationPlugin(), <span class="comment">// 开启 Scope Hoisting</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分割代码以按需加载"><a href="#分割代码以按需加载" class="headerlink" title="分割代码以按需加载"></a><a name="cdb6yd"></a>分割代码以按需加载</h2><p>按需加载：用户当前需要用什么功能就只加载这个功能对应的代码，而不是加载所有功能对应的代码</p><p>为 SPA 做按需优化时：</p><ul><li style="list-style: none"><input type="checkbox"> 将整个网站划分成一个个小功能，再按照每个功能的相关程度分成几类</li><li style="list-style: none"><input type="checkbox"> 将每类合并为一个 Chunk，按需加载对应的 Chunk</li><li style="list-style: none"><input type="checkbox"> 不要按需加载首页所对应的功能，将其放到执行入口所在的 Chunk 中，以减少用户能感知的网页加载时间</li><li style="list-style: none"><input type="checkbox"> 对于不依赖大量代码的功能点，例如依赖 Chart.js 去画图表、依赖 flv.js 去播放视频的功能点，可再对其进行按需加载</li><li style="list-style: none"><input type="checkbox"> 被分割出去的代码的加载需要一定的时机去触发，即当用户操作到了或者<strong>即将操作到对应功能时</strong>再去加载对应的代码。被分割出去的代码的加载时机需要开发者根据网页的需求去衡量和确定</li></ul><h3 id="分割代码按需加载ReactRouter的案例"><a href="#分割代码按需加载ReactRouter的案例" class="headerlink" title="分割代码按需加载ReactRouter的案例"></a><a name="rnykgi"></a>分割代码按需加载ReactRouter的案例</h3><blockquote><p>.babelrc</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"env"</span>,</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"syntax-dynamic-import"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;PureComponent, createElement&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HashRouter, Route, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> PageHome <span class="keyword">from</span> <span class="string">'./pages/home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步加载组件</span></span><br><span class="line"><span class="comment"> * @param load 组件加载函数，load 函数会返回一个 Promise，在文件加载完成时 resolve</span></span><br><span class="line"><span class="comment"> * @returns &#123;AsyncComponent&#125; 返回一个高阶组件用于封装需要异步加载的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAsyncComponent</span>(<span class="params">load</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="comment">// 在高阶组件 DidMount 时才去执行网络加载步骤</span></span><br><span class="line">      load().then(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>: component&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 代码加载成功，获取到了代码导出的值，调用 setState 通知高阶组件重新渲染子组件</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          component,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;component&#125; = <span class="keyword">this</span>.state || &#123;&#125;;</span><br><span class="line">      <span class="comment">// component 是 React.Component 类型，需要通过 React.createElement 生产一个组件实例</span></span><br><span class="line">      <span class="keyword">return</span> component ? createElement(component) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;HashRouter&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">          &lt;Link to=<span class="string">'/'</span>&gt;Home&lt;<span class="regexp">/Link&gt; | &lt;Link to='/</span>about<span class="string">'&gt;About&lt;/Link&gt; | &lt;Link to='</span>/login<span class="string">'&gt;Login&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/nav&gt;</span></span><br><span class="line"><span class="string">        &lt;hr/&gt;</span></span><br><span class="line"><span class="string">        &lt;Route exact path='</span>/<span class="string">' component=&#123;PageHome&#125;/&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path='</span>/about<span class="string">' component=&#123;getAsyncComponent(</span></span><br><span class="line"><span class="string">          // 异步加载函数，异步地加载 PageAbout 组件</span></span><br><span class="line"><span class="string">          () =&gt; import(/* webpackChunkName: '</span>page-about<span class="string">' */'</span>./pages/about<span class="string">')</span></span><br><span class="line"><span class="string">        )&#125;</span></span><br><span class="line"><span class="string">        /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path='</span>/login<span class="string">' component=&#123;getAsyncComponent(</span></span><br><span class="line"><span class="string">          // 异步加载函数，异步地加载 PageAbout 组件</span></span><br><span class="line"><span class="string">          () =&gt; import(/* webpackChunkName: '</span>page-login<span class="string">' */'</span>./pages/login<span class="string">')</span></span><br><span class="line"><span class="string">        )&#125;</span></span><br><span class="line"><span class="string">        /&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/HashRouter&gt;</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 渲染根组件</span></span><br><span class="line"><span class="string">render(&lt;App/&gt;, window.document.getElementById('</span>app<span class="string">'));</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/home/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">PageHome</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Page Home&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/about/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">PageAbout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Page About&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/login/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">PageLogin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Page Login&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视化分析工具"><a href="#可视化分析工具" class="headerlink" title="可视化分析工具"></a><a name="5bw7gz"></a>可视化分析工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --profile --json</span><br></pre></td></tr></table></figure><h3 id="webpack-analyse-官方"><a href="#webpack-analyse-官方" class="headerlink" title="webpack analyse(官方)"></a><a name="g2cuis"></a>webpack analyse(官方)</h3><ul><li><strong>Modules</strong>: 展示所有模块，每个模块对应一个文件，且包含所有模块之间的依赖关系图、模块路径、模块ID、模块所属的 Chunk、模块的大小</li><li><strong>Chunks</strong>: 展示所有代码块，在一个代码块中包含多个模块，并且包含代码块的 ID、名称、大小，每个代码块包含的模块数量，以及代码块之间的依赖关系图</li><li><strong>Assets:</strong> 展示所有输出的文件资源，包括JS、CSS、图片等，并且包括文件名称、大小及该文件来自哪个代码块</li><li><strong>Warning</strong>: 展示构建过程中出现的所有警告信息</li><li><strong>Errors</strong>: 展示构建过程中出现的所有错误信息</li><li><strong>Hints</strong>：展示处理每个模块所耗费的时间<h3 id="webpack-bundle-analyzer"><a href="#webpack-bundle-analyzer" class="headerlink" title="webpack-bundle-analyzer"></a><a name="3kdmql"></a>webpack-bundle-analyzer</h3></li><li>没有官方的那么多功能，但更直观</li><li>打包出的文件中都包含什么</li><li>每个文件的尺寸在总体中的占比，一眼看出哪些文件的尺寸大</li><li>模块之间的包含关系</li><li>每个文件的 Gzip 后的大小</li></ul><h2 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a><a name="55wxrl"></a>推荐配置</h2><h3 id="最优构建速度"><a href="#最优构建速度" class="headerlink" title="最优构建速度"></a><a name="go1kqh"></a>最优构建速度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/CommonsChunkPlugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;AutoWebPlugin&#125; = <span class="built_in">require</span>(<span class="string">'web-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动寻找 pages 目录下的所有目录，把每一个目录看成一个单页应用</span></span><br><span class="line"><span class="keyword">const</span> autoWebPlugin = <span class="keyword">new</span> AutoWebPlugin(<span class="string">'./src/pages'</span>, &#123;</span><br><span class="line">  <span class="comment">// HTML 模版文件所在的文件路径</span></span><br><span class="line">  template: <span class="string">'./template.html'</span>,</span><br><span class="line">  <span class="comment">// 提取出所有页面公共的代码</span></span><br><span class="line">  commonsChunk: &#123;</span><br><span class="line">    <span class="comment">// 提取出公共代码 Chunk 的名称</span></span><br><span class="line">    name: <span class="string">'common'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// AutoWebPlugin 会找为寻找到的所有单页应用，生成对应的入口配置，</span></span><br><span class="line">  <span class="comment">// autoWebPlugin.entry 方法可以获取到生成入口配置</span></span><br><span class="line">  entry: autoWebPlugin.entry(&#123;</span><br><span class="line">    <span class="comment">// 这里可以加入你额外需要的 Chunk 入口</span></span><br><span class="line">    base: <span class="string">'./src/base.js'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</span></span><br><span class="line">    <span class="comment">// 其中 __dirname 表示当前工作目录，也就是项目根目录</span></span><br><span class="line">    modules: [path.resolve(__dirname, <span class="string">'node_modules'</span>)],</span><br><span class="line">    <span class="comment">// 只采用 main 字段作为入口文件描述字段，以减少搜索步骤</span></span><br><span class="line">    mainFields: [<span class="string">'jsnext:main'</span>, <span class="string">'main'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 如果项目源码中只有 js 文件就不要写成 /\.jsx?$/，提升正则表达式性能</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=babel'</span>],</span><br><span class="line">        <span class="comment">// 只对项目根目录下的 src 目录中的文件采用 babel-loader</span></span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=ui-component'</span>],</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 增加对 CSS 文件的支持</span></span><br><span class="line">        test: <span class="regexp">/\.css/</span>,</span><br><span class="line">        <span class="comment">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class="line">        use: [<span class="string">'happypack/loader?id=css'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    autoWebPlugin,</span><br><span class="line">    <span class="comment">// 使用HappyPack</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'babel'</span>,</span><br><span class="line">      <span class="comment">// babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启</span></span><br><span class="line">      loaders: [<span class="string">'babel-loader?cacheDirectory'</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      <span class="comment">// UI 组件加载拆分</span></span><br><span class="line">      id: <span class="string">'ui-component'</span>,</span><br><span class="line">      loaders: [&#123;</span><br><span class="line">        loader: <span class="string">'ui-component-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          lib: <span class="string">'antd'</span>,</span><br><span class="line">          style: <span class="string">'style/index.css'</span>,</span><br><span class="line">          camel2: <span class="string">'-'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'css'</span>,</span><br><span class="line">      <span class="comment">// 如何处理 .css 文件，用法和 Loader 配置中一样</span></span><br><span class="line">      loaders: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 4-11提取公共代码</span></span><br><span class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">      <span class="comment">// 从 common 和 base 两个现成的 Chunk 中提取公共的部分</span></span><br><span class="line">      chunks: [<span class="string">'common'</span>, <span class="string">'base'</span>],</span><br><span class="line">      <span class="comment">// 把公共的部分放到 base 中</span></span><br><span class="line">      name: <span class="string">'base'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 4-5使用自动刷新：不监听的 node_modules 目录下的文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最佳质量"><a href="#最佳质量" class="headerlink" title="最佳质量"></a><a name="2de5yl"></a>最佳质量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> DefinePlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/DefinePlugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ModuleConcatenationPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/ModuleConcatenationPlugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/CommonsChunkPlugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;AutoWebPlugin&#125; = <span class="built_in">require</span>(<span class="string">'web-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"><span class="keyword">const</span> ParallelUglifyPlugin = <span class="built_in">require</span>(<span class="string">'webpack-parallel-uglify-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动寻找 pages 目录下的所有目录，把每一个目录看成一个单页应用</span></span><br><span class="line"><span class="keyword">const</span> autoWebPlugin = <span class="keyword">new</span> AutoWebPlugin(<span class="string">'./src/pages'</span>, &#123;</span><br><span class="line">  <span class="comment">// HTML 模版文件所在的文件路径</span></span><br><span class="line">  template: <span class="string">'./template.html'</span>,</span><br><span class="line">  <span class="comment">// 提取出所有页面公共的代码</span></span><br><span class="line">  commonsChunk: &#123;</span><br><span class="line">    <span class="comment">// 提取出公共代码 Chunk 的名称</span></span><br><span class="line">    name: <span class="string">'common'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指定存放 CSS 文件的 CDN 目录 URL</span></span><br><span class="line">  stylePublicPath: <span class="string">'//css.cdn.com/id/'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// AutoWebPlugin 会找为寻找到的所有单页应用，生成对应的入口配置，</span></span><br><span class="line">  <span class="comment">// autoWebPlugin.entry 方法可以获取到生成入口配置</span></span><br><span class="line">  entry: autoWebPlugin.entry(&#123;</span><br><span class="line">    <span class="comment">// 这里可以加入你额外需要的 Chunk 入口</span></span><br><span class="line">    base: <span class="string">'./src/base.js'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 给输出的文件名称加上 hash 值</span></span><br><span class="line">    filename: <span class="string">'[name]_[chunkhash:8].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    <span class="comment">// 指定存放 JavaScript 文件的 CDN 目录 URL</span></span><br><span class="line">    publicPath: <span class="string">'//js.cdn.com/id/'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</span></span><br><span class="line">    <span class="comment">// 其中 __dirname 表示当前工作目录，也就是项目根目录</span></span><br><span class="line">    modules: [path.resolve(__dirname, <span class="string">'node_modules'</span>)],</span><br><span class="line">    <span class="comment">// 只采用 main 字段作为入口文件描述字段，以减少搜索步骤</span></span><br><span class="line">    mainFields: [<span class="string">'jsnext:main'</span>, <span class="string">'main'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 如果项目源码中只有 js 文件就不要写成 /\.jsx?$/，提升正则表达式性能</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=babel'</span>],</span><br><span class="line">        <span class="comment">// 只对项目根目录下的 src 目录中的文件采用 babel-loader</span></span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'happypack/loader?id=ui-component'</span>],</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 增加对 CSS 文件的支持</span></span><br><span class="line">        test: <span class="regexp">/\.css/</span>,</span><br><span class="line">        <span class="comment">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: [<span class="string">'happypack/loader?id=css'</span>],</span><br><span class="line">          <span class="comment">// 指定存放 CSS 中导入的资源（例如图片）的 CDN 目录 URL</span></span><br><span class="line">          publicPath: <span class="string">'//img.cdn.com/id/'</span></span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    autoWebPlugin,</span><br><span class="line">    <span class="comment">// 4-14开启ScopeHoisting</span></span><br><span class="line">    <span class="keyword">new</span> ModuleConcatenationPlugin(),</span><br><span class="line">    <span class="comment">// 4-3使用HappyPack</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      <span class="comment">// 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件</span></span><br><span class="line">      id: <span class="string">'babel'</span>,</span><br><span class="line">      <span class="comment">// babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启</span></span><br><span class="line">      loaders: [<span class="string">'babel-loader?cacheDirectory'</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      <span class="comment">// UI 组件加载拆分</span></span><br><span class="line">      id: <span class="string">'ui-component'</span>,</span><br><span class="line">      loaders: [&#123;</span><br><span class="line">        loader: <span class="string">'ui-component-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          lib: <span class="string">'antd'</span>,</span><br><span class="line">          style: <span class="string">'style/index.css'</span>,</span><br><span class="line">          camel2: <span class="string">'-'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'css'</span>,</span><br><span class="line">      <span class="comment">// 如何处理 .css 文件，用法和 Loader 配置中一样</span></span><br><span class="line">      <span class="comment">// 通过 minimize 选项压缩 CSS 代码</span></span><br><span class="line">      loaders: [<span class="string">'css-loader?minimize'</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      <span class="comment">// 给输出的 CSS 文件名称加上 hash 值</span></span><br><span class="line">      filename: <span class="string">`[name]_[contenthash:8].css`</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 4-11提取公共代码</span></span><br><span class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">      <span class="comment">// 从 common 和 base 两个现成的 Chunk 中提取公共的部分</span></span><br><span class="line">      chunks: [<span class="string">'common'</span>, <span class="string">'base'</span>],</span><br><span class="line">      <span class="comment">// 把公共的部分放到 base 中</span></span><br><span class="line">      name: <span class="string">'base'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="comment">// 定义 NODE_ENV 环境变量为 production 去除 react 代码中的开发时才需要的部分</span></span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 使用 ParallelUglifyPlugin 并行压缩输出的 JS 代码</span></span><br><span class="line">    <span class="keyword">new</span> ParallelUglifyPlugin(&#123;</span><br><span class="line">      <span class="comment">// 传递给 UglifyJS 的参数</span></span><br><span class="line">      uglifyJS: &#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">          <span class="comment">// 最紧凑的输出</span></span><br><span class="line">          beautify: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 删除所有的注释</span></span><br><span class="line">          comments: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        compress: &#123;</span><br><span class="line">          <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">          drop_console: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">          collapse_vars: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">          reduce_vars: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a><a name="8eidni"></a>参考资源</h1><p>《深入浅出 webpack》<a href="https://github.com/gwuhaolin/dive-into-webpack" target="_blank" rel="noopener">https://github.com/gwuhaolin/dive-into-webpack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;color:rgb(38, 38, 38)&quot;&gt;&lt;span data-type=&quot;background&quot; style=&quot;background-color:rgb(255, 255, 255)&quot;&gt;tags: [组件]
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于开源组件</title>
    <link href="http://lulustyle.net/2018/12/12/%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://lulustyle.net/2018/12/12/关于开源组件/</id>
    <published>2018-12-12T13:27:18.000Z</published>
    <updated>2018-12-25T09:24:59.131Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/ex-course/react" target="_blank" rel="noopener">实战React业务组件库 · 语雀</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.yuque.com/ex-course/react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;实战React业务组件库 · 语雀&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Function Programming</title>
    <link href="http://lulustyle.net/2018/12/12/Function%20Programming/"/>
    <id>http://lulustyle.net/2018/12/12/Function Programming/</id>
    <published>2018-12-12T12:13:32.000Z</published>
    <updated>2018-12-27T01:35:19.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决什么问题"><a href="#解决什么问题" class="headerlink" title="解决什么问题"></a><a name="2d1dzl"></a>解决什么问题</h2><p><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">人工智能、区块链、AR、VR、新零售等业务场景的出现，产品界面交互正在变得越来越复杂，需要快速、正确、高效地开发出高复杂度页面。</span></span></p><h2 id="FP-有什么特点"><a href="#FP-有什么特点" class="headerlink" title="FP 有什么特点"></a><a name="wis6hb"></a>FP 有什么特点</h2><p><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">JS 语言中的函数不同于 Java ，C/C++ 等语言, 可以被当做参数和返回值进行传递</span></span></p><ul><li>函数为一等公民</li><li>模块化、组合</li><li>引用透明</li><li>避免状态改变</li><li>避免共享状态</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a><a name="e5ppzp"></a>案例</h2><h3 id="分别实现数组所有元素相加、相乘、相与？"><a href="#分别实现数组所有元素相加、相乘、相与？" class="headerlink" title="分别实现数组所有元素相加、相乘、相与？"></a><a name="u4gpyv"></a>分别实现数组所有元素相加、相乘、相与？</h3><h5 id="非-FP-风格"><a href="#非-FP-风格" class="headerlink" title="非 FP 风格"></a><a name="2matkm"></a>非 FP 风格</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    res += array[i];   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    res *= array[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">and</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    res = res &amp; array[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plus(array);</span><br><span class="line">mul(array);</span><br><span class="line">and(array);</span><br></pre></td></tr></table></figure><h5 id="FP-风格"><a href="#FP-风格" class="headerlink" title="FP 风格"></a><a name="elquex"></a>FP 风格</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ops = &#123; </span><br><span class="line">  <span class="string">"plus"</span>: <span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y,</span><br><span class="line">  <span class="string">"mul"</span> : <span class="function">(<span class="params">x,y</span>)=&gt;</span>x*y,</span><br><span class="line">  <span class="string">"and"</span> : <span class="function">(<span class="params">x,y</span>)=&gt;</span>x&amp;y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">op, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array.slice(<span class="number">1</span>).reduce(ops[op], array[<span class="number">0</span>]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">operation(<span class="string">"plus"</span>, array);</span><br><span class="line">operation(<span class="string">"mul"</span>,  array);</span><br><span class="line">operation(<span class="string">"and"</span>,  array);</span><br></pre></td></tr></table></figure><h2 id="React-的-FP"><a href="#React-的-FP" class="headerlink" title="React 的 FP"></a><a name="7r5wph"></a>React 的 FP</h2><p>React 框架中，当用户操作 UI 或者 API 的返回带来了数据的改变，React 随即进行 virtual dom diff 计算得到 dom 的修改指令，对 dom 元素应用修改指令便得到最新的 html 界面，如下图所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/84728/1544618990881-85f27452-cf5c-4951-b329-568e4b92b16a.png" alt="1679614832a0615a.png | center | 747x354"></p><p><span data-type="color" style="color:rgb(51, 51, 51)"><span data-type="background" style="background-color:rgb(255, 255, 255)">不难发现，React 其实是应用数据对UI的一种映射，不同的数据会映射出不同样式的 UI 界面，我们可以得出如下的表达式：</span></span><div id="upocos" data-type="math" data-display="inline" data-align="left" data-src="https://cdn.nlark.com/__latex/76af7c1309c81482c1a4c46ff1cb9663.svg" data-text="UI%20%3D%20React(data)%0A" data-width="135" data-height="24"><img src="https://cdn.nlark.com/__latex/76af7c1309c81482c1a4c46ff1cb9663.svg" width="135"></div></p><p>没错，<strong>React 的本质其实是一种函数</strong>，并且还是符合 FP 要求的“引用透明”函数。所谓“引用透明”就是指函数的输出仅依赖函数参数，不受任何外部环境影响。这样的函数可测试性强，也非常容易进行组合。</p><p>在 React 的体系下，任何组件都可由一个个更小的组件构成，每个组件都只关心自己的输入，他们不断地接受新的数据并输出对应的新的UI界面。React 框架中常用的“高阶组件”可以看作引用透明”函数的组合模式。</p><p>在具体业务中我们通常还需要权衡 React 组件的复用性和开发体验，如果组件被拆分的过于细，固然复用性会提升，但文件数量会增加，对应的文档和沟通成本也会增加，这也是 FP 在实践过程中经常遭人诟病的点，即复用性提升后带来的额外开发成本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解决什么问题&quot;&gt;&lt;a href=&quot;#解决什么问题&quot; class=&quot;headerlink&quot; title=&quot;解决什么问题&quot;&gt;&lt;/a&gt;&lt;a name=&quot;2d1dzl&quot;&gt;&lt;/a&gt;解决什么问题&lt;/h2&gt;&lt;p&gt;&lt;span data-type=&quot;color&quot; style=&quot;co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不想当架构师的前端不是一名好前端</title>
    <link href="http://lulustyle.net/2018/12/08/%E4%B8%8D%E6%83%B3%E5%BD%93%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B8%8D%E6%98%AF%E4%B8%80%E5%90%8D%E5%A5%BD%E5%89%8D%E7%AB%AF/"/>
    <id>http://lulustyle.net/2018/12/08/不想当架构师的前端不是一名好前端/</id>
    <published>2018-12-08T12:52:10.000Z</published>
    <updated>2018-12-25T09:24:59.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="架构师能力模型"><a href="#架构师能力模型" class="headerlink" title="架构师能力模型"></a><a name="sa3vmm"></a>架构师能力模型</h2><p>团队管理能力<br>在线运维能力 项目管理能力<br>性能优化能力 架构能力<br>编程能力 调试能力 编译部署能力</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;架构师能力模型&quot;&gt;&lt;a href=&quot;#架构师能力模型&quot; class=&quot;headerlink&quot; title=&quot;架构师能力模型&quot;&gt;&lt;/a&gt;&lt;a name=&quot;sa3vmm&quot;&gt;&lt;/a&gt;架构师能力模型&lt;/h2&gt;&lt;p&gt;团队管理能力&lt;br&gt;在线运维能力 项目管理能力&lt;br&gt;性能
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="http://lulustyle.net/2018/12/08/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://lulustyle.net/2018/12/08/博客搭建/</id>
    <published>2018-12-08T12:48:16.000Z</published>
    <updated>2018-12-25T09:24:59.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a name="ddhwfr"></a>前言</h2><p><a href="https://www.yuque.com" target="_blank" rel="noopener">语雀</a> 是一款非常好用的知识管理网站（类似 GitBook)，它的编辑器非常好用，而且支持导出 Markdown，这篇文章是教你如何使用语雀的编辑器写静态博客。这里的静态博客用了 Hexo，Jekyll 也是没有问题的。</p><h2 id="创建-Hexo-博客"><a href="#创建-Hexo-博客" class="headerlink" title="创建 Hexo 博客"></a><a name="0gvdtv"></a>创建 Hexo 博客</h2><p>已经有 Hexo 博客的可以跳过。如果你是 Jekyll ，也可以跳过。</p><ul><li>安装 Node.js</li><li><p>安装 Hexo 脚手架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化一个博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>其他设置和命令见：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p></li></ul><h2 id="安装语雀文章下载插件"><a href="#安装语雀文章下载插件" class="headerlink" title="安装语雀文章下载插件"></a><a name="gfghzt"></a>安装语雀文章下载插件</h2><p><a href="https://github.com/x-cold/yuque-hexo/" target="_blank" rel="noopener">yuque-hexo</a> 是一个 Node.js 环境下的语雀下载器，使用 npm 安装</p><ul><li><p>安装 yuque-hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yuque-hexo</span><br></pre></td></tr></table></figure></li><li><p>注册语雀，创建知识库，获得你的个人路径和知识库的名字，比如我的博客的知识库是 <a href="https://www.yuque.com/page/luan.ma" target="_blank" rel="noopener">https://www.yuque.com/page/luan.ma</a></p></li><li><p>在 Hexo 博客的目录下面的 <span data-type="color" style="color:rgb(106, 115, 125)"><span data-type="background" style="background-color:rgb(255, 255, 255)">package.json</span></span><span data-type="background" style="background-color:rgb(255, 255, 255)"> 中，进行下面的配置</span></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "your hexo project", //如果原来已经有这个不用再加了，直接加下面的就可以</span><br><span class="line">  "yuqueConfig": &#123;</span><br><span class="line">    "baseUrl": "https://www.yuque.com/api/v2",</span><br><span class="line">    "login": "page",</span><br><span class="line">    "repo": "luan.ma",</span><br><span class="line">    "mdNameFormat": "slug",</span><br><span class="line">    "postPath": "source/_posts/yuque"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果不是 Hexo 博客，则需要按照上面的文件保存一个 package.json 到博客目录，并且配置 postPath 为正确的文章目录</p></li><li>同步文章<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yuque-hexo sync</span><br></pre></td></tr></table></figure></li></ul><p>PS: 插件支持 Front-matter，在语雀写文章的时候直接写在前面，然后插入一条分割线即可，不写也没问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags: [Hexo]</span><br><span class="line">categories: 教程</span><br><span class="line">date: 2018-10-05 10:43:50</span><br></pre></td></tr></table></figure></p><h2 id="启动-部署-Hexo-博客"><a href="#启动-部署-Hexo-博客" class="headerlink" title="启动/部署 Hexo 博客"></a><a name="mz8pdo"></a>启动/部署 Hexo 博客</h2><ul><li><p>本地启动（调试用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>生成 html 不部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>自动上传到服务器/静态空间/git （部署）</p></li></ul><ol><li>先找到一个部署插件</li><li>在配置文件中配置好相关的账号密码</li><li>在 hexo 中生成 HTML 并且部署<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li></ol><h2 id="静态博客空间选择"><a href="#静态博客空间选择" class="headerlink" title="静态博客空间选择"></a><a name="52vexq"></a>静态博客空间选择</h2><ol><li>Github Pages： 方便，不太稳定，Git部署</li><li><a href="http://Coding.net" target="_blank" rel="noopener">Coding.net</a> Pages： 需要挂一个链接 或者 付费，速度尚可，Git部署</li><li>腾讯云 COS + 腾讯云 CDN：需要备案，速度极快，COS 插件部署</li><li>自有服务器：可定制，速度一般 ，支持多种方式部署</li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><a name="u7n1tg"></a>后记</h2><p>核心是把 <a href="https://github.com/x-cold/yuque-hexo/" target="_blank" rel="noopener">yuque-hexo</a> 这个东西介绍给大家，本博客目前也是使用这个方案同步语雀的文章。</p><p>当然，关于 Hexo 皮肤、评论插件等等玩法也要折腾很久，我就不在这篇文章里面说了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;a name=&quot;ddhwfr&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.yuque.com&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="教程" scheme="http://lulustyle.net/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://lulustyle.net/tags/Hexo/"/>
    
  </entry>
  
</feed>
